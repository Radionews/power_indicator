
Power_Indicator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002308  08005f20  08005f20  00015f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008228  08008228  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008228  08008228  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008228  08008228  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  0800823c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  0800823c  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f1c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a7e  00000000  00000000  00029f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  0002b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000878  00000000  00000000  0002c330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cf8d  00000000  00000000  0002cba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008970  00000000  00000000  00039b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000494b2  00000000  00000000  000424a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008b957  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002368  00000000  00000000  0008b9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005f08 	.word	0x08005f08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005f08 	.word	0x08005f08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fa5b 	bl	80008b8 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f9dd 	bl	80007cc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fa4d 	bl	80008b8 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fa43 	bl	80008b8 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f9eb 	bl	800081c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f9e1 	bl	800081c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	; 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fd63 	bl	8000f44 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	; 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fb99 	bl	8000bbc <__aeabi_fsub>
 800048a:	f000 fd5b 	bl	8000f44 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fadd>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	4647      	mov	r7, r8
 800049c:	46ce      	mov	lr, r9
 800049e:	0243      	lsls	r3, r0, #9
 80004a0:	0a5b      	lsrs	r3, r3, #9
 80004a2:	0044      	lsls	r4, r0, #1
 80004a4:	0fc2      	lsrs	r2, r0, #31
 80004a6:	469c      	mov	ip, r3
 80004a8:	0048      	lsls	r0, r1, #1
 80004aa:	00dd      	lsls	r5, r3, #3
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	0e24      	lsrs	r4, r4, #24
 80004b0:	0a5b      	lsrs	r3, r3, #9
 80004b2:	0e00      	lsrs	r0, r0, #24
 80004b4:	b580      	push	{r7, lr}
 80004b6:	4698      	mov	r8, r3
 80004b8:	0026      	movs	r6, r4
 80004ba:	4691      	mov	r9, r2
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	1a27      	subs	r7, r4, r0
 80004c2:	428a      	cmp	r2, r1
 80004c4:	d029      	beq.n	800051a <__aeabi_fadd+0x82>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	dd15      	ble.n	80004f6 <__aeabi_fadd+0x5e>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d14a      	bne.n	8000564 <__aeabi_fadd+0xcc>
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d000      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 80004d2:	e095      	b.n	8000600 <__aeabi_fadd+0x168>
 80004d4:	08ed      	lsrs	r5, r5, #3
 80004d6:	2cff      	cmp	r4, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x44>
 80004da:	e088      	b.n	80005ee <__aeabi_fadd+0x156>
 80004dc:	026b      	lsls	r3, r5, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	b2e6      	uxtb	r6, r4
 80004e2:	025b      	lsls	r3, r3, #9
 80004e4:	05f6      	lsls	r6, r6, #23
 80004e6:	0a58      	lsrs	r0, r3, #9
 80004e8:	4330      	orrs	r0, r6
 80004ea:	07d2      	lsls	r2, r2, #31
 80004ec:	4310      	orrs	r0, r2
 80004ee:	bc0c      	pop	{r2, r3}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f6:	2f00      	cmp	r7, #0
 80004f8:	d000      	beq.n	80004fc <__aeabi_fadd+0x64>
 80004fa:	e087      	b.n	800060c <__aeabi_fadd+0x174>
 80004fc:	1c60      	adds	r0, r4, #1
 80004fe:	b2c0      	uxtb	r0, r0
 8000500:	2801      	cmp	r0, #1
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x6e>
 8000504:	e0b6      	b.n	8000674 <__aeabi_fadd+0x1dc>
 8000506:	1aee      	subs	r6, r5, r3
 8000508:	0172      	lsls	r2, r6, #5
 800050a:	d500      	bpl.n	800050e <__aeabi_fadd+0x76>
 800050c:	e0c5      	b.n	800069a <__aeabi_fadd+0x202>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d13d      	bne.n	800058e <__aeabi_fadd+0xf6>
 8000512:	2200      	movs	r2, #0
 8000514:	2600      	movs	r6, #0
 8000516:	2300      	movs	r3, #0
 8000518:	e7e3      	b.n	80004e2 <__aeabi_fadd+0x4a>
 800051a:	2f00      	cmp	r7, #0
 800051c:	dc00      	bgt.n	8000520 <__aeabi_fadd+0x88>
 800051e:	e096      	b.n	800064e <__aeabi_fadd+0x1b6>
 8000520:	2800      	cmp	r0, #0
 8000522:	d05d      	beq.n	80005e0 <__aeabi_fadd+0x148>
 8000524:	2cff      	cmp	r4, #255	; 0xff
 8000526:	d060      	beq.n	80005ea <__aeabi_fadd+0x152>
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	04d2      	lsls	r2, r2, #19
 800052c:	4313      	orrs	r3, r2
 800052e:	2f1b      	cmp	r7, #27
 8000530:	dd00      	ble.n	8000534 <__aeabi_fadd+0x9c>
 8000532:	e0ec      	b.n	800070e <__aeabi_fadd+0x276>
 8000534:	2220      	movs	r2, #32
 8000536:	1bd2      	subs	r2, r2, r7
 8000538:	0018      	movs	r0, r3
 800053a:	4093      	lsls	r3, r2
 800053c:	40f8      	lsrs	r0, r7
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	4193      	sbcs	r3, r2
 8000542:	4303      	orrs	r3, r0
 8000544:	18ed      	adds	r5, r5, r3
 8000546:	016b      	lsls	r3, r5, #5
 8000548:	d57b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800054a:	3401      	adds	r4, #1
 800054c:	2cff      	cmp	r4, #255	; 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xba>
 8000550:	e0b7      	b.n	80006c2 <__aeabi_fadd+0x22a>
 8000552:	2201      	movs	r2, #1
 8000554:	2607      	movs	r6, #7
 8000556:	402a      	ands	r2, r5
 8000558:	086b      	lsrs	r3, r5, #1
 800055a:	4d9a      	ldr	r5, [pc, #616]	; (80007c4 <__aeabi_fadd+0x32c>)
 800055c:	401d      	ands	r5, r3
 800055e:	4315      	orrs	r5, r2
 8000560:	402e      	ands	r6, r5
 8000562:	e029      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000564:	2cff      	cmp	r4, #255	; 0xff
 8000566:	d0b5      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	04d2      	lsls	r2, r2, #19
 800056c:	4313      	orrs	r3, r2
 800056e:	2f1b      	cmp	r7, #27
 8000570:	dd00      	ble.n	8000574 <__aeabi_fadd+0xdc>
 8000572:	e0b2      	b.n	80006da <__aeabi_fadd+0x242>
 8000574:	2220      	movs	r2, #32
 8000576:	1bd2      	subs	r2, r2, r7
 8000578:	0019      	movs	r1, r3
 800057a:	4093      	lsls	r3, r2
 800057c:	40f9      	lsrs	r1, r7
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	4193      	sbcs	r3, r2
 8000582:	430b      	orrs	r3, r1
 8000584:	1aed      	subs	r5, r5, r3
 8000586:	016b      	lsls	r3, r5, #5
 8000588:	d55b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800058a:	01ad      	lsls	r5, r5, #6
 800058c:	09ae      	lsrs	r6, r5, #6
 800058e:	0030      	movs	r0, r6
 8000590:	f001 fbc6 	bl	8001d20 <__clzsi2>
 8000594:	3805      	subs	r0, #5
 8000596:	4086      	lsls	r6, r0
 8000598:	4284      	cmp	r4, r0
 800059a:	dc65      	bgt.n	8000668 <__aeabi_fadd+0x1d0>
 800059c:	1b04      	subs	r4, r0, r4
 800059e:	0033      	movs	r3, r6
 80005a0:	2020      	movs	r0, #32
 80005a2:	3401      	adds	r4, #1
 80005a4:	40e3      	lsrs	r3, r4
 80005a6:	1b04      	subs	r4, r0, r4
 80005a8:	40a6      	lsls	r6, r4
 80005aa:	1e75      	subs	r5, r6, #1
 80005ac:	41ae      	sbcs	r6, r5
 80005ae:	4333      	orrs	r3, r6
 80005b0:	2607      	movs	r6, #7
 80005b2:	001d      	movs	r5, r3
 80005b4:	2400      	movs	r4, #0
 80005b6:	401e      	ands	r6, r3
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	401a      	ands	r2, r3
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d004      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005c2:	230f      	movs	r3, #15
 80005c4:	402b      	ands	r3, r5
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d000      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005ca:	3504      	adds	r5, #4
 80005cc:	016b      	lsls	r3, r5, #5
 80005ce:	d400      	bmi.n	80005d2 <__aeabi_fadd+0x13a>
 80005d0:	e780      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005d2:	3401      	adds	r4, #1
 80005d4:	b2e6      	uxtb	r6, r4
 80005d6:	2cff      	cmp	r4, #255	; 0xff
 80005d8:	d12f      	bne.n	800063a <__aeabi_fadd+0x1a2>
 80005da:	26ff      	movs	r6, #255	; 0xff
 80005dc:	2300      	movs	r3, #0
 80005de:	e780      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d152      	bne.n	800068a <__aeabi_fadd+0x1f2>
 80005e4:	2cff      	cmp	r4, #255	; 0xff
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x152>
 80005e8:	e774      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005ea:	000a      	movs	r2, r1
 80005ec:	08ed      	lsrs	r5, r5, #3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0f3      	beq.n	80005da <__aeabi_fadd+0x142>
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	03db      	lsls	r3, r3, #15
 80005f6:	432b      	orrs	r3, r5
 80005f8:	025b      	lsls	r3, r3, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	26ff      	movs	r6, #255	; 0xff
 80005fe:	e770      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000600:	3f01      	subs	r7, #1
 8000602:	2f00      	cmp	r7, #0
 8000604:	d0be      	beq.n	8000584 <__aeabi_fadd+0xec>
 8000606:	2cff      	cmp	r4, #255	; 0xff
 8000608:	d1b1      	bne.n	800056e <__aeabi_fadd+0xd6>
 800060a:	e763      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800060c:	2c00      	cmp	r4, #0
 800060e:	d047      	beq.n	80006a0 <__aeabi_fadd+0x208>
 8000610:	28ff      	cmp	r0, #255	; 0xff
 8000612:	d069      	beq.n	80006e8 <__aeabi_fadd+0x250>
 8000614:	2480      	movs	r4, #128	; 0x80
 8000616:	04e4      	lsls	r4, r4, #19
 8000618:	427a      	negs	r2, r7
 800061a:	4325      	orrs	r5, r4
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd00      	ble.n	8000622 <__aeabi_fadd+0x18a>
 8000620:	e0c5      	b.n	80007ae <__aeabi_fadd+0x316>
 8000622:	002c      	movs	r4, r5
 8000624:	2620      	movs	r6, #32
 8000626:	40d4      	lsrs	r4, r2
 8000628:	1ab2      	subs	r2, r6, r2
 800062a:	4095      	lsls	r5, r2
 800062c:	1e6a      	subs	r2, r5, #1
 800062e:	4195      	sbcs	r5, r2
 8000630:	4325      	orrs	r5, r4
 8000632:	1b5d      	subs	r5, r3, r5
 8000634:	0004      	movs	r4, r0
 8000636:	4689      	mov	r9, r1
 8000638:	e7a5      	b.n	8000586 <__aeabi_fadd+0xee>
 800063a:	01ab      	lsls	r3, r5, #6
 800063c:	0a5b      	lsrs	r3, r3, #9
 800063e:	e750      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000640:	2400      	movs	r4, #0
 8000642:	2201      	movs	r2, #1
 8000644:	464b      	mov	r3, r9
 8000646:	401a      	ands	r2, r3
 8000648:	076b      	lsls	r3, r5, #29
 800064a:	d1ba      	bne.n	80005c2 <__aeabi_fadd+0x12a>
 800064c:	e742      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800064e:	2f00      	cmp	r7, #0
 8000650:	d13b      	bne.n	80006ca <__aeabi_fadd+0x232>
 8000652:	3401      	adds	r4, #1
 8000654:	b2e0      	uxtb	r0, r4
 8000656:	2801      	cmp	r0, #1
 8000658:	dd4a      	ble.n	80006f0 <__aeabi_fadd+0x258>
 800065a:	2cff      	cmp	r4, #255	; 0xff
 800065c:	d0bd      	beq.n	80005da <__aeabi_fadd+0x142>
 800065e:	2607      	movs	r6, #7
 8000660:	18ed      	adds	r5, r5, r3
 8000662:	086d      	lsrs	r5, r5, #1
 8000664:	402e      	ands	r6, r5
 8000666:	e7a7      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000668:	2307      	movs	r3, #7
 800066a:	4d57      	ldr	r5, [pc, #348]	; (80007c8 <__aeabi_fadd+0x330>)
 800066c:	1a24      	subs	r4, r4, r0
 800066e:	4035      	ands	r5, r6
 8000670:	401e      	ands	r6, r3
 8000672:	e7a1      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000674:	2c00      	cmp	r4, #0
 8000676:	d11b      	bne.n	80006b0 <__aeabi_fadd+0x218>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d16e      	bne.n	800075a <__aeabi_fadd+0x2c2>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x1ea>
 8000680:	e09a      	b.n	80007b8 <__aeabi_fadd+0x320>
 8000682:	000a      	movs	r2, r1
 8000684:	001d      	movs	r5, r3
 8000686:	003c      	movs	r4, r7
 8000688:	e724      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800068a:	3f01      	subs	r7, #1
 800068c:	2f00      	cmp	r7, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x1fa>
 8000690:	e758      	b.n	8000544 <__aeabi_fadd+0xac>
 8000692:	2cff      	cmp	r4, #255	; 0xff
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x200>
 8000696:	e74a      	b.n	800052e <__aeabi_fadd+0x96>
 8000698:	e7a7      	b.n	80005ea <__aeabi_fadd+0x152>
 800069a:	1b5e      	subs	r6, r3, r5
 800069c:	4689      	mov	r9, r1
 800069e:	e776      	b.n	800058e <__aeabi_fadd+0xf6>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d11c      	bne.n	80006de <__aeabi_fadd+0x246>
 80006a4:	000a      	movs	r2, r1
 80006a6:	28ff      	cmp	r0, #255	; 0xff
 80006a8:	d01f      	beq.n	80006ea <__aeabi_fadd+0x252>
 80006aa:	0004      	movs	r4, r0
 80006ac:	001d      	movs	r5, r3
 80006ae:	e711      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d15d      	bne.n	8000770 <__aeabi_fadd+0x2d8>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d117      	bne.n	80006e8 <__aeabi_fadd+0x250>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	2200      	movs	r2, #0
 80006bc:	03db      	lsls	r3, r3, #15
 80006be:	26ff      	movs	r6, #255	; 0xff
 80006c0:	e70f      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006c2:	000a      	movs	r2, r1
 80006c4:	26ff      	movs	r6, #255	; 0xff
 80006c6:	2300      	movs	r3, #0
 80006c8:	e70b      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d121      	bne.n	8000712 <__aeabi_fadd+0x27a>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d166      	bne.n	80007a0 <__aeabi_fadd+0x308>
 80006d2:	28ff      	cmp	r0, #255	; 0xff
 80006d4:	d1e9      	bne.n	80006aa <__aeabi_fadd+0x212>
 80006d6:	001d      	movs	r5, r3
 80006d8:	e787      	b.n	80005ea <__aeabi_fadd+0x152>
 80006da:	2301      	movs	r3, #1
 80006dc:	e752      	b.n	8000584 <__aeabi_fadd+0xec>
 80006de:	1c7a      	adds	r2, r7, #1
 80006e0:	d0a7      	beq.n	8000632 <__aeabi_fadd+0x19a>
 80006e2:	43fa      	mvns	r2, r7
 80006e4:	28ff      	cmp	r0, #255	; 0xff
 80006e6:	d199      	bne.n	800061c <__aeabi_fadd+0x184>
 80006e8:	000a      	movs	r2, r1
 80006ea:	001d      	movs	r5, r3
 80006ec:	24ff      	movs	r4, #255	; 0xff
 80006ee:	e6f1      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d121      	bne.n	8000738 <__aeabi_fadd+0x2a0>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d04f      	beq.n	8000798 <__aeabi_fadd+0x300>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d04c      	beq.n	8000796 <__aeabi_fadd+0x2fe>
 80006fc:	18ed      	adds	r5, r5, r3
 80006fe:	016b      	lsls	r3, r5, #5
 8000700:	d59e      	bpl.n	8000640 <__aeabi_fadd+0x1a8>
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <__aeabi_fadd+0x330>)
 8000704:	3607      	adds	r6, #7
 8000706:	402e      	ands	r6, r5
 8000708:	2401      	movs	r4, #1
 800070a:	401d      	ands	r5, r3
 800070c:	e754      	b.n	80005b8 <__aeabi_fadd+0x120>
 800070e:	2301      	movs	r3, #1
 8000710:	e718      	b.n	8000544 <__aeabi_fadd+0xac>
 8000712:	28ff      	cmp	r0, #255	; 0xff
 8000714:	d0df      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 8000716:	2480      	movs	r4, #128	; 0x80
 8000718:	04e4      	lsls	r4, r4, #19
 800071a:	427f      	negs	r7, r7
 800071c:	4325      	orrs	r5, r4
 800071e:	2f1b      	cmp	r7, #27
 8000720:	dc4d      	bgt.n	80007be <__aeabi_fadd+0x326>
 8000722:	2620      	movs	r6, #32
 8000724:	1bf6      	subs	r6, r6, r7
 8000726:	002c      	movs	r4, r5
 8000728:	40b5      	lsls	r5, r6
 800072a:	40fc      	lsrs	r4, r7
 800072c:	1e6a      	subs	r2, r5, #1
 800072e:	4195      	sbcs	r5, r2
 8000730:	4325      	orrs	r5, r4
 8000732:	18ed      	adds	r5, r5, r3
 8000734:	0004      	movs	r4, r0
 8000736:	e706      	b.n	8000546 <__aeabi_fadd+0xae>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d0cc      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x2aa>
 8000740:	e753      	b.n	80005ea <__aeabi_fadd+0x152>
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	4660      	mov	r0, ip
 8000746:	03c9      	lsls	r1, r1, #15
 8000748:	4208      	tst	r0, r1
 800074a:	d003      	beq.n	8000754 <__aeabi_fadd+0x2bc>
 800074c:	4640      	mov	r0, r8
 800074e:	4208      	tst	r0, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x2bc>
 8000752:	001d      	movs	r5, r3
 8000754:	2101      	movs	r1, #1
 8000756:	4011      	ands	r1, r2
 8000758:	e747      	b.n	80005ea <__aeabi_fadd+0x152>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x2c8>
 800075e:	e6b9      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000760:	1aea      	subs	r2, r5, r3
 8000762:	0150      	lsls	r0, r2, #5
 8000764:	d525      	bpl.n	80007b2 <__aeabi_fadd+0x31a>
 8000766:	2607      	movs	r6, #7
 8000768:	1b5d      	subs	r5, r3, r5
 800076a:	402e      	ands	r6, r5
 800076c:	4689      	mov	r9, r1
 800076e:	e723      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000770:	24ff      	movs	r4, #255	; 0xff
 8000772:	2b00      	cmp	r3, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x2e0>
 8000776:	e6ad      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4660      	mov	r0, ip
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	4210      	tst	r0, r2
 8000780:	d004      	beq.n	800078c <__aeabi_fadd+0x2f4>
 8000782:	4640      	mov	r0, r8
 8000784:	4210      	tst	r0, r2
 8000786:	d101      	bne.n	800078c <__aeabi_fadd+0x2f4>
 8000788:	001d      	movs	r5, r3
 800078a:	4689      	mov	r9, r1
 800078c:	2201      	movs	r2, #1
 800078e:	464b      	mov	r3, r9
 8000790:	24ff      	movs	r4, #255	; 0xff
 8000792:	401a      	ands	r2, r3
 8000794:	e69e      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000796:	002b      	movs	r3, r5
 8000798:	08dd      	lsrs	r5, r3, #3
 800079a:	000a      	movs	r2, r1
 800079c:	2400      	movs	r4, #0
 800079e:	e69d      	b.n	80004dc <__aeabi_fadd+0x44>
 80007a0:	1c7a      	adds	r2, r7, #1
 80007a2:	d0c6      	beq.n	8000732 <__aeabi_fadd+0x29a>
 80007a4:	43ff      	mvns	r7, r7
 80007a6:	28ff      	cmp	r0, #255	; 0xff
 80007a8:	d1b9      	bne.n	800071e <__aeabi_fadd+0x286>
 80007aa:	001d      	movs	r5, r3
 80007ac:	e71d      	b.n	80005ea <__aeabi_fadd+0x152>
 80007ae:	2501      	movs	r5, #1
 80007b0:	e73f      	b.n	8000632 <__aeabi_fadd+0x19a>
 80007b2:	1e15      	subs	r5, r2, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x320>
 80007b6:	e744      	b.n	8000642 <__aeabi_fadd+0x1aa>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	e691      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80007be:	2501      	movs	r5, #1
 80007c0:	e7b7      	b.n	8000732 <__aeabi_fadd+0x29a>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	7dffffff 	.word	0x7dffffff
 80007c8:	fbffffff 	.word	0xfbffffff

080007cc <__eqsf2>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	0042      	lsls	r2, r0, #1
 80007d0:	024e      	lsls	r6, r1, #9
 80007d2:	004c      	lsls	r4, r1, #1
 80007d4:	0245      	lsls	r5, r0, #9
 80007d6:	0a6d      	lsrs	r5, r5, #9
 80007d8:	0e12      	lsrs	r2, r2, #24
 80007da:	0fc3      	lsrs	r3, r0, #31
 80007dc:	0a76      	lsrs	r6, r6, #9
 80007de:	0e24      	lsrs	r4, r4, #24
 80007e0:	0fc9      	lsrs	r1, r1, #31
 80007e2:	2aff      	cmp	r2, #255	; 0xff
 80007e4:	d00f      	beq.n	8000806 <__eqsf2+0x3a>
 80007e6:	2cff      	cmp	r4, #255	; 0xff
 80007e8:	d011      	beq.n	800080e <__eqsf2+0x42>
 80007ea:	2001      	movs	r0, #1
 80007ec:	42a2      	cmp	r2, r4
 80007ee:	d000      	beq.n	80007f2 <__eqsf2+0x26>
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	42b5      	cmp	r5, r6
 80007f4:	d1fc      	bne.n	80007f0 <__eqsf2+0x24>
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d00d      	beq.n	8000816 <__eqsf2+0x4a>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d1f8      	bne.n	80007f0 <__eqsf2+0x24>
 80007fe:	0028      	movs	r0, r5
 8000800:	1e45      	subs	r5, r0, #1
 8000802:	41a8      	sbcs	r0, r5
 8000804:	e7f4      	b.n	80007f0 <__eqsf2+0x24>
 8000806:	2001      	movs	r0, #1
 8000808:	2d00      	cmp	r5, #0
 800080a:	d1f1      	bne.n	80007f0 <__eqsf2+0x24>
 800080c:	e7eb      	b.n	80007e6 <__eqsf2+0x1a>
 800080e:	2001      	movs	r0, #1
 8000810:	2e00      	cmp	r6, #0
 8000812:	d1ed      	bne.n	80007f0 <__eqsf2+0x24>
 8000814:	e7e9      	b.n	80007ea <__eqsf2+0x1e>
 8000816:	2000      	movs	r0, #0
 8000818:	e7ea      	b.n	80007f0 <__eqsf2+0x24>
 800081a:	46c0      	nop			; (mov r8, r8)

0800081c <__gesf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	004a      	lsls	r2, r1, #1
 8000820:	024e      	lsls	r6, r1, #9
 8000822:	0245      	lsls	r5, r0, #9
 8000824:	0044      	lsls	r4, r0, #1
 8000826:	0a6d      	lsrs	r5, r5, #9
 8000828:	0e24      	lsrs	r4, r4, #24
 800082a:	0fc3      	lsrs	r3, r0, #31
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e12      	lsrs	r2, r2, #24
 8000830:	0fc9      	lsrs	r1, r1, #31
 8000832:	2cff      	cmp	r4, #255	; 0xff
 8000834:	d015      	beq.n	8000862 <__gesf2+0x46>
 8000836:	2aff      	cmp	r2, #255	; 0xff
 8000838:	d00e      	beq.n	8000858 <__gesf2+0x3c>
 800083a:	2c00      	cmp	r4, #0
 800083c:	d115      	bne.n	800086a <__gesf2+0x4e>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d101      	bne.n	8000846 <__gesf2+0x2a>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d01c      	beq.n	8000880 <__gesf2+0x64>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d014      	beq.n	8000874 <__gesf2+0x58>
 800084a:	428b      	cmp	r3, r1
 800084c:	d027      	beq.n	800089e <__gesf2+0x82>
 800084e:	2002      	movs	r0, #2
 8000850:	3b01      	subs	r3, #1
 8000852:	4018      	ands	r0, r3
 8000854:	3801      	subs	r0, #1
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	2e00      	cmp	r6, #0
 800085a:	d0ee      	beq.n	800083a <__gesf2+0x1e>
 800085c:	2002      	movs	r0, #2
 800085e:	4240      	negs	r0, r0
 8000860:	e7f9      	b.n	8000856 <__gesf2+0x3a>
 8000862:	2d00      	cmp	r5, #0
 8000864:	d1fa      	bne.n	800085c <__gesf2+0x40>
 8000866:	2aff      	cmp	r2, #255	; 0xff
 8000868:	d00e      	beq.n	8000888 <__gesf2+0x6c>
 800086a:	2a00      	cmp	r2, #0
 800086c:	d10e      	bne.n	800088c <__gesf2+0x70>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d0ed      	beq.n	800084e <__gesf2+0x32>
 8000872:	e00b      	b.n	800088c <__gesf2+0x70>
 8000874:	2301      	movs	r3, #1
 8000876:	3901      	subs	r1, #1
 8000878:	4399      	bics	r1, r3
 800087a:	0008      	movs	r0, r1
 800087c:	3001      	adds	r0, #1
 800087e:	e7ea      	b.n	8000856 <__gesf2+0x3a>
 8000880:	2000      	movs	r0, #0
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0e7      	beq.n	8000856 <__gesf2+0x3a>
 8000886:	e7e2      	b.n	800084e <__gesf2+0x32>
 8000888:	2e00      	cmp	r6, #0
 800088a:	d1e7      	bne.n	800085c <__gesf2+0x40>
 800088c:	428b      	cmp	r3, r1
 800088e:	d1de      	bne.n	800084e <__gesf2+0x32>
 8000890:	4294      	cmp	r4, r2
 8000892:	dd05      	ble.n	80008a0 <__gesf2+0x84>
 8000894:	2102      	movs	r1, #2
 8000896:	1e58      	subs	r0, r3, #1
 8000898:	4008      	ands	r0, r1
 800089a:	3801      	subs	r0, #1
 800089c:	e7db      	b.n	8000856 <__gesf2+0x3a>
 800089e:	2400      	movs	r4, #0
 80008a0:	42a2      	cmp	r2, r4
 80008a2:	dc04      	bgt.n	80008ae <__gesf2+0x92>
 80008a4:	42b5      	cmp	r5, r6
 80008a6:	d8d2      	bhi.n	800084e <__gesf2+0x32>
 80008a8:	2000      	movs	r0, #0
 80008aa:	42b5      	cmp	r5, r6
 80008ac:	d2d3      	bcs.n	8000856 <__gesf2+0x3a>
 80008ae:	1e58      	subs	r0, r3, #1
 80008b0:	2301      	movs	r3, #1
 80008b2:	4398      	bics	r0, r3
 80008b4:	3001      	adds	r0, #1
 80008b6:	e7ce      	b.n	8000856 <__gesf2+0x3a>

080008b8 <__lesf2>:
 80008b8:	b530      	push	{r4, r5, lr}
 80008ba:	0042      	lsls	r2, r0, #1
 80008bc:	0244      	lsls	r4, r0, #9
 80008be:	024d      	lsls	r5, r1, #9
 80008c0:	0fc3      	lsrs	r3, r0, #31
 80008c2:	0048      	lsls	r0, r1, #1
 80008c4:	0a64      	lsrs	r4, r4, #9
 80008c6:	0e12      	lsrs	r2, r2, #24
 80008c8:	0a6d      	lsrs	r5, r5, #9
 80008ca:	0e00      	lsrs	r0, r0, #24
 80008cc:	0fc9      	lsrs	r1, r1, #31
 80008ce:	2aff      	cmp	r2, #255	; 0xff
 80008d0:	d012      	beq.n	80008f8 <__lesf2+0x40>
 80008d2:	28ff      	cmp	r0, #255	; 0xff
 80008d4:	d00c      	beq.n	80008f0 <__lesf2+0x38>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d112      	bne.n	8000900 <__lesf2+0x48>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d119      	bne.n	8000912 <__lesf2+0x5a>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d117      	bne.n	8000912 <__lesf2+0x5a>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d02b      	beq.n	800093e <__lesf2+0x86>
 80008e6:	2002      	movs	r0, #2
 80008e8:	3b01      	subs	r3, #1
 80008ea:	4018      	ands	r0, r3
 80008ec:	3801      	subs	r0, #1
 80008ee:	e026      	b.n	800093e <__lesf2+0x86>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d0f0      	beq.n	80008d6 <__lesf2+0x1e>
 80008f4:	2002      	movs	r0, #2
 80008f6:	e022      	b.n	800093e <__lesf2+0x86>
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d1fb      	bne.n	80008f4 <__lesf2+0x3c>
 80008fc:	28ff      	cmp	r0, #255	; 0xff
 80008fe:	d01f      	beq.n	8000940 <__lesf2+0x88>
 8000900:	2800      	cmp	r0, #0
 8000902:	d11f      	bne.n	8000944 <__lesf2+0x8c>
 8000904:	2d00      	cmp	r5, #0
 8000906:	d11d      	bne.n	8000944 <__lesf2+0x8c>
 8000908:	2002      	movs	r0, #2
 800090a:	3b01      	subs	r3, #1
 800090c:	4018      	ands	r0, r3
 800090e:	3801      	subs	r0, #1
 8000910:	e015      	b.n	800093e <__lesf2+0x86>
 8000912:	2c00      	cmp	r4, #0
 8000914:	d00e      	beq.n	8000934 <__lesf2+0x7c>
 8000916:	428b      	cmp	r3, r1
 8000918:	d1e5      	bne.n	80008e6 <__lesf2+0x2e>
 800091a:	2200      	movs	r2, #0
 800091c:	4290      	cmp	r0, r2
 800091e:	dc04      	bgt.n	800092a <__lesf2+0x72>
 8000920:	42ac      	cmp	r4, r5
 8000922:	d8e0      	bhi.n	80008e6 <__lesf2+0x2e>
 8000924:	2000      	movs	r0, #0
 8000926:	42ac      	cmp	r4, r5
 8000928:	d209      	bcs.n	800093e <__lesf2+0x86>
 800092a:	1e58      	subs	r0, r3, #1
 800092c:	2301      	movs	r3, #1
 800092e:	4398      	bics	r0, r3
 8000930:	3001      	adds	r0, #1
 8000932:	e004      	b.n	800093e <__lesf2+0x86>
 8000934:	2301      	movs	r3, #1
 8000936:	3901      	subs	r1, #1
 8000938:	4399      	bics	r1, r3
 800093a:	0008      	movs	r0, r1
 800093c:	3001      	adds	r0, #1
 800093e:	bd30      	pop	{r4, r5, pc}
 8000940:	2d00      	cmp	r5, #0
 8000942:	d1d7      	bne.n	80008f4 <__lesf2+0x3c>
 8000944:	428b      	cmp	r3, r1
 8000946:	d1ce      	bne.n	80008e6 <__lesf2+0x2e>
 8000948:	4282      	cmp	r2, r0
 800094a:	dde7      	ble.n	800091c <__lesf2+0x64>
 800094c:	2102      	movs	r1, #2
 800094e:	1e58      	subs	r0, r3, #1
 8000950:	4008      	ands	r0, r1
 8000952:	3801      	subs	r0, #1
 8000954:	e7f3      	b.n	800093e <__lesf2+0x86>
 8000956:	46c0      	nop			; (mov r8, r8)

08000958 <__aeabi_fmul>:
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	464e      	mov	r6, r9
 800095c:	4657      	mov	r7, sl
 800095e:	4645      	mov	r5, r8
 8000960:	46de      	mov	lr, fp
 8000962:	b5e0      	push	{r5, r6, r7, lr}
 8000964:	0243      	lsls	r3, r0, #9
 8000966:	0a5b      	lsrs	r3, r3, #9
 8000968:	0045      	lsls	r5, r0, #1
 800096a:	b083      	sub	sp, #12
 800096c:	1c0f      	adds	r7, r1, #0
 800096e:	4699      	mov	r9, r3
 8000970:	0e2d      	lsrs	r5, r5, #24
 8000972:	0fc6      	lsrs	r6, r0, #31
 8000974:	2d00      	cmp	r5, #0
 8000976:	d057      	beq.n	8000a28 <__aeabi_fmul+0xd0>
 8000978:	2dff      	cmp	r5, #255	; 0xff
 800097a:	d024      	beq.n	80009c6 <__aeabi_fmul+0x6e>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	04c0      	lsls	r0, r0, #19
 8000982:	4318      	orrs	r0, r3
 8000984:	2300      	movs	r3, #0
 8000986:	4681      	mov	r9, r0
 8000988:	469a      	mov	sl, r3
 800098a:	469b      	mov	fp, r3
 800098c:	3d7f      	subs	r5, #127	; 0x7f
 800098e:	027c      	lsls	r4, r7, #9
 8000990:	007a      	lsls	r2, r7, #1
 8000992:	0ffb      	lsrs	r3, r7, #31
 8000994:	0a64      	lsrs	r4, r4, #9
 8000996:	0e12      	lsrs	r2, r2, #24
 8000998:	4698      	mov	r8, r3
 800099a:	d023      	beq.n	80009e4 <__aeabi_fmul+0x8c>
 800099c:	2aff      	cmp	r2, #255	; 0xff
 800099e:	d04b      	beq.n	8000a38 <__aeabi_fmul+0xe0>
 80009a0:	00e3      	lsls	r3, r4, #3
 80009a2:	2480      	movs	r4, #128	; 0x80
 80009a4:	2000      	movs	r0, #0
 80009a6:	04e4      	lsls	r4, r4, #19
 80009a8:	3a7f      	subs	r2, #127	; 0x7f
 80009aa:	431c      	orrs	r4, r3
 80009ac:	18ad      	adds	r5, r5, r2
 80009ae:	1c6b      	adds	r3, r5, #1
 80009b0:	4647      	mov	r7, r8
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	4653      	mov	r3, sl
 80009b6:	4077      	eors	r7, r6
 80009b8:	003a      	movs	r2, r7
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	d848      	bhi.n	8000a50 <__aeabi_fmul+0xf8>
 80009be:	497d      	ldr	r1, [pc, #500]	; (8000bb4 <__aeabi_fmul+0x25c>)
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	58cb      	ldr	r3, [r1, r3]
 80009c4:	469f      	mov	pc, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_fmul+0x74>
 80009ca:	e085      	b.n	8000ad8 <__aeabi_fmul+0x180>
 80009cc:	3308      	adds	r3, #8
 80009ce:	469a      	mov	sl, r3
 80009d0:	3b06      	subs	r3, #6
 80009d2:	469b      	mov	fp, r3
 80009d4:	027c      	lsls	r4, r7, #9
 80009d6:	007a      	lsls	r2, r7, #1
 80009d8:	0ffb      	lsrs	r3, r7, #31
 80009da:	25ff      	movs	r5, #255	; 0xff
 80009dc:	0a64      	lsrs	r4, r4, #9
 80009de:	0e12      	lsrs	r2, r2, #24
 80009e0:	4698      	mov	r8, r3
 80009e2:	d1db      	bne.n	800099c <__aeabi_fmul+0x44>
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fmul+0x92>
 80009e8:	e090      	b.n	8000b0c <__aeabi_fmul+0x1b4>
 80009ea:	4652      	mov	r2, sl
 80009ec:	2301      	movs	r3, #1
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4692      	mov	sl, r2
 80009f2:	2001      	movs	r0, #1
 80009f4:	e7db      	b.n	80009ae <__aeabi_fmul+0x56>
 80009f6:	464c      	mov	r4, r9
 80009f8:	4658      	mov	r0, fp
 80009fa:	0017      	movs	r7, r2
 80009fc:	2802      	cmp	r0, #2
 80009fe:	d024      	beq.n	8000a4a <__aeabi_fmul+0xf2>
 8000a00:	2803      	cmp	r0, #3
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fmul+0xae>
 8000a04:	e0cf      	b.n	8000ba6 <__aeabi_fmul+0x24e>
 8000a06:	2200      	movs	r2, #0
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2801      	cmp	r0, #1
 8000a0c:	d14d      	bne.n	8000aaa <__aeabi_fmul+0x152>
 8000a0e:	0258      	lsls	r0, r3, #9
 8000a10:	05d2      	lsls	r2, r2, #23
 8000a12:	0a40      	lsrs	r0, r0, #9
 8000a14:	07ff      	lsls	r7, r7, #31
 8000a16:	4310      	orrs	r0, r2
 8000a18:	4338      	orrs	r0, r7
 8000a1a:	b003      	add	sp, #12
 8000a1c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a1e:	4690      	mov	r8, r2
 8000a20:	4699      	mov	r9, r3
 8000a22:	46a2      	mov	sl, r4
 8000a24:	46ab      	mov	fp, r5
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d15b      	bne.n	8000ae4 <__aeabi_fmul+0x18c>
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	469a      	mov	sl, r3
 8000a30:	3b03      	subs	r3, #3
 8000a32:	2500      	movs	r5, #0
 8000a34:	469b      	mov	fp, r3
 8000a36:	e7aa      	b.n	800098e <__aeabi_fmul+0x36>
 8000a38:	35ff      	adds	r5, #255	; 0xff
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d160      	bne.n	8000b00 <__aeabi_fmul+0x1a8>
 8000a3e:	4652      	mov	r2, sl
 8000a40:	2302      	movs	r3, #2
 8000a42:	431a      	orrs	r2, r3
 8000a44:	4692      	mov	sl, r2
 8000a46:	2002      	movs	r0, #2
 8000a48:	e7b1      	b.n	80009ae <__aeabi_fmul+0x56>
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e7de      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000a50:	464b      	mov	r3, r9
 8000a52:	0c1b      	lsrs	r3, r3, #16
 8000a54:	469c      	mov	ip, r3
 8000a56:	464b      	mov	r3, r9
 8000a58:	0426      	lsls	r6, r4, #16
 8000a5a:	0c36      	lsrs	r6, r6, #16
 8000a5c:	0418      	lsls	r0, r3, #16
 8000a5e:	4661      	mov	r1, ip
 8000a60:	0033      	movs	r3, r6
 8000a62:	0c22      	lsrs	r2, r4, #16
 8000a64:	4664      	mov	r4, ip
 8000a66:	0c00      	lsrs	r0, r0, #16
 8000a68:	4343      	muls	r3, r0
 8000a6a:	434e      	muls	r6, r1
 8000a6c:	4350      	muls	r0, r2
 8000a6e:	4354      	muls	r4, r2
 8000a70:	1980      	adds	r0, r0, r6
 8000a72:	0c1a      	lsrs	r2, r3, #16
 8000a74:	1812      	adds	r2, r2, r0
 8000a76:	4296      	cmp	r6, r2
 8000a78:	d903      	bls.n	8000a82 <__aeabi_fmul+0x12a>
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0249      	lsls	r1, r1, #9
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4464      	add	r4, ip
 8000a82:	041b      	lsls	r3, r3, #16
 8000a84:	0c1b      	lsrs	r3, r3, #16
 8000a86:	0410      	lsls	r0, r2, #16
 8000a88:	18c0      	adds	r0, r0, r3
 8000a8a:	0183      	lsls	r3, r0, #6
 8000a8c:	1e5e      	subs	r6, r3, #1
 8000a8e:	41b3      	sbcs	r3, r6
 8000a90:	0e80      	lsrs	r0, r0, #26
 8000a92:	4318      	orrs	r0, r3
 8000a94:	0c13      	lsrs	r3, r2, #16
 8000a96:	191b      	adds	r3, r3, r4
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	4303      	orrs	r3, r0
 8000a9c:	001c      	movs	r4, r3
 8000a9e:	0123      	lsls	r3, r4, #4
 8000aa0:	d579      	bpl.n	8000b96 <__aeabi_fmul+0x23e>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	0862      	lsrs	r2, r4, #1
 8000aa6:	401c      	ands	r4, r3
 8000aa8:	4314      	orrs	r4, r2
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	327f      	adds	r2, #127	; 0x7f
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	dd4d      	ble.n	8000b4e <__aeabi_fmul+0x1f6>
 8000ab2:	0763      	lsls	r3, r4, #29
 8000ab4:	d004      	beq.n	8000ac0 <__aeabi_fmul+0x168>
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	4023      	ands	r3, r4
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fmul+0x168>
 8000abe:	3404      	adds	r4, #4
 8000ac0:	0123      	lsls	r3, r4, #4
 8000ac2:	d503      	bpl.n	8000acc <__aeabi_fmul+0x174>
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <__aeabi_fmul+0x260>)
 8000ac6:	9a01      	ldr	r2, [sp, #4]
 8000ac8:	401c      	ands	r4, r3
 8000aca:	3280      	adds	r2, #128	; 0x80
 8000acc:	2afe      	cmp	r2, #254	; 0xfe
 8000ace:	dcbc      	bgt.n	8000a4a <__aeabi_fmul+0xf2>
 8000ad0:	01a3      	lsls	r3, r4, #6
 8000ad2:	0a5b      	lsrs	r3, r3, #9
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	e79a      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000ad8:	230c      	movs	r3, #12
 8000ada:	469a      	mov	sl, r3
 8000adc:	3b09      	subs	r3, #9
 8000ade:	25ff      	movs	r5, #255	; 0xff
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e754      	b.n	800098e <__aeabi_fmul+0x36>
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 f91b 	bl	8001d20 <__clzsi2>
 8000aea:	464a      	mov	r2, r9
 8000aec:	1f43      	subs	r3, r0, #5
 8000aee:	2576      	movs	r5, #118	; 0x76
 8000af0:	409a      	lsls	r2, r3
 8000af2:	2300      	movs	r3, #0
 8000af4:	426d      	negs	r5, r5
 8000af6:	4691      	mov	r9, r2
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	469a      	mov	sl, r3
 8000afc:	469b      	mov	fp, r3
 8000afe:	e746      	b.n	800098e <__aeabi_fmul+0x36>
 8000b00:	4652      	mov	r2, sl
 8000b02:	2303      	movs	r3, #3
 8000b04:	431a      	orrs	r2, r3
 8000b06:	4692      	mov	sl, r2
 8000b08:	2003      	movs	r0, #3
 8000b0a:	e750      	b.n	80009ae <__aeabi_fmul+0x56>
 8000b0c:	0020      	movs	r0, r4
 8000b0e:	f001 f907 	bl	8001d20 <__clzsi2>
 8000b12:	1f43      	subs	r3, r0, #5
 8000b14:	1a2d      	subs	r5, r5, r0
 8000b16:	409c      	lsls	r4, r3
 8000b18:	3d76      	subs	r5, #118	; 0x76
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	e747      	b.n	80009ae <__aeabi_fmul+0x56>
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	2700      	movs	r7, #0
 8000b22:	03db      	lsls	r3, r3, #15
 8000b24:	22ff      	movs	r2, #255	; 0xff
 8000b26:	e772      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000b28:	4642      	mov	r2, r8
 8000b2a:	e766      	b.n	80009fa <__aeabi_fmul+0xa2>
 8000b2c:	464c      	mov	r4, r9
 8000b2e:	0032      	movs	r2, r6
 8000b30:	4658      	mov	r0, fp
 8000b32:	e762      	b.n	80009fa <__aeabi_fmul+0xa2>
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	464a      	mov	r2, r9
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	421a      	tst	r2, r3
 8000b3c:	d022      	beq.n	8000b84 <__aeabi_fmul+0x22c>
 8000b3e:	421c      	tst	r4, r3
 8000b40:	d120      	bne.n	8000b84 <__aeabi_fmul+0x22c>
 8000b42:	4323      	orrs	r3, r4
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	0a5b      	lsrs	r3, r3, #9
 8000b48:	4647      	mov	r7, r8
 8000b4a:	22ff      	movs	r2, #255	; 0xff
 8000b4c:	e75f      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	1a9a      	subs	r2, r3, r2
 8000b52:	2a1b      	cmp	r2, #27
 8000b54:	dc21      	bgt.n	8000b9a <__aeabi_fmul+0x242>
 8000b56:	0023      	movs	r3, r4
 8000b58:	9901      	ldr	r1, [sp, #4]
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	319e      	adds	r1, #158	; 0x9e
 8000b5e:	408c      	lsls	r4, r1
 8000b60:	001a      	movs	r2, r3
 8000b62:	0023      	movs	r3, r4
 8000b64:	1e5c      	subs	r4, r3, #1
 8000b66:	41a3      	sbcs	r3, r4
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	075a      	lsls	r2, r3, #29
 8000b6c:	d004      	beq.n	8000b78 <__aeabi_fmul+0x220>
 8000b6e:	220f      	movs	r2, #15
 8000b70:	401a      	ands	r2, r3
 8000b72:	2a04      	cmp	r2, #4
 8000b74:	d000      	beq.n	8000b78 <__aeabi_fmul+0x220>
 8000b76:	3304      	adds	r3, #4
 8000b78:	015a      	lsls	r2, r3, #5
 8000b7a:	d411      	bmi.n	8000ba0 <__aeabi_fmul+0x248>
 8000b7c:	019b      	lsls	r3, r3, #6
 8000b7e:	0a5b      	lsrs	r3, r3, #9
 8000b80:	2200      	movs	r2, #0
 8000b82:	e744      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	464a      	mov	r2, r9
 8000b88:	03db      	lsls	r3, r3, #15
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	0a5b      	lsrs	r3, r3, #9
 8000b90:	0037      	movs	r7, r6
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	e73b      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000b96:	9501      	str	r5, [sp, #4]
 8000b98:	e787      	b.n	8000aaa <__aeabi_fmul+0x152>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e736      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e733      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	03db      	lsls	r3, r3, #15
 8000baa:	4323      	orrs	r3, r4
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	0a5b      	lsrs	r3, r3, #9
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	e72c      	b.n	8000a0e <__aeabi_fmul+0xb6>
 8000bb4:	08005f44 	.word	0x08005f44
 8000bb8:	f7ffffff 	.word	0xf7ffffff

08000bbc <__aeabi_fsub>:
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	4647      	mov	r7, r8
 8000bc0:	46ce      	mov	lr, r9
 8000bc2:	0044      	lsls	r4, r0, #1
 8000bc4:	0fc2      	lsrs	r2, r0, #31
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	0247      	lsls	r7, r0, #9
 8000bca:	0248      	lsls	r0, r1, #9
 8000bcc:	0a40      	lsrs	r0, r0, #9
 8000bce:	4684      	mov	ip, r0
 8000bd0:	4666      	mov	r6, ip
 8000bd2:	0048      	lsls	r0, r1, #1
 8000bd4:	0a7f      	lsrs	r7, r7, #9
 8000bd6:	0e24      	lsrs	r4, r4, #24
 8000bd8:	00f6      	lsls	r6, r6, #3
 8000bda:	0025      	movs	r5, r4
 8000bdc:	4690      	mov	r8, r2
 8000bde:	00fb      	lsls	r3, r7, #3
 8000be0:	0e00      	lsrs	r0, r0, #24
 8000be2:	0fc9      	lsrs	r1, r1, #31
 8000be4:	46b1      	mov	r9, r6
 8000be6:	28ff      	cmp	r0, #255	; 0xff
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x30>
 8000bea:	e085      	b.n	8000cf8 <__aeabi_fsub+0x13c>
 8000bec:	2601      	movs	r6, #1
 8000bee:	4071      	eors	r1, r6
 8000bf0:	1a26      	subs	r6, r4, r0
 8000bf2:	4291      	cmp	r1, r2
 8000bf4:	d057      	beq.n	8000ca6 <__aeabi_fsub+0xea>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	dd43      	ble.n	8000c82 <__aeabi_fsub+0xc6>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fsub+0x44>
 8000bfe:	e07f      	b.n	8000d00 <__aeabi_fsub+0x144>
 8000c00:	4649      	mov	r1, r9
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fsub+0x4c>
 8000c06:	e0aa      	b.n	8000d5e <__aeabi_fsub+0x1a2>
 8000c08:	3e01      	subs	r6, #1
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_fsub+0x54>
 8000c0e:	e0f7      	b.n	8000e00 <__aeabi_fsub+0x244>
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	015a      	lsls	r2, r3, #5
 8000c14:	d400      	bmi.n	8000c18 <__aeabi_fsub+0x5c>
 8000c16:	e08b      	b.n	8000d30 <__aeabi_fsub+0x174>
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	099c      	lsrs	r4, r3, #6
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f001 f87f 	bl	8001d20 <__clzsi2>
 8000c22:	3805      	subs	r0, #5
 8000c24:	4084      	lsls	r4, r0
 8000c26:	4285      	cmp	r5, r0
 8000c28:	dd00      	ble.n	8000c2c <__aeabi_fsub+0x70>
 8000c2a:	e0d3      	b.n	8000dd4 <__aeabi_fsub+0x218>
 8000c2c:	1b45      	subs	r5, r0, r5
 8000c2e:	0023      	movs	r3, r4
 8000c30:	2020      	movs	r0, #32
 8000c32:	3501      	adds	r5, #1
 8000c34:	40eb      	lsrs	r3, r5
 8000c36:	1b45      	subs	r5, r0, r5
 8000c38:	40ac      	lsls	r4, r5
 8000c3a:	1e62      	subs	r2, r4, #1
 8000c3c:	4194      	sbcs	r4, r2
 8000c3e:	4323      	orrs	r3, r4
 8000c40:	2407      	movs	r4, #7
 8000c42:	2500      	movs	r5, #0
 8000c44:	401c      	ands	r4, r3
 8000c46:	2201      	movs	r2, #1
 8000c48:	4641      	mov	r1, r8
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	2c00      	cmp	r4, #0
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fsub+0x9e>
 8000c50:	210f      	movs	r1, #15
 8000c52:	4019      	ands	r1, r3
 8000c54:	2904      	cmp	r1, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fsub+0x9e>
 8000c58:	3304      	adds	r3, #4
 8000c5a:	0159      	lsls	r1, r3, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0xa4>
 8000c5e:	e080      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000c60:	3501      	adds	r5, #1
 8000c62:	b2ec      	uxtb	r4, r5
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0xae>
 8000c68:	e0a3      	b.n	8000db2 <__aeabi_fsub+0x1f6>
 8000c6a:	24ff      	movs	r4, #255	; 0xff
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	025b      	lsls	r3, r3, #9
 8000c70:	05e4      	lsls	r4, r4, #23
 8000c72:	0a58      	lsrs	r0, r3, #9
 8000c74:	07d2      	lsls	r2, r2, #31
 8000c76:	4320      	orrs	r0, r4
 8000c78:	4310      	orrs	r0, r2
 8000c7a:	bc0c      	pop	{r2, r3}
 8000c7c:	4690      	mov	r8, r2
 8000c7e:	4699      	mov	r9, r3
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d174      	bne.n	8000d70 <__aeabi_fsub+0x1b4>
 8000c86:	1c60      	adds	r0, r4, #1
 8000c88:	b2c0      	uxtb	r0, r0
 8000c8a:	2801      	cmp	r0, #1
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xd4>
 8000c8e:	e0a7      	b.n	8000de0 <__aeabi_fsub+0x224>
 8000c90:	464a      	mov	r2, r9
 8000c92:	1a9c      	subs	r4, r3, r2
 8000c94:	0162      	lsls	r2, r4, #5
 8000c96:	d500      	bpl.n	8000c9a <__aeabi_fsub+0xde>
 8000c98:	e0b6      	b.n	8000e08 <__aeabi_fsub+0x24c>
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d1be      	bne.n	8000c1c <__aeabi_fsub+0x60>
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2400      	movs	r4, #0
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e7e3      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_fsub+0xf0>
 8000caa:	e085      	b.n	8000db8 <__aeabi_fsub+0x1fc>
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d046      	beq.n	8000d3e <__aeabi_fsub+0x182>
 8000cb0:	2cff      	cmp	r4, #255	; 0xff
 8000cb2:	d049      	beq.n	8000d48 <__aeabi_fsub+0x18c>
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	4648      	mov	r0, r9
 8000cb8:	04d2      	lsls	r2, r2, #19
 8000cba:	4310      	orrs	r0, r2
 8000cbc:	4681      	mov	r9, r0
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2e1b      	cmp	r6, #27
 8000cc2:	dc09      	bgt.n	8000cd8 <__aeabi_fsub+0x11c>
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	464c      	mov	r4, r9
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	4084      	lsls	r4, r0
 8000ccc:	464a      	mov	r2, r9
 8000cce:	0020      	movs	r0, r4
 8000cd0:	40f2      	lsrs	r2, r6
 8000cd2:	1e44      	subs	r4, r0, #1
 8000cd4:	41a0      	sbcs	r0, r4
 8000cd6:	4302      	orrs	r2, r0
 8000cd8:	189b      	adds	r3, r3, r2
 8000cda:	015a      	lsls	r2, r3, #5
 8000cdc:	d528      	bpl.n	8000d30 <__aeabi_fsub+0x174>
 8000cde:	3501      	adds	r5, #1
 8000ce0:	2dff      	cmp	r5, #255	; 0xff
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_fsub+0x12a>
 8000ce4:	e0a8      	b.n	8000e38 <__aeabi_fsub+0x27c>
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2407      	movs	r4, #7
 8000cea:	4994      	ldr	r1, [pc, #592]	; (8000f3c <__aeabi_fsub+0x380>)
 8000cec:	401a      	ands	r2, r3
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	401c      	ands	r4, r3
 8000cf6:	e7a6      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_fsub+0x142>
 8000cfc:	e778      	b.n	8000bf0 <__aeabi_fsub+0x34>
 8000cfe:	e775      	b.n	8000bec <__aeabi_fsub+0x30>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d054      	beq.n	8000dae <__aeabi_fsub+0x1f2>
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	4649      	mov	r1, r9
 8000d08:	04d2      	lsls	r2, r2, #19
 8000d0a:	4311      	orrs	r1, r2
 8000d0c:	4689      	mov	r9, r1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2e1b      	cmp	r6, #27
 8000d12:	dc09      	bgt.n	8000d28 <__aeabi_fsub+0x16c>
 8000d14:	2120      	movs	r1, #32
 8000d16:	4648      	mov	r0, r9
 8000d18:	1b89      	subs	r1, r1, r6
 8000d1a:	4088      	lsls	r0, r1
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	0001      	movs	r1, r0
 8000d20:	40f2      	lsrs	r2, r6
 8000d22:	1e48      	subs	r0, r1, #1
 8000d24:	4181      	sbcs	r1, r0
 8000d26:	430a      	orrs	r2, r1
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d500      	bpl.n	8000d30 <__aeabi_fsub+0x174>
 8000d2e:	e773      	b.n	8000c18 <__aeabi_fsub+0x5c>
 8000d30:	2201      	movs	r2, #1
 8000d32:	4641      	mov	r1, r8
 8000d34:	400a      	ands	r2, r1
 8000d36:	0759      	lsls	r1, r3, #29
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fsub+0x180>
 8000d3a:	e789      	b.n	8000c50 <__aeabi_fsub+0x94>
 8000d3c:	e011      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d158      	bne.n	8000df6 <__aeabi_fsub+0x23a>
 8000d44:	2cff      	cmp	r4, #255	; 0xff
 8000d46:	d10c      	bne.n	8000d62 <__aeabi_fsub+0x1a6>
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x194>
 8000d4e:	e78c      	b.n	8000c6a <__aeabi_fsub+0xae>
 8000d50:	2080      	movs	r0, #128	; 0x80
 8000d52:	03c0      	lsls	r0, r0, #15
 8000d54:	4303      	orrs	r3, r0
 8000d56:	025b      	lsls	r3, r3, #9
 8000d58:	0a5b      	lsrs	r3, r3, #9
 8000d5a:	24ff      	movs	r4, #255	; 0xff
 8000d5c:	e787      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000d5e:	2cff      	cmp	r4, #255	; 0xff
 8000d60:	d025      	beq.n	8000dae <__aeabi_fsub+0x1f2>
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	2dff      	cmp	r5, #255	; 0xff
 8000d66:	d0f0      	beq.n	8000d4a <__aeabi_fsub+0x18e>
 8000d68:	025b      	lsls	r3, r3, #9
 8000d6a:	0a5b      	lsrs	r3, r3, #9
 8000d6c:	b2ec      	uxtb	r4, r5
 8000d6e:	e77e      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000d70:	2c00      	cmp	r4, #0
 8000d72:	d04d      	beq.n	8000e10 <__aeabi_fsub+0x254>
 8000d74:	28ff      	cmp	r0, #255	; 0xff
 8000d76:	d018      	beq.n	8000daa <__aeabi_fsub+0x1ee>
 8000d78:	2480      	movs	r4, #128	; 0x80
 8000d7a:	04e4      	lsls	r4, r4, #19
 8000d7c:	4272      	negs	r2, r6
 8000d7e:	4323      	orrs	r3, r4
 8000d80:	2a1b      	cmp	r2, #27
 8000d82:	dd00      	ble.n	8000d86 <__aeabi_fsub+0x1ca>
 8000d84:	e0c4      	b.n	8000f10 <__aeabi_fsub+0x354>
 8000d86:	001c      	movs	r4, r3
 8000d88:	2520      	movs	r5, #32
 8000d8a:	40d4      	lsrs	r4, r2
 8000d8c:	1aaa      	subs	r2, r5, r2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	4193      	sbcs	r3, r2
 8000d94:	4323      	orrs	r3, r4
 8000d96:	464a      	mov	r2, r9
 8000d98:	0005      	movs	r5, r0
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	4688      	mov	r8, r1
 8000d9e:	e738      	b.n	8000c12 <__aeabi_fsub+0x56>
 8000da0:	1c72      	adds	r2, r6, #1
 8000da2:	d0f8      	beq.n	8000d96 <__aeabi_fsub+0x1da>
 8000da4:	43f2      	mvns	r2, r6
 8000da6:	28ff      	cmp	r0, #255	; 0xff
 8000da8:	d1ea      	bne.n	8000d80 <__aeabi_fsub+0x1c4>
 8000daa:	000a      	movs	r2, r1
 8000dac:	464b      	mov	r3, r9
 8000dae:	25ff      	movs	r5, #255	; 0xff
 8000db0:	e7d7      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000db2:	019b      	lsls	r3, r3, #6
 8000db4:	0a5b      	lsrs	r3, r3, #9
 8000db6:	e75a      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d141      	bne.n	8000e40 <__aeabi_fsub+0x284>
 8000dbc:	1c65      	adds	r5, r4, #1
 8000dbe:	b2e9      	uxtb	r1, r5
 8000dc0:	2901      	cmp	r1, #1
 8000dc2:	dd45      	ble.n	8000e50 <__aeabi_fsub+0x294>
 8000dc4:	2dff      	cmp	r5, #255	; 0xff
 8000dc6:	d100      	bne.n	8000dca <__aeabi_fsub+0x20e>
 8000dc8:	e74f      	b.n	8000c6a <__aeabi_fsub+0xae>
 8000dca:	2407      	movs	r4, #7
 8000dcc:	444b      	add	r3, r9
 8000dce:	085b      	lsrs	r3, r3, #1
 8000dd0:	401c      	ands	r4, r3
 8000dd2:	e738      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	4b5a      	ldr	r3, [pc, #360]	; (8000f40 <__aeabi_fsub+0x384>)
 8000dd8:	1a2d      	subs	r5, r5, r0
 8000dda:	4023      	ands	r3, r4
 8000ddc:	4014      	ands	r4, r2
 8000dde:	e732      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d11d      	bne.n	8000e20 <__aeabi_fsub+0x264>
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d17a      	bne.n	8000ede <__aeabi_fsub+0x322>
 8000de8:	464b      	mov	r3, r9
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_fsub+0x234>
 8000dee:	e091      	b.n	8000f14 <__aeabi_fsub+0x358>
 8000df0:	000a      	movs	r2, r1
 8000df2:	2500      	movs	r5, #0
 8000df4:	e7b5      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000df6:	3e01      	subs	r6, #1
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d119      	bne.n	8000e30 <__aeabi_fsub+0x274>
 8000dfc:	444b      	add	r3, r9
 8000dfe:	e76c      	b.n	8000cda <__aeabi_fsub+0x11e>
 8000e00:	2cff      	cmp	r4, #255	; 0xff
 8000e02:	d184      	bne.n	8000d0e <__aeabi_fsub+0x152>
 8000e04:	25ff      	movs	r5, #255	; 0xff
 8000e06:	e7ac      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000e08:	464a      	mov	r2, r9
 8000e0a:	4688      	mov	r8, r1
 8000e0c:	1ad4      	subs	r4, r2, r3
 8000e0e:	e705      	b.n	8000c1c <__aeabi_fsub+0x60>
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1c5      	bne.n	8000da0 <__aeabi_fsub+0x1e4>
 8000e14:	000a      	movs	r2, r1
 8000e16:	28ff      	cmp	r0, #255	; 0xff
 8000e18:	d0c8      	beq.n	8000dac <__aeabi_fsub+0x1f0>
 8000e1a:	0005      	movs	r5, r0
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	e7a0      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d149      	bne.n	8000eb8 <__aeabi_fsub+0x2fc>
 8000e24:	464b      	mov	r3, r9
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d077      	beq.n	8000f1a <__aeabi_fsub+0x35e>
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	25ff      	movs	r5, #255	; 0xff
 8000e2e:	e798      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000e30:	2cff      	cmp	r4, #255	; 0xff
 8000e32:	d000      	beq.n	8000e36 <__aeabi_fsub+0x27a>
 8000e34:	e743      	b.n	8000cbe <__aeabi_fsub+0x102>
 8000e36:	e787      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000e38:	000a      	movs	r2, r1
 8000e3a:	24ff      	movs	r4, #255	; 0xff
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e716      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000e40:	2c00      	cmp	r4, #0
 8000e42:	d115      	bne.n	8000e70 <__aeabi_fsub+0x2b4>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d157      	bne.n	8000ef8 <__aeabi_fsub+0x33c>
 8000e48:	28ff      	cmp	r0, #255	; 0xff
 8000e4a:	d1e6      	bne.n	8000e1a <__aeabi_fsub+0x25e>
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	e77b      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d120      	bne.n	8000e96 <__aeabi_fsub+0x2da>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d057      	beq.n	8000f08 <__aeabi_fsub+0x34c>
 8000e58:	4649      	mov	r1, r9
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d053      	beq.n	8000f06 <__aeabi_fsub+0x34a>
 8000e5e:	444b      	add	r3, r9
 8000e60:	015a      	lsls	r2, r3, #5
 8000e62:	d568      	bpl.n	8000f36 <__aeabi_fsub+0x37a>
 8000e64:	2407      	movs	r4, #7
 8000e66:	4a36      	ldr	r2, [pc, #216]	; (8000f40 <__aeabi_fsub+0x384>)
 8000e68:	401c      	ands	r4, r3
 8000e6a:	2501      	movs	r5, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	e6ea      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000e70:	28ff      	cmp	r0, #255	; 0xff
 8000e72:	d0eb      	beq.n	8000e4c <__aeabi_fsub+0x290>
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	04d2      	lsls	r2, r2, #19
 8000e78:	4276      	negs	r6, r6
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	2e1b      	cmp	r6, #27
 8000e7e:	dc53      	bgt.n	8000f28 <__aeabi_fsub+0x36c>
 8000e80:	2520      	movs	r5, #32
 8000e82:	1bad      	subs	r5, r5, r6
 8000e84:	001a      	movs	r2, r3
 8000e86:	40ab      	lsls	r3, r5
 8000e88:	40f2      	lsrs	r2, r6
 8000e8a:	1e5c      	subs	r4, r3, #1
 8000e8c:	41a3      	sbcs	r3, r4
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	444b      	add	r3, r9
 8000e92:	0005      	movs	r5, r0
 8000e94:	e721      	b.n	8000cda <__aeabi_fsub+0x11e>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0d8      	beq.n	8000e4c <__aeabi_fsub+0x290>
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	2900      	cmp	r1, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x2e6>
 8000ea0:	e752      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	03c9      	lsls	r1, r1, #15
 8000ea6:	420f      	tst	r7, r1
 8000ea8:	d100      	bne.n	8000eac <__aeabi_fsub+0x2f0>
 8000eaa:	e74d      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000eac:	4660      	mov	r0, ip
 8000eae:	4208      	tst	r0, r1
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_fsub+0x2f8>
 8000eb2:	e749      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	e747      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000eb8:	4648      	mov	r0, r9
 8000eba:	25ff      	movs	r5, #255	; 0xff
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x306>
 8000ec0:	e74f      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	03d2      	lsls	r2, r2, #15
 8000ec6:	4217      	tst	r7, r2
 8000ec8:	d004      	beq.n	8000ed4 <__aeabi_fsub+0x318>
 8000eca:	4660      	mov	r0, ip
 8000ecc:	4210      	tst	r0, r2
 8000ece:	d101      	bne.n	8000ed4 <__aeabi_fsub+0x318>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	4688      	mov	r8, r1
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4641      	mov	r1, r8
 8000ed8:	25ff      	movs	r5, #255	; 0xff
 8000eda:	400a      	ands	r2, r1
 8000edc:	e741      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000ede:	4648      	mov	r0, r9
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d01f      	beq.n	8000f24 <__aeabi_fsub+0x368>
 8000ee4:	1a1a      	subs	r2, r3, r0
 8000ee6:	0150      	lsls	r0, r2, #5
 8000ee8:	d520      	bpl.n	8000f2c <__aeabi_fsub+0x370>
 8000eea:	464a      	mov	r2, r9
 8000eec:	2407      	movs	r4, #7
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	401c      	ands	r4, r3
 8000ef2:	4688      	mov	r8, r1
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	e6a6      	b.n	8000c46 <__aeabi_fsub+0x8a>
 8000ef8:	1c74      	adds	r4, r6, #1
 8000efa:	d0c9      	beq.n	8000e90 <__aeabi_fsub+0x2d4>
 8000efc:	43f6      	mvns	r6, r6
 8000efe:	28ff      	cmp	r0, #255	; 0xff
 8000f00:	d1bc      	bne.n	8000e7c <__aeabi_fsub+0x2c0>
 8000f02:	464b      	mov	r3, r9
 8000f04:	e720      	b.n	8000d48 <__aeabi_fsub+0x18c>
 8000f06:	4699      	mov	r9, r3
 8000f08:	464b      	mov	r3, r9
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	e72b      	b.n	8000d68 <__aeabi_fsub+0x1ac>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e740      	b.n	8000d96 <__aeabi_fsub+0x1da>
 8000f14:	2200      	movs	r2, #0
 8000f16:	2300      	movs	r3, #0
 8000f18:	e6a9      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	03db      	lsls	r3, r3, #15
 8000f20:	24ff      	movs	r4, #255	; 0xff
 8000f22:	e6a4      	b.n	8000c6e <__aeabi_fsub+0xb2>
 8000f24:	2500      	movs	r5, #0
 8000f26:	e71c      	b.n	8000d62 <__aeabi_fsub+0x1a6>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e7b1      	b.n	8000e90 <__aeabi_fsub+0x2d4>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d0f1      	beq.n	8000f14 <__aeabi_fsub+0x358>
 8000f30:	0013      	movs	r3, r2
 8000f32:	2500      	movs	r5, #0
 8000f34:	e6fc      	b.n	8000d30 <__aeabi_fsub+0x174>
 8000f36:	2500      	movs	r5, #0
 8000f38:	e6fa      	b.n	8000d30 <__aeabi_fsub+0x174>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	7dffffff 	.word	0x7dffffff
 8000f40:	fbffffff 	.word	0xfbffffff

08000f44 <__aeabi_f2iz>:
 8000f44:	0241      	lsls	r1, r0, #9
 8000f46:	0042      	lsls	r2, r0, #1
 8000f48:	0fc3      	lsrs	r3, r0, #31
 8000f4a:	0a49      	lsrs	r1, r1, #9
 8000f4c:	0e12      	lsrs	r2, r2, #24
 8000f4e:	2000      	movs	r0, #0
 8000f50:	2a7e      	cmp	r2, #126	; 0x7e
 8000f52:	d90d      	bls.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f54:	2a9d      	cmp	r2, #157	; 0x9d
 8000f56:	d80c      	bhi.n	8000f72 <__aeabi_f2iz+0x2e>
 8000f58:	2080      	movs	r0, #128	; 0x80
 8000f5a:	0400      	lsls	r0, r0, #16
 8000f5c:	4301      	orrs	r1, r0
 8000f5e:	2a95      	cmp	r2, #149	; 0x95
 8000f60:	dc0a      	bgt.n	8000f78 <__aeabi_f2iz+0x34>
 8000f62:	2096      	movs	r0, #150	; 0x96
 8000f64:	1a82      	subs	r2, r0, r2
 8000f66:	40d1      	lsrs	r1, r2
 8000f68:	4248      	negs	r0, r1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f6e:	0008      	movs	r0, r1
 8000f70:	4770      	bx	lr
 8000f72:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <__aeabi_f2iz+0x3c>)
 8000f74:	1898      	adds	r0, r3, r2
 8000f76:	e7fb      	b.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f78:	3a96      	subs	r2, #150	; 0x96
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	e7f4      	b.n	8000f68 <__aeabi_f2iz+0x24>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	7fffffff 	.word	0x7fffffff

08000f84 <__aeabi_i2f>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d03d      	beq.n	8001006 <__aeabi_i2f+0x82>
 8000f8a:	17c3      	asrs	r3, r0, #31
 8000f8c:	18c5      	adds	r5, r0, r3
 8000f8e:	405d      	eors	r5, r3
 8000f90:	0fc4      	lsrs	r4, r0, #31
 8000f92:	0028      	movs	r0, r5
 8000f94:	f000 fec4 	bl	8001d20 <__clzsi2>
 8000f98:	229e      	movs	r2, #158	; 0x9e
 8000f9a:	1a12      	subs	r2, r2, r0
 8000f9c:	2a96      	cmp	r2, #150	; 0x96
 8000f9e:	dc07      	bgt.n	8000fb0 <__aeabi_i2f+0x2c>
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	2808      	cmp	r0, #8
 8000fa4:	dd33      	ble.n	800100e <__aeabi_i2f+0x8a>
 8000fa6:	3808      	subs	r0, #8
 8000fa8:	4085      	lsls	r5, r0
 8000faa:	0268      	lsls	r0, r5, #9
 8000fac:	0a40      	lsrs	r0, r0, #9
 8000fae:	e023      	b.n	8000ff8 <__aeabi_i2f+0x74>
 8000fb0:	2a99      	cmp	r2, #153	; 0x99
 8000fb2:	dd0b      	ble.n	8000fcc <__aeabi_i2f+0x48>
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	0029      	movs	r1, r5
 8000fb8:	1a1b      	subs	r3, r3, r0
 8000fba:	40d9      	lsrs	r1, r3
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	331b      	adds	r3, #27
 8000fc0:	409d      	lsls	r5, r3
 8000fc2:	002b      	movs	r3, r5
 8000fc4:	1e5d      	subs	r5, r3, #1
 8000fc6:	41ab      	sbcs	r3, r5
 8000fc8:	4319      	orrs	r1, r3
 8000fca:	000d      	movs	r5, r1
 8000fcc:	2805      	cmp	r0, #5
 8000fce:	dd01      	ble.n	8000fd4 <__aeabi_i2f+0x50>
 8000fd0:	1f43      	subs	r3, r0, #5
 8000fd2:	409d      	lsls	r5, r3
 8000fd4:	002b      	movs	r3, r5
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <__aeabi_i2f+0x90>)
 8000fd8:	400b      	ands	r3, r1
 8000fda:	076e      	lsls	r6, r5, #29
 8000fdc:	d009      	beq.n	8000ff2 <__aeabi_i2f+0x6e>
 8000fde:	260f      	movs	r6, #15
 8000fe0:	4035      	ands	r5, r6
 8000fe2:	2d04      	cmp	r5, #4
 8000fe4:	d005      	beq.n	8000ff2 <__aeabi_i2f+0x6e>
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	015d      	lsls	r5, r3, #5
 8000fea:	d502      	bpl.n	8000ff2 <__aeabi_i2f+0x6e>
 8000fec:	229f      	movs	r2, #159	; 0x9f
 8000fee:	400b      	ands	r3, r1
 8000ff0:	1a12      	subs	r2, r2, r0
 8000ff2:	019b      	lsls	r3, r3, #6
 8000ff4:	0a58      	lsrs	r0, r3, #9
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	0240      	lsls	r0, r0, #9
 8000ffa:	05d2      	lsls	r2, r2, #23
 8000ffc:	0a40      	lsrs	r0, r0, #9
 8000ffe:	07e4      	lsls	r4, r4, #31
 8001000:	4310      	orrs	r0, r2
 8001002:	4320      	orrs	r0, r4
 8001004:	bd70      	pop	{r4, r5, r6, pc}
 8001006:	2400      	movs	r4, #0
 8001008:	2200      	movs	r2, #0
 800100a:	2000      	movs	r0, #0
 800100c:	e7f4      	b.n	8000ff8 <__aeabi_i2f+0x74>
 800100e:	0268      	lsls	r0, r5, #9
 8001010:	0a40      	lsrs	r0, r0, #9
 8001012:	e7f1      	b.n	8000ff8 <__aeabi_i2f+0x74>
 8001014:	fbffffff 	.word	0xfbffffff

08001018 <__aeabi_ddiv>:
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	4657      	mov	r7, sl
 800101c:	46de      	mov	lr, fp
 800101e:	464e      	mov	r6, r9
 8001020:	4645      	mov	r5, r8
 8001022:	b5e0      	push	{r5, r6, r7, lr}
 8001024:	4683      	mov	fp, r0
 8001026:	0007      	movs	r7, r0
 8001028:	030e      	lsls	r6, r1, #12
 800102a:	0048      	lsls	r0, r1, #1
 800102c:	b085      	sub	sp, #20
 800102e:	4692      	mov	sl, r2
 8001030:	001c      	movs	r4, r3
 8001032:	0b36      	lsrs	r6, r6, #12
 8001034:	0d40      	lsrs	r0, r0, #21
 8001036:	0fcd      	lsrs	r5, r1, #31
 8001038:	2800      	cmp	r0, #0
 800103a:	d100      	bne.n	800103e <__aeabi_ddiv+0x26>
 800103c:	e09d      	b.n	800117a <__aeabi_ddiv+0x162>
 800103e:	4b95      	ldr	r3, [pc, #596]	; (8001294 <__aeabi_ddiv+0x27c>)
 8001040:	4298      	cmp	r0, r3
 8001042:	d039      	beq.n	80010b8 <__aeabi_ddiv+0xa0>
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	00f6      	lsls	r6, r6, #3
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	431e      	orrs	r6, r3
 800104c:	4a92      	ldr	r2, [pc, #584]	; (8001298 <__aeabi_ddiv+0x280>)
 800104e:	0f7b      	lsrs	r3, r7, #29
 8001050:	4333      	orrs	r3, r6
 8001052:	4699      	mov	r9, r3
 8001054:	4694      	mov	ip, r2
 8001056:	0003      	movs	r3, r0
 8001058:	4463      	add	r3, ip
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	2600      	movs	r6, #0
 8001060:	00ff      	lsls	r7, r7, #3
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	0323      	lsls	r3, r4, #12
 8001066:	0b1b      	lsrs	r3, r3, #12
 8001068:	4698      	mov	r8, r3
 800106a:	0063      	lsls	r3, r4, #1
 800106c:	0fe4      	lsrs	r4, r4, #31
 800106e:	4652      	mov	r2, sl
 8001070:	0d5b      	lsrs	r3, r3, #21
 8001072:	9401      	str	r4, [sp, #4]
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x60>
 8001076:	e0b3      	b.n	80011e0 <__aeabi_ddiv+0x1c8>
 8001078:	4986      	ldr	r1, [pc, #536]	; (8001294 <__aeabi_ddiv+0x27c>)
 800107a:	428b      	cmp	r3, r1
 800107c:	d100      	bne.n	8001080 <__aeabi_ddiv+0x68>
 800107e:	e09e      	b.n	80011be <__aeabi_ddiv+0x1a6>
 8001080:	4642      	mov	r2, r8
 8001082:	00d1      	lsls	r1, r2, #3
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	0412      	lsls	r2, r2, #16
 8001088:	430a      	orrs	r2, r1
 800108a:	4651      	mov	r1, sl
 800108c:	0f49      	lsrs	r1, r1, #29
 800108e:	4311      	orrs	r1, r2
 8001090:	468b      	mov	fp, r1
 8001092:	4981      	ldr	r1, [pc, #516]	; (8001298 <__aeabi_ddiv+0x280>)
 8001094:	4652      	mov	r2, sl
 8001096:	468c      	mov	ip, r1
 8001098:	9900      	ldr	r1, [sp, #0]
 800109a:	4463      	add	r3, ip
 800109c:	1acb      	subs	r3, r1, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	002b      	movs	r3, r5
 80010a6:	4063      	eors	r3, r4
 80010a8:	469a      	mov	sl, r3
 80010aa:	2e0f      	cmp	r6, #15
 80010ac:	d900      	bls.n	80010b0 <__aeabi_ddiv+0x98>
 80010ae:	e105      	b.n	80012bc <__aeabi_ddiv+0x2a4>
 80010b0:	4b7a      	ldr	r3, [pc, #488]	; (800129c <__aeabi_ddiv+0x284>)
 80010b2:	00b6      	lsls	r6, r6, #2
 80010b4:	599b      	ldr	r3, [r3, r6]
 80010b6:	469f      	mov	pc, r3
 80010b8:	465b      	mov	r3, fp
 80010ba:	4333      	orrs	r3, r6
 80010bc:	4699      	mov	r9, r3
 80010be:	d000      	beq.n	80010c2 <__aeabi_ddiv+0xaa>
 80010c0:	e0b8      	b.n	8001234 <__aeabi_ddiv+0x21c>
 80010c2:	2302      	movs	r3, #2
 80010c4:	2608      	movs	r6, #8
 80010c6:	2700      	movs	r7, #0
 80010c8:	9000      	str	r0, [sp, #0]
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	e7ca      	b.n	8001064 <__aeabi_ddiv+0x4c>
 80010ce:	46cb      	mov	fp, r9
 80010d0:	003a      	movs	r2, r7
 80010d2:	9902      	ldr	r1, [sp, #8]
 80010d4:	9501      	str	r5, [sp, #4]
 80010d6:	9b01      	ldr	r3, [sp, #4]
 80010d8:	469a      	mov	sl, r3
 80010da:	2902      	cmp	r1, #2
 80010dc:	d027      	beq.n	800112e <__aeabi_ddiv+0x116>
 80010de:	2903      	cmp	r1, #3
 80010e0:	d100      	bne.n	80010e4 <__aeabi_ddiv+0xcc>
 80010e2:	e280      	b.n	80015e6 <__aeabi_ddiv+0x5ce>
 80010e4:	2901      	cmp	r1, #1
 80010e6:	d044      	beq.n	8001172 <__aeabi_ddiv+0x15a>
 80010e8:	496d      	ldr	r1, [pc, #436]	; (80012a0 <__aeabi_ddiv+0x288>)
 80010ea:	9b00      	ldr	r3, [sp, #0]
 80010ec:	468c      	mov	ip, r1
 80010ee:	4463      	add	r3, ip
 80010f0:	001c      	movs	r4, r3
 80010f2:	2c00      	cmp	r4, #0
 80010f4:	dd38      	ble.n	8001168 <__aeabi_ddiv+0x150>
 80010f6:	0753      	lsls	r3, r2, #29
 80010f8:	d000      	beq.n	80010fc <__aeabi_ddiv+0xe4>
 80010fa:	e213      	b.n	8001524 <__aeabi_ddiv+0x50c>
 80010fc:	08d2      	lsrs	r2, r2, #3
 80010fe:	465b      	mov	r3, fp
 8001100:	01db      	lsls	r3, r3, #7
 8001102:	d509      	bpl.n	8001118 <__aeabi_ddiv+0x100>
 8001104:	4659      	mov	r1, fp
 8001106:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <__aeabi_ddiv+0x28c>)
 8001108:	4019      	ands	r1, r3
 800110a:	468b      	mov	fp, r1
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	00c9      	lsls	r1, r1, #3
 8001110:	468c      	mov	ip, r1
 8001112:	9b00      	ldr	r3, [sp, #0]
 8001114:	4463      	add	r3, ip
 8001116:	001c      	movs	r4, r3
 8001118:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <__aeabi_ddiv+0x290>)
 800111a:	429c      	cmp	r4, r3
 800111c:	dc07      	bgt.n	800112e <__aeabi_ddiv+0x116>
 800111e:	465b      	mov	r3, fp
 8001120:	0564      	lsls	r4, r4, #21
 8001122:	075f      	lsls	r7, r3, #29
 8001124:	025b      	lsls	r3, r3, #9
 8001126:	4317      	orrs	r7, r2
 8001128:	0b1b      	lsrs	r3, r3, #12
 800112a:	0d62      	lsrs	r2, r4, #21
 800112c:	e002      	b.n	8001134 <__aeabi_ddiv+0x11c>
 800112e:	2300      	movs	r3, #0
 8001130:	2700      	movs	r7, #0
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <__aeabi_ddiv+0x27c>)
 8001134:	2100      	movs	r1, #0
 8001136:	031b      	lsls	r3, r3, #12
 8001138:	0b1c      	lsrs	r4, r3, #12
 800113a:	0d0b      	lsrs	r3, r1, #20
 800113c:	051b      	lsls	r3, r3, #20
 800113e:	4323      	orrs	r3, r4
 8001140:	0514      	lsls	r4, r2, #20
 8001142:	4a5a      	ldr	r2, [pc, #360]	; (80012ac <__aeabi_ddiv+0x294>)
 8001144:	0038      	movs	r0, r7
 8001146:	4013      	ands	r3, r2
 8001148:	431c      	orrs	r4, r3
 800114a:	4653      	mov	r3, sl
 800114c:	0064      	lsls	r4, r4, #1
 800114e:	07db      	lsls	r3, r3, #31
 8001150:	0864      	lsrs	r4, r4, #1
 8001152:	431c      	orrs	r4, r3
 8001154:	0021      	movs	r1, r4
 8001156:	b005      	add	sp, #20
 8001158:	bc3c      	pop	{r2, r3, r4, r5}
 800115a:	4690      	mov	r8, r2
 800115c:	4699      	mov	r9, r3
 800115e:	46a2      	mov	sl, r4
 8001160:	46ab      	mov	fp, r5
 8001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001164:	2201      	movs	r2, #1
 8001166:	4252      	negs	r2, r2
 8001168:	2301      	movs	r3, #1
 800116a:	1b1b      	subs	r3, r3, r4
 800116c:	2b38      	cmp	r3, #56	; 0x38
 800116e:	dc00      	bgt.n	8001172 <__aeabi_ddiv+0x15a>
 8001170:	e1ad      	b.n	80014ce <__aeabi_ddiv+0x4b6>
 8001172:	2200      	movs	r2, #0
 8001174:	2300      	movs	r3, #0
 8001176:	2700      	movs	r7, #0
 8001178:	e7dc      	b.n	8001134 <__aeabi_ddiv+0x11c>
 800117a:	465b      	mov	r3, fp
 800117c:	4333      	orrs	r3, r6
 800117e:	4699      	mov	r9, r3
 8001180:	d05e      	beq.n	8001240 <__aeabi_ddiv+0x228>
 8001182:	2e00      	cmp	r6, #0
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x170>
 8001186:	e18a      	b.n	800149e <__aeabi_ddiv+0x486>
 8001188:	0030      	movs	r0, r6
 800118a:	f000 fdc9 	bl	8001d20 <__clzsi2>
 800118e:	0003      	movs	r3, r0
 8001190:	3b0b      	subs	r3, #11
 8001192:	2b1c      	cmp	r3, #28
 8001194:	dd00      	ble.n	8001198 <__aeabi_ddiv+0x180>
 8001196:	e17b      	b.n	8001490 <__aeabi_ddiv+0x478>
 8001198:	221d      	movs	r2, #29
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	465a      	mov	r2, fp
 800119e:	0001      	movs	r1, r0
 80011a0:	40da      	lsrs	r2, r3
 80011a2:	3908      	subs	r1, #8
 80011a4:	408e      	lsls	r6, r1
 80011a6:	0013      	movs	r3, r2
 80011a8:	465f      	mov	r7, fp
 80011aa:	4333      	orrs	r3, r6
 80011ac:	4699      	mov	r9, r3
 80011ae:	408f      	lsls	r7, r1
 80011b0:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <__aeabi_ddiv+0x298>)
 80011b2:	2600      	movs	r6, #0
 80011b4:	1a1b      	subs	r3, r3, r0
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2300      	movs	r3, #0
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	e752      	b.n	8001064 <__aeabi_ddiv+0x4c>
 80011be:	4641      	mov	r1, r8
 80011c0:	4653      	mov	r3, sl
 80011c2:	430b      	orrs	r3, r1
 80011c4:	493b      	ldr	r1, [pc, #236]	; (80012b4 <__aeabi_ddiv+0x29c>)
 80011c6:	469b      	mov	fp, r3
 80011c8:	468c      	mov	ip, r1
 80011ca:	9b00      	ldr	r3, [sp, #0]
 80011cc:	4463      	add	r3, ip
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	465b      	mov	r3, fp
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d13b      	bne.n	800124e <__aeabi_ddiv+0x236>
 80011d6:	2302      	movs	r3, #2
 80011d8:	2200      	movs	r2, #0
 80011da:	431e      	orrs	r6, r3
 80011dc:	2102      	movs	r1, #2
 80011de:	e761      	b.n	80010a4 <__aeabi_ddiv+0x8c>
 80011e0:	4643      	mov	r3, r8
 80011e2:	4313      	orrs	r3, r2
 80011e4:	469b      	mov	fp, r3
 80011e6:	d037      	beq.n	8001258 <__aeabi_ddiv+0x240>
 80011e8:	4643      	mov	r3, r8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x1d8>
 80011ee:	e162      	b.n	80014b6 <__aeabi_ddiv+0x49e>
 80011f0:	4640      	mov	r0, r8
 80011f2:	f000 fd95 	bl	8001d20 <__clzsi2>
 80011f6:	0003      	movs	r3, r0
 80011f8:	3b0b      	subs	r3, #11
 80011fa:	2b1c      	cmp	r3, #28
 80011fc:	dd00      	ble.n	8001200 <__aeabi_ddiv+0x1e8>
 80011fe:	e153      	b.n	80014a8 <__aeabi_ddiv+0x490>
 8001200:	0002      	movs	r2, r0
 8001202:	4641      	mov	r1, r8
 8001204:	3a08      	subs	r2, #8
 8001206:	4091      	lsls	r1, r2
 8001208:	4688      	mov	r8, r1
 800120a:	211d      	movs	r1, #29
 800120c:	1acb      	subs	r3, r1, r3
 800120e:	4651      	mov	r1, sl
 8001210:	40d9      	lsrs	r1, r3
 8001212:	000b      	movs	r3, r1
 8001214:	4641      	mov	r1, r8
 8001216:	430b      	orrs	r3, r1
 8001218:	469b      	mov	fp, r3
 800121a:	4653      	mov	r3, sl
 800121c:	4093      	lsls	r3, r2
 800121e:	001a      	movs	r2, r3
 8001220:	9b00      	ldr	r3, [sp, #0]
 8001222:	4925      	ldr	r1, [pc, #148]	; (80012b8 <__aeabi_ddiv+0x2a0>)
 8001224:	469c      	mov	ip, r3
 8001226:	4460      	add	r0, ip
 8001228:	0003      	movs	r3, r0
 800122a:	468c      	mov	ip, r1
 800122c:	4463      	add	r3, ip
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2100      	movs	r1, #0
 8001232:	e737      	b.n	80010a4 <__aeabi_ddiv+0x8c>
 8001234:	2303      	movs	r3, #3
 8001236:	46b1      	mov	r9, r6
 8001238:	9000      	str	r0, [sp, #0]
 800123a:	260c      	movs	r6, #12
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	e711      	b.n	8001064 <__aeabi_ddiv+0x4c>
 8001240:	2300      	movs	r3, #0
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	2604      	movs	r6, #4
 8001248:	2700      	movs	r7, #0
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	e70a      	b.n	8001064 <__aeabi_ddiv+0x4c>
 800124e:	2303      	movs	r3, #3
 8001250:	46c3      	mov	fp, r8
 8001252:	431e      	orrs	r6, r3
 8001254:	2103      	movs	r1, #3
 8001256:	e725      	b.n	80010a4 <__aeabi_ddiv+0x8c>
 8001258:	3301      	adds	r3, #1
 800125a:	431e      	orrs	r6, r3
 800125c:	2200      	movs	r2, #0
 800125e:	2101      	movs	r1, #1
 8001260:	e720      	b.n	80010a4 <__aeabi_ddiv+0x8c>
 8001262:	2300      	movs	r3, #0
 8001264:	469a      	mov	sl, r3
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	2700      	movs	r7, #0
 800126a:	031b      	lsls	r3, r3, #12
 800126c:	4a09      	ldr	r2, [pc, #36]	; (8001294 <__aeabi_ddiv+0x27c>)
 800126e:	e761      	b.n	8001134 <__aeabi_ddiv+0x11c>
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	4649      	mov	r1, r9
 8001274:	031b      	lsls	r3, r3, #12
 8001276:	4219      	tst	r1, r3
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x264>
 800127a:	e0e2      	b.n	8001442 <__aeabi_ddiv+0x42a>
 800127c:	4659      	mov	r1, fp
 800127e:	4219      	tst	r1, r3
 8001280:	d000      	beq.n	8001284 <__aeabi_ddiv+0x26c>
 8001282:	e0de      	b.n	8001442 <__aeabi_ddiv+0x42a>
 8001284:	430b      	orrs	r3, r1
 8001286:	031b      	lsls	r3, r3, #12
 8001288:	0017      	movs	r7, r2
 800128a:	0b1b      	lsrs	r3, r3, #12
 800128c:	46a2      	mov	sl, r4
 800128e:	4a01      	ldr	r2, [pc, #4]	; (8001294 <__aeabi_ddiv+0x27c>)
 8001290:	e750      	b.n	8001134 <__aeabi_ddiv+0x11c>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	000007ff 	.word	0x000007ff
 8001298:	fffffc01 	.word	0xfffffc01
 800129c:	08005f84 	.word	0x08005f84
 80012a0:	000003ff 	.word	0x000003ff
 80012a4:	feffffff 	.word	0xfeffffff
 80012a8:	000007fe 	.word	0x000007fe
 80012ac:	800fffff 	.word	0x800fffff
 80012b0:	fffffc0d 	.word	0xfffffc0d
 80012b4:	fffff801 	.word	0xfffff801
 80012b8:	000003f3 	.word	0x000003f3
 80012bc:	45d9      	cmp	r9, fp
 80012be:	d900      	bls.n	80012c2 <__aeabi_ddiv+0x2aa>
 80012c0:	e0cb      	b.n	800145a <__aeabi_ddiv+0x442>
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x2ae>
 80012c4:	e0c6      	b.n	8001454 <__aeabi_ddiv+0x43c>
 80012c6:	003c      	movs	r4, r7
 80012c8:	4648      	mov	r0, r9
 80012ca:	2700      	movs	r7, #0
 80012cc:	9b00      	ldr	r3, [sp, #0]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	465b      	mov	r3, fp
 80012d4:	0e16      	lsrs	r6, r2, #24
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	431e      	orrs	r6, r3
 80012da:	0213      	lsls	r3, r2, #8
 80012dc:	4698      	mov	r8, r3
 80012de:	0433      	lsls	r3, r6, #16
 80012e0:	0c1b      	lsrs	r3, r3, #16
 80012e2:	4699      	mov	r9, r3
 80012e4:	0c31      	lsrs	r1, r6, #16
 80012e6:	9101      	str	r1, [sp, #4]
 80012e8:	f7fe ff94 	bl	8000214 <__aeabi_uidivmod>
 80012ec:	464a      	mov	r2, r9
 80012ee:	4342      	muls	r2, r0
 80012f0:	040b      	lsls	r3, r1, #16
 80012f2:	0c21      	lsrs	r1, r4, #16
 80012f4:	0005      	movs	r5, r0
 80012f6:	4319      	orrs	r1, r3
 80012f8:	428a      	cmp	r2, r1
 80012fa:	d907      	bls.n	800130c <__aeabi_ddiv+0x2f4>
 80012fc:	1989      	adds	r1, r1, r6
 80012fe:	3d01      	subs	r5, #1
 8001300:	428e      	cmp	r6, r1
 8001302:	d803      	bhi.n	800130c <__aeabi_ddiv+0x2f4>
 8001304:	428a      	cmp	r2, r1
 8001306:	d901      	bls.n	800130c <__aeabi_ddiv+0x2f4>
 8001308:	1e85      	subs	r5, r0, #2
 800130a:	1989      	adds	r1, r1, r6
 800130c:	1a88      	subs	r0, r1, r2
 800130e:	9901      	ldr	r1, [sp, #4]
 8001310:	f7fe ff80 	bl	8000214 <__aeabi_uidivmod>
 8001314:	0409      	lsls	r1, r1, #16
 8001316:	468c      	mov	ip, r1
 8001318:	464a      	mov	r2, r9
 800131a:	0421      	lsls	r1, r4, #16
 800131c:	4664      	mov	r4, ip
 800131e:	4342      	muls	r2, r0
 8001320:	0c09      	lsrs	r1, r1, #16
 8001322:	0003      	movs	r3, r0
 8001324:	4321      	orrs	r1, r4
 8001326:	428a      	cmp	r2, r1
 8001328:	d904      	bls.n	8001334 <__aeabi_ddiv+0x31c>
 800132a:	1989      	adds	r1, r1, r6
 800132c:	3b01      	subs	r3, #1
 800132e:	428e      	cmp	r6, r1
 8001330:	d800      	bhi.n	8001334 <__aeabi_ddiv+0x31c>
 8001332:	e0f1      	b.n	8001518 <__aeabi_ddiv+0x500>
 8001334:	042d      	lsls	r5, r5, #16
 8001336:	431d      	orrs	r5, r3
 8001338:	46ab      	mov	fp, r5
 800133a:	4643      	mov	r3, r8
 800133c:	1a89      	subs	r1, r1, r2
 800133e:	4642      	mov	r2, r8
 8001340:	0c28      	lsrs	r0, r5, #16
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	0c1d      	lsrs	r5, r3, #16
 8001346:	465b      	mov	r3, fp
 8001348:	0c14      	lsrs	r4, r2, #16
 800134a:	0022      	movs	r2, r4
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	0c1b      	lsrs	r3, r3, #16
 8001350:	435a      	muls	r2, r3
 8001352:	9403      	str	r4, [sp, #12]
 8001354:	436b      	muls	r3, r5
 8001356:	4344      	muls	r4, r0
 8001358:	9502      	str	r5, [sp, #8]
 800135a:	4368      	muls	r0, r5
 800135c:	191b      	adds	r3, r3, r4
 800135e:	0c15      	lsrs	r5, r2, #16
 8001360:	18eb      	adds	r3, r5, r3
 8001362:	429c      	cmp	r4, r3
 8001364:	d903      	bls.n	800136e <__aeabi_ddiv+0x356>
 8001366:	2480      	movs	r4, #128	; 0x80
 8001368:	0264      	lsls	r4, r4, #9
 800136a:	46a4      	mov	ip, r4
 800136c:	4460      	add	r0, ip
 800136e:	0c1c      	lsrs	r4, r3, #16
 8001370:	0415      	lsls	r5, r2, #16
 8001372:	041b      	lsls	r3, r3, #16
 8001374:	0c2d      	lsrs	r5, r5, #16
 8001376:	1820      	adds	r0, r4, r0
 8001378:	195d      	adds	r5, r3, r5
 800137a:	4281      	cmp	r1, r0
 800137c:	d377      	bcc.n	800146e <__aeabi_ddiv+0x456>
 800137e:	d073      	beq.n	8001468 <__aeabi_ddiv+0x450>
 8001380:	1a0c      	subs	r4, r1, r0
 8001382:	4aa2      	ldr	r2, [pc, #648]	; (800160c <__aeabi_ddiv+0x5f4>)
 8001384:	1b7d      	subs	r5, r7, r5
 8001386:	42af      	cmp	r7, r5
 8001388:	41bf      	sbcs	r7, r7
 800138a:	4694      	mov	ip, r2
 800138c:	9b00      	ldr	r3, [sp, #0]
 800138e:	427f      	negs	r7, r7
 8001390:	4463      	add	r3, ip
 8001392:	1be0      	subs	r0, r4, r7
 8001394:	001c      	movs	r4, r3
 8001396:	4286      	cmp	r6, r0
 8001398:	d100      	bne.n	800139c <__aeabi_ddiv+0x384>
 800139a:	e0db      	b.n	8001554 <__aeabi_ddiv+0x53c>
 800139c:	9901      	ldr	r1, [sp, #4]
 800139e:	f7fe ff39 	bl	8000214 <__aeabi_uidivmod>
 80013a2:	464a      	mov	r2, r9
 80013a4:	4342      	muls	r2, r0
 80013a6:	040b      	lsls	r3, r1, #16
 80013a8:	0c29      	lsrs	r1, r5, #16
 80013aa:	0007      	movs	r7, r0
 80013ac:	4319      	orrs	r1, r3
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d907      	bls.n	80013c2 <__aeabi_ddiv+0x3aa>
 80013b2:	1989      	adds	r1, r1, r6
 80013b4:	3f01      	subs	r7, #1
 80013b6:	428e      	cmp	r6, r1
 80013b8:	d803      	bhi.n	80013c2 <__aeabi_ddiv+0x3aa>
 80013ba:	428a      	cmp	r2, r1
 80013bc:	d901      	bls.n	80013c2 <__aeabi_ddiv+0x3aa>
 80013be:	1e87      	subs	r7, r0, #2
 80013c0:	1989      	adds	r1, r1, r6
 80013c2:	1a88      	subs	r0, r1, r2
 80013c4:	9901      	ldr	r1, [sp, #4]
 80013c6:	f7fe ff25 	bl	8000214 <__aeabi_uidivmod>
 80013ca:	0409      	lsls	r1, r1, #16
 80013cc:	464a      	mov	r2, r9
 80013ce:	4689      	mov	r9, r1
 80013d0:	0429      	lsls	r1, r5, #16
 80013d2:	464d      	mov	r5, r9
 80013d4:	4342      	muls	r2, r0
 80013d6:	0c09      	lsrs	r1, r1, #16
 80013d8:	0003      	movs	r3, r0
 80013da:	4329      	orrs	r1, r5
 80013dc:	428a      	cmp	r2, r1
 80013de:	d907      	bls.n	80013f0 <__aeabi_ddiv+0x3d8>
 80013e0:	1989      	adds	r1, r1, r6
 80013e2:	3b01      	subs	r3, #1
 80013e4:	428e      	cmp	r6, r1
 80013e6:	d803      	bhi.n	80013f0 <__aeabi_ddiv+0x3d8>
 80013e8:	428a      	cmp	r2, r1
 80013ea:	d901      	bls.n	80013f0 <__aeabi_ddiv+0x3d8>
 80013ec:	1e83      	subs	r3, r0, #2
 80013ee:	1989      	adds	r1, r1, r6
 80013f0:	043f      	lsls	r7, r7, #16
 80013f2:	1a89      	subs	r1, r1, r2
 80013f4:	003a      	movs	r2, r7
 80013f6:	9f03      	ldr	r7, [sp, #12]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	0038      	movs	r0, r7
 80013fc:	0413      	lsls	r3, r2, #16
 80013fe:	0c1b      	lsrs	r3, r3, #16
 8001400:	4358      	muls	r0, r3
 8001402:	4681      	mov	r9, r0
 8001404:	9802      	ldr	r0, [sp, #8]
 8001406:	0c15      	lsrs	r5, r2, #16
 8001408:	436f      	muls	r7, r5
 800140a:	4343      	muls	r3, r0
 800140c:	4345      	muls	r5, r0
 800140e:	4648      	mov	r0, r9
 8001410:	0c00      	lsrs	r0, r0, #16
 8001412:	4684      	mov	ip, r0
 8001414:	19db      	adds	r3, r3, r7
 8001416:	4463      	add	r3, ip
 8001418:	429f      	cmp	r7, r3
 800141a:	d903      	bls.n	8001424 <__aeabi_ddiv+0x40c>
 800141c:	2080      	movs	r0, #128	; 0x80
 800141e:	0240      	lsls	r0, r0, #9
 8001420:	4684      	mov	ip, r0
 8001422:	4465      	add	r5, ip
 8001424:	4648      	mov	r0, r9
 8001426:	0c1f      	lsrs	r7, r3, #16
 8001428:	0400      	lsls	r0, r0, #16
 800142a:	041b      	lsls	r3, r3, #16
 800142c:	0c00      	lsrs	r0, r0, #16
 800142e:	197d      	adds	r5, r7, r5
 8001430:	1818      	adds	r0, r3, r0
 8001432:	42a9      	cmp	r1, r5
 8001434:	d200      	bcs.n	8001438 <__aeabi_ddiv+0x420>
 8001436:	e084      	b.n	8001542 <__aeabi_ddiv+0x52a>
 8001438:	d100      	bne.n	800143c <__aeabi_ddiv+0x424>
 800143a:	e07f      	b.n	800153c <__aeabi_ddiv+0x524>
 800143c:	2301      	movs	r3, #1
 800143e:	431a      	orrs	r2, r3
 8001440:	e657      	b.n	80010f2 <__aeabi_ddiv+0xda>
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	464a      	mov	r2, r9
 8001446:	031b      	lsls	r3, r3, #12
 8001448:	4313      	orrs	r3, r2
 800144a:	031b      	lsls	r3, r3, #12
 800144c:	0b1b      	lsrs	r3, r3, #12
 800144e:	46aa      	mov	sl, r5
 8001450:	4a6f      	ldr	r2, [pc, #444]	; (8001610 <__aeabi_ddiv+0x5f8>)
 8001452:	e66f      	b.n	8001134 <__aeabi_ddiv+0x11c>
 8001454:	42ba      	cmp	r2, r7
 8001456:	d900      	bls.n	800145a <__aeabi_ddiv+0x442>
 8001458:	e735      	b.n	80012c6 <__aeabi_ddiv+0x2ae>
 800145a:	464b      	mov	r3, r9
 800145c:	07dc      	lsls	r4, r3, #31
 800145e:	0858      	lsrs	r0, r3, #1
 8001460:	087b      	lsrs	r3, r7, #1
 8001462:	431c      	orrs	r4, r3
 8001464:	07ff      	lsls	r7, r7, #31
 8001466:	e734      	b.n	80012d2 <__aeabi_ddiv+0x2ba>
 8001468:	2400      	movs	r4, #0
 800146a:	42af      	cmp	r7, r5
 800146c:	d289      	bcs.n	8001382 <__aeabi_ddiv+0x36a>
 800146e:	4447      	add	r7, r8
 8001470:	4547      	cmp	r7, r8
 8001472:	41a4      	sbcs	r4, r4
 8001474:	465b      	mov	r3, fp
 8001476:	4264      	negs	r4, r4
 8001478:	19a4      	adds	r4, r4, r6
 800147a:	1864      	adds	r4, r4, r1
 800147c:	3b01      	subs	r3, #1
 800147e:	42a6      	cmp	r6, r4
 8001480:	d21e      	bcs.n	80014c0 <__aeabi_ddiv+0x4a8>
 8001482:	42a0      	cmp	r0, r4
 8001484:	d86d      	bhi.n	8001562 <__aeabi_ddiv+0x54a>
 8001486:	d100      	bne.n	800148a <__aeabi_ddiv+0x472>
 8001488:	e0b6      	b.n	80015f8 <__aeabi_ddiv+0x5e0>
 800148a:	1a24      	subs	r4, r4, r0
 800148c:	469b      	mov	fp, r3
 800148e:	e778      	b.n	8001382 <__aeabi_ddiv+0x36a>
 8001490:	0003      	movs	r3, r0
 8001492:	465a      	mov	r2, fp
 8001494:	3b28      	subs	r3, #40	; 0x28
 8001496:	409a      	lsls	r2, r3
 8001498:	2700      	movs	r7, #0
 800149a:	4691      	mov	r9, r2
 800149c:	e688      	b.n	80011b0 <__aeabi_ddiv+0x198>
 800149e:	4658      	mov	r0, fp
 80014a0:	f000 fc3e 	bl	8001d20 <__clzsi2>
 80014a4:	3020      	adds	r0, #32
 80014a6:	e672      	b.n	800118e <__aeabi_ddiv+0x176>
 80014a8:	0003      	movs	r3, r0
 80014aa:	4652      	mov	r2, sl
 80014ac:	3b28      	subs	r3, #40	; 0x28
 80014ae:	409a      	lsls	r2, r3
 80014b0:	4693      	mov	fp, r2
 80014b2:	2200      	movs	r2, #0
 80014b4:	e6b4      	b.n	8001220 <__aeabi_ddiv+0x208>
 80014b6:	4650      	mov	r0, sl
 80014b8:	f000 fc32 	bl	8001d20 <__clzsi2>
 80014bc:	3020      	adds	r0, #32
 80014be:	e69a      	b.n	80011f6 <__aeabi_ddiv+0x1de>
 80014c0:	42a6      	cmp	r6, r4
 80014c2:	d1e2      	bne.n	800148a <__aeabi_ddiv+0x472>
 80014c4:	45b8      	cmp	r8, r7
 80014c6:	d9dc      	bls.n	8001482 <__aeabi_ddiv+0x46a>
 80014c8:	1a34      	subs	r4, r6, r0
 80014ca:	469b      	mov	fp, r3
 80014cc:	e759      	b.n	8001382 <__aeabi_ddiv+0x36a>
 80014ce:	2b1f      	cmp	r3, #31
 80014d0:	dc65      	bgt.n	800159e <__aeabi_ddiv+0x586>
 80014d2:	4c50      	ldr	r4, [pc, #320]	; (8001614 <__aeabi_ddiv+0x5fc>)
 80014d4:	9900      	ldr	r1, [sp, #0]
 80014d6:	46a4      	mov	ip, r4
 80014d8:	465c      	mov	r4, fp
 80014da:	4461      	add	r1, ip
 80014dc:	0008      	movs	r0, r1
 80014de:	408c      	lsls	r4, r1
 80014e0:	0011      	movs	r1, r2
 80014e2:	4082      	lsls	r2, r0
 80014e4:	40d9      	lsrs	r1, r3
 80014e6:	1e50      	subs	r0, r2, #1
 80014e8:	4182      	sbcs	r2, r0
 80014ea:	430c      	orrs	r4, r1
 80014ec:	4314      	orrs	r4, r2
 80014ee:	465a      	mov	r2, fp
 80014f0:	40da      	lsrs	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	0762      	lsls	r2, r4, #29
 80014f6:	d009      	beq.n	800150c <__aeabi_ddiv+0x4f4>
 80014f8:	220f      	movs	r2, #15
 80014fa:	4022      	ands	r2, r4
 80014fc:	2a04      	cmp	r2, #4
 80014fe:	d005      	beq.n	800150c <__aeabi_ddiv+0x4f4>
 8001500:	0022      	movs	r2, r4
 8001502:	1d14      	adds	r4, r2, #4
 8001504:	4294      	cmp	r4, r2
 8001506:	4189      	sbcs	r1, r1
 8001508:	4249      	negs	r1, r1
 800150a:	185b      	adds	r3, r3, r1
 800150c:	021a      	lsls	r2, r3, #8
 800150e:	d562      	bpl.n	80015d6 <__aeabi_ddiv+0x5be>
 8001510:	2201      	movs	r2, #1
 8001512:	2300      	movs	r3, #0
 8001514:	2700      	movs	r7, #0
 8001516:	e60d      	b.n	8001134 <__aeabi_ddiv+0x11c>
 8001518:	428a      	cmp	r2, r1
 800151a:	d800      	bhi.n	800151e <__aeabi_ddiv+0x506>
 800151c:	e70a      	b.n	8001334 <__aeabi_ddiv+0x31c>
 800151e:	1e83      	subs	r3, r0, #2
 8001520:	1989      	adds	r1, r1, r6
 8001522:	e707      	b.n	8001334 <__aeabi_ddiv+0x31c>
 8001524:	230f      	movs	r3, #15
 8001526:	4013      	ands	r3, r2
 8001528:	2b04      	cmp	r3, #4
 800152a:	d100      	bne.n	800152e <__aeabi_ddiv+0x516>
 800152c:	e5e6      	b.n	80010fc <__aeabi_ddiv+0xe4>
 800152e:	1d17      	adds	r7, r2, #4
 8001530:	4297      	cmp	r7, r2
 8001532:	4192      	sbcs	r2, r2
 8001534:	4253      	negs	r3, r2
 8001536:	449b      	add	fp, r3
 8001538:	08fa      	lsrs	r2, r7, #3
 800153a:	e5e0      	b.n	80010fe <__aeabi_ddiv+0xe6>
 800153c:	2800      	cmp	r0, #0
 800153e:	d100      	bne.n	8001542 <__aeabi_ddiv+0x52a>
 8001540:	e5d7      	b.n	80010f2 <__aeabi_ddiv+0xda>
 8001542:	1871      	adds	r1, r6, r1
 8001544:	1e53      	subs	r3, r2, #1
 8001546:	42b1      	cmp	r1, r6
 8001548:	d327      	bcc.n	800159a <__aeabi_ddiv+0x582>
 800154a:	42a9      	cmp	r1, r5
 800154c:	d315      	bcc.n	800157a <__aeabi_ddiv+0x562>
 800154e:	d058      	beq.n	8001602 <__aeabi_ddiv+0x5ea>
 8001550:	001a      	movs	r2, r3
 8001552:	e773      	b.n	800143c <__aeabi_ddiv+0x424>
 8001554:	2b00      	cmp	r3, #0
 8001556:	dc00      	bgt.n	800155a <__aeabi_ddiv+0x542>
 8001558:	e604      	b.n	8001164 <__aeabi_ddiv+0x14c>
 800155a:	2301      	movs	r3, #1
 800155c:	2200      	movs	r2, #0
 800155e:	449b      	add	fp, r3
 8001560:	e5cd      	b.n	80010fe <__aeabi_ddiv+0xe6>
 8001562:	2302      	movs	r3, #2
 8001564:	4447      	add	r7, r8
 8001566:	4547      	cmp	r7, r8
 8001568:	4189      	sbcs	r1, r1
 800156a:	425b      	negs	r3, r3
 800156c:	469c      	mov	ip, r3
 800156e:	4249      	negs	r1, r1
 8001570:	1989      	adds	r1, r1, r6
 8001572:	190c      	adds	r4, r1, r4
 8001574:	44e3      	add	fp, ip
 8001576:	1a24      	subs	r4, r4, r0
 8001578:	e703      	b.n	8001382 <__aeabi_ddiv+0x36a>
 800157a:	4643      	mov	r3, r8
 800157c:	005f      	lsls	r7, r3, #1
 800157e:	4547      	cmp	r7, r8
 8001580:	419b      	sbcs	r3, r3
 8001582:	46b8      	mov	r8, r7
 8001584:	425b      	negs	r3, r3
 8001586:	199e      	adds	r6, r3, r6
 8001588:	3a02      	subs	r2, #2
 800158a:	1989      	adds	r1, r1, r6
 800158c:	42a9      	cmp	r1, r5
 800158e:	d000      	beq.n	8001592 <__aeabi_ddiv+0x57a>
 8001590:	e754      	b.n	800143c <__aeabi_ddiv+0x424>
 8001592:	4540      	cmp	r0, r8
 8001594:	d000      	beq.n	8001598 <__aeabi_ddiv+0x580>
 8001596:	e751      	b.n	800143c <__aeabi_ddiv+0x424>
 8001598:	e5ab      	b.n	80010f2 <__aeabi_ddiv+0xda>
 800159a:	001a      	movs	r2, r3
 800159c:	e7f6      	b.n	800158c <__aeabi_ddiv+0x574>
 800159e:	211f      	movs	r1, #31
 80015a0:	465f      	mov	r7, fp
 80015a2:	4249      	negs	r1, r1
 80015a4:	1b0c      	subs	r4, r1, r4
 80015a6:	40e7      	lsrs	r7, r4
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d007      	beq.n	80015bc <__aeabi_ddiv+0x5a4>
 80015ac:	491a      	ldr	r1, [pc, #104]	; (8001618 <__aeabi_ddiv+0x600>)
 80015ae:	9b00      	ldr	r3, [sp, #0]
 80015b0:	468c      	mov	ip, r1
 80015b2:	4463      	add	r3, ip
 80015b4:	0018      	movs	r0, r3
 80015b6:	465b      	mov	r3, fp
 80015b8:	4083      	lsls	r3, r0
 80015ba:	431a      	orrs	r2, r3
 80015bc:	1e50      	subs	r0, r2, #1
 80015be:	4182      	sbcs	r2, r0
 80015c0:	433a      	orrs	r2, r7
 80015c2:	2707      	movs	r7, #7
 80015c4:	2300      	movs	r3, #0
 80015c6:	4017      	ands	r7, r2
 80015c8:	d009      	beq.n	80015de <__aeabi_ddiv+0x5c6>
 80015ca:	210f      	movs	r1, #15
 80015cc:	2300      	movs	r3, #0
 80015ce:	4011      	ands	r1, r2
 80015d0:	0014      	movs	r4, r2
 80015d2:	2904      	cmp	r1, #4
 80015d4:	d195      	bne.n	8001502 <__aeabi_ddiv+0x4ea>
 80015d6:	0022      	movs	r2, r4
 80015d8:	075f      	lsls	r7, r3, #29
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	0b1b      	lsrs	r3, r3, #12
 80015de:	08d2      	lsrs	r2, r2, #3
 80015e0:	4317      	orrs	r7, r2
 80015e2:	2200      	movs	r2, #0
 80015e4:	e5a6      	b.n	8001134 <__aeabi_ddiv+0x11c>
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	4659      	mov	r1, fp
 80015ea:	031b      	lsls	r3, r3, #12
 80015ec:	430b      	orrs	r3, r1
 80015ee:	031b      	lsls	r3, r3, #12
 80015f0:	0017      	movs	r7, r2
 80015f2:	0b1b      	lsrs	r3, r3, #12
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <__aeabi_ddiv+0x5f8>)
 80015f6:	e59d      	b.n	8001134 <__aeabi_ddiv+0x11c>
 80015f8:	42bd      	cmp	r5, r7
 80015fa:	d8b2      	bhi.n	8001562 <__aeabi_ddiv+0x54a>
 80015fc:	469b      	mov	fp, r3
 80015fe:	2400      	movs	r4, #0
 8001600:	e6bf      	b.n	8001382 <__aeabi_ddiv+0x36a>
 8001602:	4580      	cmp	r8, r0
 8001604:	d3b9      	bcc.n	800157a <__aeabi_ddiv+0x562>
 8001606:	001a      	movs	r2, r3
 8001608:	e7c3      	b.n	8001592 <__aeabi_ddiv+0x57a>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	000003ff 	.word	0x000003ff
 8001610:	000007ff 	.word	0x000007ff
 8001614:	0000041e 	.word	0x0000041e
 8001618:	0000043e 	.word	0x0000043e

0800161c <__aeabi_dmul>:
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	4657      	mov	r7, sl
 8001620:	46de      	mov	lr, fp
 8001622:	464e      	mov	r6, r9
 8001624:	4645      	mov	r5, r8
 8001626:	b5e0      	push	{r5, r6, r7, lr}
 8001628:	4683      	mov	fp, r0
 800162a:	0006      	movs	r6, r0
 800162c:	030f      	lsls	r7, r1, #12
 800162e:	0048      	lsls	r0, r1, #1
 8001630:	b087      	sub	sp, #28
 8001632:	4692      	mov	sl, r2
 8001634:	001d      	movs	r5, r3
 8001636:	0b3f      	lsrs	r7, r7, #12
 8001638:	0d40      	lsrs	r0, r0, #21
 800163a:	0fcc      	lsrs	r4, r1, #31
 800163c:	2800      	cmp	r0, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_dmul+0x26>
 8001640:	e06f      	b.n	8001722 <__aeabi_dmul+0x106>
 8001642:	4bde      	ldr	r3, [pc, #888]	; (80019bc <__aeabi_dmul+0x3a0>)
 8001644:	4298      	cmp	r0, r3
 8001646:	d038      	beq.n	80016ba <__aeabi_dmul+0x9e>
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	00ff      	lsls	r7, r7, #3
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431f      	orrs	r7, r3
 8001650:	0f73      	lsrs	r3, r6, #29
 8001652:	433b      	orrs	r3, r7
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	4bda      	ldr	r3, [pc, #872]	; (80019c0 <__aeabi_dmul+0x3a4>)
 8001658:	2700      	movs	r7, #0
 800165a:	4699      	mov	r9, r3
 800165c:	2300      	movs	r3, #0
 800165e:	469b      	mov	fp, r3
 8001660:	00f6      	lsls	r6, r6, #3
 8001662:	4481      	add	r9, r0
 8001664:	032b      	lsls	r3, r5, #12
 8001666:	0069      	lsls	r1, r5, #1
 8001668:	0b1b      	lsrs	r3, r3, #12
 800166a:	4652      	mov	r2, sl
 800166c:	4698      	mov	r8, r3
 800166e:	0d49      	lsrs	r1, r1, #21
 8001670:	0fed      	lsrs	r5, r5, #31
 8001672:	2900      	cmp	r1, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_dmul+0x5c>
 8001676:	e085      	b.n	8001784 <__aeabi_dmul+0x168>
 8001678:	4bd0      	ldr	r3, [pc, #832]	; (80019bc <__aeabi_dmul+0x3a0>)
 800167a:	4299      	cmp	r1, r3
 800167c:	d100      	bne.n	8001680 <__aeabi_dmul+0x64>
 800167e:	e073      	b.n	8001768 <__aeabi_dmul+0x14c>
 8001680:	4643      	mov	r3, r8
 8001682:	00da      	lsls	r2, r3, #3
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	4313      	orrs	r3, r2
 800168a:	4652      	mov	r2, sl
 800168c:	48cc      	ldr	r0, [pc, #816]	; (80019c0 <__aeabi_dmul+0x3a4>)
 800168e:	0f52      	lsrs	r2, r2, #29
 8001690:	4684      	mov	ip, r0
 8001692:	4313      	orrs	r3, r2
 8001694:	4652      	mov	r2, sl
 8001696:	2000      	movs	r0, #0
 8001698:	4461      	add	r1, ip
 800169a:	00d2      	lsls	r2, r2, #3
 800169c:	4489      	add	r9, r1
 800169e:	0021      	movs	r1, r4
 80016a0:	4069      	eors	r1, r5
 80016a2:	9100      	str	r1, [sp, #0]
 80016a4:	468c      	mov	ip, r1
 80016a6:	2101      	movs	r1, #1
 80016a8:	4449      	add	r1, r9
 80016aa:	468a      	mov	sl, r1
 80016ac:	2f0f      	cmp	r7, #15
 80016ae:	d900      	bls.n	80016b2 <__aeabi_dmul+0x96>
 80016b0:	e090      	b.n	80017d4 <__aeabi_dmul+0x1b8>
 80016b2:	49c4      	ldr	r1, [pc, #784]	; (80019c4 <__aeabi_dmul+0x3a8>)
 80016b4:	00bf      	lsls	r7, r7, #2
 80016b6:	59cf      	ldr	r7, [r1, r7]
 80016b8:	46bf      	mov	pc, r7
 80016ba:	465b      	mov	r3, fp
 80016bc:	433b      	orrs	r3, r7
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	d000      	beq.n	80016c4 <__aeabi_dmul+0xa8>
 80016c2:	e16a      	b.n	800199a <__aeabi_dmul+0x37e>
 80016c4:	2302      	movs	r3, #2
 80016c6:	2708      	movs	r7, #8
 80016c8:	2600      	movs	r6, #0
 80016ca:	4681      	mov	r9, r0
 80016cc:	469b      	mov	fp, r3
 80016ce:	e7c9      	b.n	8001664 <__aeabi_dmul+0x48>
 80016d0:	0032      	movs	r2, r6
 80016d2:	4658      	mov	r0, fp
 80016d4:	9b01      	ldr	r3, [sp, #4]
 80016d6:	4661      	mov	r1, ip
 80016d8:	9100      	str	r1, [sp, #0]
 80016da:	2802      	cmp	r0, #2
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dmul+0xc4>
 80016de:	e075      	b.n	80017cc <__aeabi_dmul+0x1b0>
 80016e0:	2803      	cmp	r0, #3
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dmul+0xca>
 80016e4:	e1fe      	b.n	8001ae4 <__aeabi_dmul+0x4c8>
 80016e6:	2801      	cmp	r0, #1
 80016e8:	d000      	beq.n	80016ec <__aeabi_dmul+0xd0>
 80016ea:	e12c      	b.n	8001946 <__aeabi_dmul+0x32a>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2700      	movs	r7, #0
 80016f0:	2600      	movs	r6, #0
 80016f2:	2500      	movs	r5, #0
 80016f4:	033f      	lsls	r7, r7, #12
 80016f6:	0d2a      	lsrs	r2, r5, #20
 80016f8:	0b3f      	lsrs	r7, r7, #12
 80016fa:	48b3      	ldr	r0, [pc, #716]	; (80019c8 <__aeabi_dmul+0x3ac>)
 80016fc:	0512      	lsls	r2, r2, #20
 80016fe:	433a      	orrs	r2, r7
 8001700:	4002      	ands	r2, r0
 8001702:	051b      	lsls	r3, r3, #20
 8001704:	4313      	orrs	r3, r2
 8001706:	9a00      	ldr	r2, [sp, #0]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	07d1      	lsls	r1, r2, #31
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	430b      	orrs	r3, r1
 8001710:	0030      	movs	r0, r6
 8001712:	0019      	movs	r1, r3
 8001714:	b007      	add	sp, #28
 8001716:	bc3c      	pop	{r2, r3, r4, r5}
 8001718:	4690      	mov	r8, r2
 800171a:	4699      	mov	r9, r3
 800171c:	46a2      	mov	sl, r4
 800171e:	46ab      	mov	fp, r5
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001722:	465b      	mov	r3, fp
 8001724:	433b      	orrs	r3, r7
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	d100      	bne.n	800172c <__aeabi_dmul+0x110>
 800172a:	e12f      	b.n	800198c <__aeabi_dmul+0x370>
 800172c:	2f00      	cmp	r7, #0
 800172e:	d100      	bne.n	8001732 <__aeabi_dmul+0x116>
 8001730:	e1a5      	b.n	8001a7e <__aeabi_dmul+0x462>
 8001732:	0038      	movs	r0, r7
 8001734:	f000 faf4 	bl	8001d20 <__clzsi2>
 8001738:	0003      	movs	r3, r0
 800173a:	3b0b      	subs	r3, #11
 800173c:	2b1c      	cmp	r3, #28
 800173e:	dd00      	ble.n	8001742 <__aeabi_dmul+0x126>
 8001740:	e196      	b.n	8001a70 <__aeabi_dmul+0x454>
 8001742:	221d      	movs	r2, #29
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	465a      	mov	r2, fp
 8001748:	0001      	movs	r1, r0
 800174a:	40da      	lsrs	r2, r3
 800174c:	465e      	mov	r6, fp
 800174e:	3908      	subs	r1, #8
 8001750:	408f      	lsls	r7, r1
 8001752:	0013      	movs	r3, r2
 8001754:	408e      	lsls	r6, r1
 8001756:	433b      	orrs	r3, r7
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	4b9c      	ldr	r3, [pc, #624]	; (80019cc <__aeabi_dmul+0x3b0>)
 800175c:	2700      	movs	r7, #0
 800175e:	1a1b      	subs	r3, r3, r0
 8001760:	4699      	mov	r9, r3
 8001762:	2300      	movs	r3, #0
 8001764:	469b      	mov	fp, r3
 8001766:	e77d      	b.n	8001664 <__aeabi_dmul+0x48>
 8001768:	4641      	mov	r1, r8
 800176a:	4653      	mov	r3, sl
 800176c:	430b      	orrs	r3, r1
 800176e:	4993      	ldr	r1, [pc, #588]	; (80019bc <__aeabi_dmul+0x3a0>)
 8001770:	468c      	mov	ip, r1
 8001772:	44e1      	add	r9, ip
 8001774:	2b00      	cmp	r3, #0
 8001776:	d000      	beq.n	800177a <__aeabi_dmul+0x15e>
 8001778:	e11a      	b.n	80019b0 <__aeabi_dmul+0x394>
 800177a:	2202      	movs	r2, #2
 800177c:	2002      	movs	r0, #2
 800177e:	4317      	orrs	r7, r2
 8001780:	2200      	movs	r2, #0
 8001782:	e78c      	b.n	800169e <__aeabi_dmul+0x82>
 8001784:	4313      	orrs	r3, r2
 8001786:	d100      	bne.n	800178a <__aeabi_dmul+0x16e>
 8001788:	e10d      	b.n	80019a6 <__aeabi_dmul+0x38a>
 800178a:	4643      	mov	r3, r8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d100      	bne.n	8001792 <__aeabi_dmul+0x176>
 8001790:	e181      	b.n	8001a96 <__aeabi_dmul+0x47a>
 8001792:	4640      	mov	r0, r8
 8001794:	f000 fac4 	bl	8001d20 <__clzsi2>
 8001798:	0002      	movs	r2, r0
 800179a:	3a0b      	subs	r2, #11
 800179c:	2a1c      	cmp	r2, #28
 800179e:	dd00      	ble.n	80017a2 <__aeabi_dmul+0x186>
 80017a0:	e172      	b.n	8001a88 <__aeabi_dmul+0x46c>
 80017a2:	0001      	movs	r1, r0
 80017a4:	4643      	mov	r3, r8
 80017a6:	3908      	subs	r1, #8
 80017a8:	408b      	lsls	r3, r1
 80017aa:	4698      	mov	r8, r3
 80017ac:	231d      	movs	r3, #29
 80017ae:	1a9a      	subs	r2, r3, r2
 80017b0:	4653      	mov	r3, sl
 80017b2:	40d3      	lsrs	r3, r2
 80017b4:	001a      	movs	r2, r3
 80017b6:	4643      	mov	r3, r8
 80017b8:	4313      	orrs	r3, r2
 80017ba:	4652      	mov	r2, sl
 80017bc:	408a      	lsls	r2, r1
 80017be:	4649      	mov	r1, r9
 80017c0:	1a08      	subs	r0, r1, r0
 80017c2:	4982      	ldr	r1, [pc, #520]	; (80019cc <__aeabi_dmul+0x3b0>)
 80017c4:	4689      	mov	r9, r1
 80017c6:	4481      	add	r9, r0
 80017c8:	2000      	movs	r0, #0
 80017ca:	e768      	b.n	800169e <__aeabi_dmul+0x82>
 80017cc:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <__aeabi_dmul+0x3a0>)
 80017ce:	2700      	movs	r7, #0
 80017d0:	2600      	movs	r6, #0
 80017d2:	e78e      	b.n	80016f2 <__aeabi_dmul+0xd6>
 80017d4:	0c14      	lsrs	r4, r2, #16
 80017d6:	0412      	lsls	r2, r2, #16
 80017d8:	0c12      	lsrs	r2, r2, #16
 80017da:	0011      	movs	r1, r2
 80017dc:	0c37      	lsrs	r7, r6, #16
 80017de:	0436      	lsls	r6, r6, #16
 80017e0:	0c35      	lsrs	r5, r6, #16
 80017e2:	4379      	muls	r1, r7
 80017e4:	0028      	movs	r0, r5
 80017e6:	468c      	mov	ip, r1
 80017e8:	002e      	movs	r6, r5
 80017ea:	4360      	muls	r0, r4
 80017ec:	4460      	add	r0, ip
 80017ee:	4683      	mov	fp, r0
 80017f0:	4356      	muls	r6, r2
 80017f2:	0021      	movs	r1, r4
 80017f4:	0c30      	lsrs	r0, r6, #16
 80017f6:	4680      	mov	r8, r0
 80017f8:	4658      	mov	r0, fp
 80017fa:	4379      	muls	r1, r7
 80017fc:	4440      	add	r0, r8
 80017fe:	9102      	str	r1, [sp, #8]
 8001800:	4584      	cmp	ip, r0
 8001802:	d906      	bls.n	8001812 <__aeabi_dmul+0x1f6>
 8001804:	4688      	mov	r8, r1
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	468c      	mov	ip, r1
 800180c:	44e0      	add	r8, ip
 800180e:	4641      	mov	r1, r8
 8001810:	9102      	str	r1, [sp, #8]
 8001812:	0436      	lsls	r6, r6, #16
 8001814:	0c01      	lsrs	r1, r0, #16
 8001816:	0c36      	lsrs	r6, r6, #16
 8001818:	0400      	lsls	r0, r0, #16
 800181a:	468b      	mov	fp, r1
 800181c:	1981      	adds	r1, r0, r6
 800181e:	0c1e      	lsrs	r6, r3, #16
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	9103      	str	r1, [sp, #12]
 8001826:	0019      	movs	r1, r3
 8001828:	4379      	muls	r1, r7
 800182a:	468c      	mov	ip, r1
 800182c:	0028      	movs	r0, r5
 800182e:	4375      	muls	r5, r6
 8001830:	4465      	add	r5, ip
 8001832:	46a8      	mov	r8, r5
 8001834:	4358      	muls	r0, r3
 8001836:	0c05      	lsrs	r5, r0, #16
 8001838:	4445      	add	r5, r8
 800183a:	4377      	muls	r7, r6
 800183c:	42a9      	cmp	r1, r5
 800183e:	d903      	bls.n	8001848 <__aeabi_dmul+0x22c>
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	0249      	lsls	r1, r1, #9
 8001844:	468c      	mov	ip, r1
 8001846:	4467      	add	r7, ip
 8001848:	0c29      	lsrs	r1, r5, #16
 800184a:	468c      	mov	ip, r1
 800184c:	0039      	movs	r1, r7
 800184e:	0400      	lsls	r0, r0, #16
 8001850:	0c00      	lsrs	r0, r0, #16
 8001852:	042d      	lsls	r5, r5, #16
 8001854:	182d      	adds	r5, r5, r0
 8001856:	4461      	add	r1, ip
 8001858:	44ab      	add	fp, r5
 800185a:	9105      	str	r1, [sp, #20]
 800185c:	4659      	mov	r1, fp
 800185e:	9104      	str	r1, [sp, #16]
 8001860:	9901      	ldr	r1, [sp, #4]
 8001862:	040f      	lsls	r7, r1, #16
 8001864:	0c3f      	lsrs	r7, r7, #16
 8001866:	0c08      	lsrs	r0, r1, #16
 8001868:	0039      	movs	r1, r7
 800186a:	4351      	muls	r1, r2
 800186c:	4342      	muls	r2, r0
 800186e:	4690      	mov	r8, r2
 8001870:	0002      	movs	r2, r0
 8001872:	468c      	mov	ip, r1
 8001874:	0c09      	lsrs	r1, r1, #16
 8001876:	468b      	mov	fp, r1
 8001878:	4362      	muls	r2, r4
 800187a:	437c      	muls	r4, r7
 800187c:	4444      	add	r4, r8
 800187e:	445c      	add	r4, fp
 8001880:	45a0      	cmp	r8, r4
 8001882:	d903      	bls.n	800188c <__aeabi_dmul+0x270>
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0249      	lsls	r1, r1, #9
 8001888:	4688      	mov	r8, r1
 800188a:	4442      	add	r2, r8
 800188c:	0c21      	lsrs	r1, r4, #16
 800188e:	4688      	mov	r8, r1
 8001890:	4661      	mov	r1, ip
 8001892:	0409      	lsls	r1, r1, #16
 8001894:	0c09      	lsrs	r1, r1, #16
 8001896:	468c      	mov	ip, r1
 8001898:	0039      	movs	r1, r7
 800189a:	4359      	muls	r1, r3
 800189c:	4343      	muls	r3, r0
 800189e:	4370      	muls	r0, r6
 80018a0:	437e      	muls	r6, r7
 80018a2:	0c0f      	lsrs	r7, r1, #16
 80018a4:	18f6      	adds	r6, r6, r3
 80018a6:	0424      	lsls	r4, r4, #16
 80018a8:	19be      	adds	r6, r7, r6
 80018aa:	4464      	add	r4, ip
 80018ac:	4442      	add	r2, r8
 80018ae:	468c      	mov	ip, r1
 80018b0:	42b3      	cmp	r3, r6
 80018b2:	d903      	bls.n	80018bc <__aeabi_dmul+0x2a0>
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	4698      	mov	r8, r3
 80018ba:	4440      	add	r0, r8
 80018bc:	9b02      	ldr	r3, [sp, #8]
 80018be:	4661      	mov	r1, ip
 80018c0:	4698      	mov	r8, r3
 80018c2:	9b04      	ldr	r3, [sp, #16]
 80018c4:	0437      	lsls	r7, r6, #16
 80018c6:	4443      	add	r3, r8
 80018c8:	469b      	mov	fp, r3
 80018ca:	45ab      	cmp	fp, r5
 80018cc:	41ad      	sbcs	r5, r5
 80018ce:	426b      	negs	r3, r5
 80018d0:	040d      	lsls	r5, r1, #16
 80018d2:	9905      	ldr	r1, [sp, #20]
 80018d4:	0c2d      	lsrs	r5, r5, #16
 80018d6:	468c      	mov	ip, r1
 80018d8:	197f      	adds	r7, r7, r5
 80018da:	4467      	add	r7, ip
 80018dc:	18fd      	adds	r5, r7, r3
 80018de:	46a8      	mov	r8, r5
 80018e0:	465d      	mov	r5, fp
 80018e2:	192d      	adds	r5, r5, r4
 80018e4:	42a5      	cmp	r5, r4
 80018e6:	41a4      	sbcs	r4, r4
 80018e8:	4693      	mov	fp, r2
 80018ea:	4264      	negs	r4, r4
 80018ec:	46a4      	mov	ip, r4
 80018ee:	44c3      	add	fp, r8
 80018f0:	44dc      	add	ip, fp
 80018f2:	428f      	cmp	r7, r1
 80018f4:	41bf      	sbcs	r7, r7
 80018f6:	4598      	cmp	r8, r3
 80018f8:	419b      	sbcs	r3, r3
 80018fa:	4593      	cmp	fp, r2
 80018fc:	4192      	sbcs	r2, r2
 80018fe:	45a4      	cmp	ip, r4
 8001900:	41a4      	sbcs	r4, r4
 8001902:	425b      	negs	r3, r3
 8001904:	427f      	negs	r7, r7
 8001906:	431f      	orrs	r7, r3
 8001908:	0c36      	lsrs	r6, r6, #16
 800190a:	4252      	negs	r2, r2
 800190c:	4264      	negs	r4, r4
 800190e:	19bf      	adds	r7, r7, r6
 8001910:	4322      	orrs	r2, r4
 8001912:	18bf      	adds	r7, r7, r2
 8001914:	4662      	mov	r2, ip
 8001916:	1838      	adds	r0, r7, r0
 8001918:	0243      	lsls	r3, r0, #9
 800191a:	0dd2      	lsrs	r2, r2, #23
 800191c:	9903      	ldr	r1, [sp, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	026a      	lsls	r2, r5, #9
 8001922:	430a      	orrs	r2, r1
 8001924:	1e50      	subs	r0, r2, #1
 8001926:	4182      	sbcs	r2, r0
 8001928:	4661      	mov	r1, ip
 800192a:	0ded      	lsrs	r5, r5, #23
 800192c:	432a      	orrs	r2, r5
 800192e:	024e      	lsls	r6, r1, #9
 8001930:	4332      	orrs	r2, r6
 8001932:	01d9      	lsls	r1, r3, #7
 8001934:	d400      	bmi.n	8001938 <__aeabi_dmul+0x31c>
 8001936:	e0b3      	b.n	8001aa0 <__aeabi_dmul+0x484>
 8001938:	2601      	movs	r6, #1
 800193a:	0850      	lsrs	r0, r2, #1
 800193c:	4032      	ands	r2, r6
 800193e:	4302      	orrs	r2, r0
 8001940:	07de      	lsls	r6, r3, #31
 8001942:	4332      	orrs	r2, r6
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	4c22      	ldr	r4, [pc, #136]	; (80019d0 <__aeabi_dmul+0x3b4>)
 8001948:	4454      	add	r4, sl
 800194a:	2c00      	cmp	r4, #0
 800194c:	dd62      	ble.n	8001a14 <__aeabi_dmul+0x3f8>
 800194e:	0751      	lsls	r1, r2, #29
 8001950:	d009      	beq.n	8001966 <__aeabi_dmul+0x34a>
 8001952:	200f      	movs	r0, #15
 8001954:	4010      	ands	r0, r2
 8001956:	2804      	cmp	r0, #4
 8001958:	d005      	beq.n	8001966 <__aeabi_dmul+0x34a>
 800195a:	1d10      	adds	r0, r2, #4
 800195c:	4290      	cmp	r0, r2
 800195e:	4192      	sbcs	r2, r2
 8001960:	4252      	negs	r2, r2
 8001962:	189b      	adds	r3, r3, r2
 8001964:	0002      	movs	r2, r0
 8001966:	01d9      	lsls	r1, r3, #7
 8001968:	d504      	bpl.n	8001974 <__aeabi_dmul+0x358>
 800196a:	2480      	movs	r4, #128	; 0x80
 800196c:	4819      	ldr	r0, [pc, #100]	; (80019d4 <__aeabi_dmul+0x3b8>)
 800196e:	00e4      	lsls	r4, r4, #3
 8001970:	4003      	ands	r3, r0
 8001972:	4454      	add	r4, sl
 8001974:	4818      	ldr	r0, [pc, #96]	; (80019d8 <__aeabi_dmul+0x3bc>)
 8001976:	4284      	cmp	r4, r0
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x360>
 800197a:	e727      	b.n	80017cc <__aeabi_dmul+0x1b0>
 800197c:	075e      	lsls	r6, r3, #29
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	08d2      	lsrs	r2, r2, #3
 8001982:	0b1f      	lsrs	r7, r3, #12
 8001984:	0563      	lsls	r3, r4, #21
 8001986:	4316      	orrs	r6, r2
 8001988:	0d5b      	lsrs	r3, r3, #21
 800198a:	e6b2      	b.n	80016f2 <__aeabi_dmul+0xd6>
 800198c:	2300      	movs	r3, #0
 800198e:	4699      	mov	r9, r3
 8001990:	3301      	adds	r3, #1
 8001992:	2704      	movs	r7, #4
 8001994:	2600      	movs	r6, #0
 8001996:	469b      	mov	fp, r3
 8001998:	e664      	b.n	8001664 <__aeabi_dmul+0x48>
 800199a:	2303      	movs	r3, #3
 800199c:	9701      	str	r7, [sp, #4]
 800199e:	4681      	mov	r9, r0
 80019a0:	270c      	movs	r7, #12
 80019a2:	469b      	mov	fp, r3
 80019a4:	e65e      	b.n	8001664 <__aeabi_dmul+0x48>
 80019a6:	2201      	movs	r2, #1
 80019a8:	2001      	movs	r0, #1
 80019aa:	4317      	orrs	r7, r2
 80019ac:	2200      	movs	r2, #0
 80019ae:	e676      	b.n	800169e <__aeabi_dmul+0x82>
 80019b0:	2303      	movs	r3, #3
 80019b2:	2003      	movs	r0, #3
 80019b4:	431f      	orrs	r7, r3
 80019b6:	4643      	mov	r3, r8
 80019b8:	e671      	b.n	800169e <__aeabi_dmul+0x82>
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	000007ff 	.word	0x000007ff
 80019c0:	fffffc01 	.word	0xfffffc01
 80019c4:	08005fc4 	.word	0x08005fc4
 80019c8:	800fffff 	.word	0x800fffff
 80019cc:	fffffc0d 	.word	0xfffffc0d
 80019d0:	000003ff 	.word	0x000003ff
 80019d4:	feffffff 	.word	0xfeffffff
 80019d8:	000007fe 	.word	0x000007fe
 80019dc:	2300      	movs	r3, #0
 80019de:	2780      	movs	r7, #128	; 0x80
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	033f      	lsls	r7, r7, #12
 80019e4:	2600      	movs	r6, #0
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <__aeabi_dmul+0x4d8>)
 80019e8:	e683      	b.n	80016f2 <__aeabi_dmul+0xd6>
 80019ea:	9b01      	ldr	r3, [sp, #4]
 80019ec:	0032      	movs	r2, r6
 80019ee:	46a4      	mov	ip, r4
 80019f0:	4658      	mov	r0, fp
 80019f2:	e670      	b.n	80016d6 <__aeabi_dmul+0xba>
 80019f4:	46ac      	mov	ip, r5
 80019f6:	e66e      	b.n	80016d6 <__aeabi_dmul+0xba>
 80019f8:	2780      	movs	r7, #128	; 0x80
 80019fa:	9901      	ldr	r1, [sp, #4]
 80019fc:	033f      	lsls	r7, r7, #12
 80019fe:	4239      	tst	r1, r7
 8001a00:	d02d      	beq.n	8001a5e <__aeabi_dmul+0x442>
 8001a02:	423b      	tst	r3, r7
 8001a04:	d12b      	bne.n	8001a5e <__aeabi_dmul+0x442>
 8001a06:	431f      	orrs	r7, r3
 8001a08:	033f      	lsls	r7, r7, #12
 8001a0a:	0b3f      	lsrs	r7, r7, #12
 8001a0c:	9500      	str	r5, [sp, #0]
 8001a0e:	0016      	movs	r6, r2
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <__aeabi_dmul+0x4d8>)
 8001a12:	e66e      	b.n	80016f2 <__aeabi_dmul+0xd6>
 8001a14:	2501      	movs	r5, #1
 8001a16:	1b2d      	subs	r5, r5, r4
 8001a18:	2d38      	cmp	r5, #56	; 0x38
 8001a1a:	dd00      	ble.n	8001a1e <__aeabi_dmul+0x402>
 8001a1c:	e666      	b.n	80016ec <__aeabi_dmul+0xd0>
 8001a1e:	2d1f      	cmp	r5, #31
 8001a20:	dc40      	bgt.n	8001aa4 <__aeabi_dmul+0x488>
 8001a22:	4835      	ldr	r0, [pc, #212]	; (8001af8 <__aeabi_dmul+0x4dc>)
 8001a24:	001c      	movs	r4, r3
 8001a26:	4450      	add	r0, sl
 8001a28:	0016      	movs	r6, r2
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	4084      	lsls	r4, r0
 8001a2e:	40ee      	lsrs	r6, r5
 8001a30:	1e50      	subs	r0, r2, #1
 8001a32:	4182      	sbcs	r2, r0
 8001a34:	4334      	orrs	r4, r6
 8001a36:	4314      	orrs	r4, r2
 8001a38:	40eb      	lsrs	r3, r5
 8001a3a:	0762      	lsls	r2, r4, #29
 8001a3c:	d009      	beq.n	8001a52 <__aeabi_dmul+0x436>
 8001a3e:	220f      	movs	r2, #15
 8001a40:	4022      	ands	r2, r4
 8001a42:	2a04      	cmp	r2, #4
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dmul+0x436>
 8001a46:	0022      	movs	r2, r4
 8001a48:	1d14      	adds	r4, r2, #4
 8001a4a:	4294      	cmp	r4, r2
 8001a4c:	4180      	sbcs	r0, r0
 8001a4e:	4240      	negs	r0, r0
 8001a50:	181b      	adds	r3, r3, r0
 8001a52:	021a      	lsls	r2, r3, #8
 8001a54:	d53e      	bpl.n	8001ad4 <__aeabi_dmul+0x4b8>
 8001a56:	2301      	movs	r3, #1
 8001a58:	2700      	movs	r7, #0
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	e649      	b.n	80016f2 <__aeabi_dmul+0xd6>
 8001a5e:	2780      	movs	r7, #128	; 0x80
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	033f      	lsls	r7, r7, #12
 8001a64:	431f      	orrs	r7, r3
 8001a66:	033f      	lsls	r7, r7, #12
 8001a68:	0b3f      	lsrs	r7, r7, #12
 8001a6a:	9400      	str	r4, [sp, #0]
 8001a6c:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <__aeabi_dmul+0x4d8>)
 8001a6e:	e640      	b.n	80016f2 <__aeabi_dmul+0xd6>
 8001a70:	0003      	movs	r3, r0
 8001a72:	465a      	mov	r2, fp
 8001a74:	3b28      	subs	r3, #40	; 0x28
 8001a76:	409a      	lsls	r2, r3
 8001a78:	2600      	movs	r6, #0
 8001a7a:	9201      	str	r2, [sp, #4]
 8001a7c:	e66d      	b.n	800175a <__aeabi_dmul+0x13e>
 8001a7e:	4658      	mov	r0, fp
 8001a80:	f000 f94e 	bl	8001d20 <__clzsi2>
 8001a84:	3020      	adds	r0, #32
 8001a86:	e657      	b.n	8001738 <__aeabi_dmul+0x11c>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	4652      	mov	r2, sl
 8001a8c:	3b28      	subs	r3, #40	; 0x28
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	e693      	b.n	80017be <__aeabi_dmul+0x1a2>
 8001a96:	4650      	mov	r0, sl
 8001a98:	f000 f942 	bl	8001d20 <__clzsi2>
 8001a9c:	3020      	adds	r0, #32
 8001a9e:	e67b      	b.n	8001798 <__aeabi_dmul+0x17c>
 8001aa0:	46ca      	mov	sl, r9
 8001aa2:	e750      	b.n	8001946 <__aeabi_dmul+0x32a>
 8001aa4:	201f      	movs	r0, #31
 8001aa6:	001e      	movs	r6, r3
 8001aa8:	4240      	negs	r0, r0
 8001aaa:	1b04      	subs	r4, r0, r4
 8001aac:	40e6      	lsrs	r6, r4
 8001aae:	2d20      	cmp	r5, #32
 8001ab0:	d003      	beq.n	8001aba <__aeabi_dmul+0x49e>
 8001ab2:	4c12      	ldr	r4, [pc, #72]	; (8001afc <__aeabi_dmul+0x4e0>)
 8001ab4:	4454      	add	r4, sl
 8001ab6:	40a3      	lsls	r3, r4
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	1e50      	subs	r0, r2, #1
 8001abc:	4182      	sbcs	r2, r0
 8001abe:	4332      	orrs	r2, r6
 8001ac0:	2607      	movs	r6, #7
 8001ac2:	2700      	movs	r7, #0
 8001ac4:	4016      	ands	r6, r2
 8001ac6:	d009      	beq.n	8001adc <__aeabi_dmul+0x4c0>
 8001ac8:	200f      	movs	r0, #15
 8001aca:	2300      	movs	r3, #0
 8001acc:	4010      	ands	r0, r2
 8001ace:	0014      	movs	r4, r2
 8001ad0:	2804      	cmp	r0, #4
 8001ad2:	d1b9      	bne.n	8001a48 <__aeabi_dmul+0x42c>
 8001ad4:	0022      	movs	r2, r4
 8001ad6:	075e      	lsls	r6, r3, #29
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	0b1f      	lsrs	r7, r3, #12
 8001adc:	08d2      	lsrs	r2, r2, #3
 8001ade:	4316      	orrs	r6, r2
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e606      	b.n	80016f2 <__aeabi_dmul+0xd6>
 8001ae4:	2780      	movs	r7, #128	; 0x80
 8001ae6:	033f      	lsls	r7, r7, #12
 8001ae8:	431f      	orrs	r7, r3
 8001aea:	033f      	lsls	r7, r7, #12
 8001aec:	0b3f      	lsrs	r7, r7, #12
 8001aee:	0016      	movs	r6, r2
 8001af0:	4b00      	ldr	r3, [pc, #0]	; (8001af4 <__aeabi_dmul+0x4d8>)
 8001af2:	e5fe      	b.n	80016f2 <__aeabi_dmul+0xd6>
 8001af4:	000007ff 	.word	0x000007ff
 8001af8:	0000041e 	.word	0x0000041e
 8001afc:	0000043e 	.word	0x0000043e

08001b00 <__aeabi_i2d>:
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d02d      	beq.n	8001b62 <__aeabi_i2d+0x62>
 8001b06:	17c3      	asrs	r3, r0, #31
 8001b08:	18c5      	adds	r5, r0, r3
 8001b0a:	405d      	eors	r5, r3
 8001b0c:	0fc4      	lsrs	r4, r0, #31
 8001b0e:	0028      	movs	r0, r5
 8001b10:	f000 f906 	bl	8001d20 <__clzsi2>
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <__aeabi_i2d+0x6c>)
 8001b16:	1a1b      	subs	r3, r3, r0
 8001b18:	055b      	lsls	r3, r3, #21
 8001b1a:	0d5b      	lsrs	r3, r3, #21
 8001b1c:	280a      	cmp	r0, #10
 8001b1e:	dd15      	ble.n	8001b4c <__aeabi_i2d+0x4c>
 8001b20:	380b      	subs	r0, #11
 8001b22:	4085      	lsls	r5, r0
 8001b24:	2200      	movs	r2, #0
 8001b26:	032d      	lsls	r5, r5, #12
 8001b28:	0b2d      	lsrs	r5, r5, #12
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	032d      	lsls	r5, r5, #12
 8001b30:	0d0a      	lsrs	r2, r1, #20
 8001b32:	0b2d      	lsrs	r5, r5, #12
 8001b34:	0512      	lsls	r2, r2, #20
 8001b36:	432a      	orrs	r2, r5
 8001b38:	4d0d      	ldr	r5, [pc, #52]	; (8001b70 <__aeabi_i2d+0x70>)
 8001b3a:	051b      	lsls	r3, r3, #20
 8001b3c:	402a      	ands	r2, r5
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	07e4      	lsls	r4, r4, #31
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	4323      	orrs	r3, r4
 8001b48:	0019      	movs	r1, r3
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	0029      	movs	r1, r5
 8001b50:	3215      	adds	r2, #21
 8001b52:	4091      	lsls	r1, r2
 8001b54:	000a      	movs	r2, r1
 8001b56:	210b      	movs	r1, #11
 8001b58:	1a08      	subs	r0, r1, r0
 8001b5a:	40c5      	lsrs	r5, r0
 8001b5c:	032d      	lsls	r5, r5, #12
 8001b5e:	0b2d      	lsrs	r5, r5, #12
 8001b60:	e7e3      	b.n	8001b2a <__aeabi_i2d+0x2a>
 8001b62:	2400      	movs	r4, #0
 8001b64:	2300      	movs	r3, #0
 8001b66:	2500      	movs	r5, #0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	e7de      	b.n	8001b2a <__aeabi_i2d+0x2a>
 8001b6c:	0000041e 	.word	0x0000041e
 8001b70:	800fffff 	.word	0x800fffff

08001b74 <__aeabi_f2d>:
 8001b74:	0041      	lsls	r1, r0, #1
 8001b76:	0e09      	lsrs	r1, r1, #24
 8001b78:	1c4b      	adds	r3, r1, #1
 8001b7a:	b570      	push	{r4, r5, r6, lr}
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	0246      	lsls	r6, r0, #9
 8001b80:	0a75      	lsrs	r5, r6, #9
 8001b82:	0fc4      	lsrs	r4, r0, #31
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	dd14      	ble.n	8001bb2 <__aeabi_f2d+0x3e>
 8001b88:	23e0      	movs	r3, #224	; 0xe0
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	076d      	lsls	r5, r5, #29
 8001b8e:	0b36      	lsrs	r6, r6, #12
 8001b90:	18cb      	adds	r3, r1, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	0d0a      	lsrs	r2, r1, #20
 8001b96:	0028      	movs	r0, r5
 8001b98:	0512      	lsls	r2, r2, #20
 8001b9a:	4d1c      	ldr	r5, [pc, #112]	; (8001c0c <__aeabi_f2d+0x98>)
 8001b9c:	4332      	orrs	r2, r6
 8001b9e:	055b      	lsls	r3, r3, #21
 8001ba0:	402a      	ands	r2, r5
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	07e4      	lsls	r4, r4, #31
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	4323      	orrs	r3, r4
 8001bae:	0019      	movs	r1, r3
 8001bb0:	bd70      	pop	{r4, r5, r6, pc}
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d114      	bne.n	8001be0 <__aeabi_f2d+0x6c>
 8001bb6:	2d00      	cmp	r5, #0
 8001bb8:	d01e      	beq.n	8001bf8 <__aeabi_f2d+0x84>
 8001bba:	0028      	movs	r0, r5
 8001bbc:	f000 f8b0 	bl	8001d20 <__clzsi2>
 8001bc0:	280a      	cmp	r0, #10
 8001bc2:	dc1c      	bgt.n	8001bfe <__aeabi_f2d+0x8a>
 8001bc4:	230b      	movs	r3, #11
 8001bc6:	002a      	movs	r2, r5
 8001bc8:	1a1b      	subs	r3, r3, r0
 8001bca:	40da      	lsrs	r2, r3
 8001bcc:	0003      	movs	r3, r0
 8001bce:	3315      	adds	r3, #21
 8001bd0:	409d      	lsls	r5, r3
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <__aeabi_f2d+0x9c>)
 8001bd4:	0312      	lsls	r2, r2, #12
 8001bd6:	1a1b      	subs	r3, r3, r0
 8001bd8:	055b      	lsls	r3, r3, #21
 8001bda:	0b16      	lsrs	r6, r2, #12
 8001bdc:	0d5b      	lsrs	r3, r3, #21
 8001bde:	e7d8      	b.n	8001b92 <__aeabi_f2d+0x1e>
 8001be0:	2d00      	cmp	r5, #0
 8001be2:	d006      	beq.n	8001bf2 <__aeabi_f2d+0x7e>
 8001be4:	0b32      	lsrs	r2, r6, #12
 8001be6:	2680      	movs	r6, #128	; 0x80
 8001be8:	0336      	lsls	r6, r6, #12
 8001bea:	076d      	lsls	r5, r5, #29
 8001bec:	4316      	orrs	r6, r2
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <__aeabi_f2d+0xa0>)
 8001bf0:	e7cf      	b.n	8001b92 <__aeabi_f2d+0x1e>
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <__aeabi_f2d+0xa0>)
 8001bf4:	2600      	movs	r6, #0
 8001bf6:	e7cc      	b.n	8001b92 <__aeabi_f2d+0x1e>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	2600      	movs	r6, #0
 8001bfc:	e7c9      	b.n	8001b92 <__aeabi_f2d+0x1e>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	002a      	movs	r2, r5
 8001c02:	3b0b      	subs	r3, #11
 8001c04:	409a      	lsls	r2, r3
 8001c06:	2500      	movs	r5, #0
 8001c08:	e7e3      	b.n	8001bd2 <__aeabi_f2d+0x5e>
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	800fffff 	.word	0x800fffff
 8001c10:	00000389 	.word	0x00000389
 8001c14:	000007ff 	.word	0x000007ff

08001c18 <__aeabi_d2f>:
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	004c      	lsls	r4, r1, #1
 8001c1c:	0d64      	lsrs	r4, r4, #21
 8001c1e:	030b      	lsls	r3, r1, #12
 8001c20:	1c62      	adds	r2, r4, #1
 8001c22:	0a5b      	lsrs	r3, r3, #9
 8001c24:	0f46      	lsrs	r6, r0, #29
 8001c26:	0552      	lsls	r2, r2, #21
 8001c28:	0fc9      	lsrs	r1, r1, #31
 8001c2a:	431e      	orrs	r6, r3
 8001c2c:	00c5      	lsls	r5, r0, #3
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	2a01      	cmp	r2, #1
 8001c32:	dd29      	ble.n	8001c88 <__aeabi_d2f+0x70>
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <__aeabi_d2f+0xfc>)
 8001c36:	18e7      	adds	r7, r4, r3
 8001c38:	2ffe      	cmp	r7, #254	; 0xfe
 8001c3a:	dc1c      	bgt.n	8001c76 <__aeabi_d2f+0x5e>
 8001c3c:	2f00      	cmp	r7, #0
 8001c3e:	dd3b      	ble.n	8001cb8 <__aeabi_d2f+0xa0>
 8001c40:	0180      	lsls	r0, r0, #6
 8001c42:	1e43      	subs	r3, r0, #1
 8001c44:	4198      	sbcs	r0, r3
 8001c46:	2207      	movs	r2, #7
 8001c48:	00f3      	lsls	r3, r6, #3
 8001c4a:	0f6d      	lsrs	r5, r5, #29
 8001c4c:	4303      	orrs	r3, r0
 8001c4e:	432b      	orrs	r3, r5
 8001c50:	401a      	ands	r2, r3
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d004      	beq.n	8001c60 <__aeabi_d2f+0x48>
 8001c56:	220f      	movs	r2, #15
 8001c58:	401a      	ands	r2, r3
 8001c5a:	2a04      	cmp	r2, #4
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_d2f+0x48>
 8001c5e:	3304      	adds	r3, #4
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	04d2      	lsls	r2, r2, #19
 8001c64:	401a      	ands	r2, r3
 8001c66:	d024      	beq.n	8001cb2 <__aeabi_d2f+0x9a>
 8001c68:	3701      	adds	r7, #1
 8001c6a:	b2fa      	uxtb	r2, r7
 8001c6c:	2fff      	cmp	r7, #255	; 0xff
 8001c6e:	d002      	beq.n	8001c76 <__aeabi_d2f+0x5e>
 8001c70:	019b      	lsls	r3, r3, #6
 8001c72:	0a58      	lsrs	r0, r3, #9
 8001c74:	e001      	b.n	8001c7a <__aeabi_d2f+0x62>
 8001c76:	22ff      	movs	r2, #255	; 0xff
 8001c78:	2000      	movs	r0, #0
 8001c7a:	0240      	lsls	r0, r0, #9
 8001c7c:	05d2      	lsls	r2, r2, #23
 8001c7e:	0a40      	lsrs	r0, r0, #9
 8001c80:	07c9      	lsls	r1, r1, #31
 8001c82:	4310      	orrs	r0, r2
 8001c84:	4308      	orrs	r0, r1
 8001c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c88:	4335      	orrs	r5, r6
 8001c8a:	2c00      	cmp	r4, #0
 8001c8c:	d104      	bne.n	8001c98 <__aeabi_d2f+0x80>
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d10a      	bne.n	8001ca8 <__aeabi_d2f+0x90>
 8001c92:	2200      	movs	r2, #0
 8001c94:	2000      	movs	r0, #0
 8001c96:	e7f0      	b.n	8001c7a <__aeabi_d2f+0x62>
 8001c98:	2d00      	cmp	r5, #0
 8001c9a:	d0ec      	beq.n	8001c76 <__aeabi_d2f+0x5e>
 8001c9c:	2080      	movs	r0, #128	; 0x80
 8001c9e:	03c0      	lsls	r0, r0, #15
 8001ca0:	4330      	orrs	r0, r6
 8001ca2:	22ff      	movs	r2, #255	; 0xff
 8001ca4:	e7e9      	b.n	8001c7a <__aeabi_d2f+0x62>
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	2300      	movs	r3, #0
 8001caa:	025b      	lsls	r3, r3, #9
 8001cac:	0a58      	lsrs	r0, r3, #9
 8001cae:	b2e2      	uxtb	r2, r4
 8001cb0:	e7e3      	b.n	8001c7a <__aeabi_d2f+0x62>
 8001cb2:	08db      	lsrs	r3, r3, #3
 8001cb4:	003c      	movs	r4, r7
 8001cb6:	e7f8      	b.n	8001caa <__aeabi_d2f+0x92>
 8001cb8:	003b      	movs	r3, r7
 8001cba:	3317      	adds	r3, #23
 8001cbc:	dbf3      	blt.n	8001ca6 <__aeabi_d2f+0x8e>
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	4333      	orrs	r3, r6
 8001cc4:	261e      	movs	r6, #30
 8001cc6:	1bf6      	subs	r6, r6, r7
 8001cc8:	2e1f      	cmp	r6, #31
 8001cca:	dd14      	ble.n	8001cf6 <__aeabi_d2f+0xde>
 8001ccc:	2202      	movs	r2, #2
 8001cce:	4252      	negs	r2, r2
 8001cd0:	1bd7      	subs	r7, r2, r7
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	40fa      	lsrs	r2, r7
 8001cd6:	0017      	movs	r7, r2
 8001cd8:	2e20      	cmp	r6, #32
 8001cda:	d004      	beq.n	8001ce6 <__aeabi_d2f+0xce>
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <__aeabi_d2f+0x100>)
 8001cde:	4694      	mov	ip, r2
 8001ce0:	4464      	add	r4, ip
 8001ce2:	40a3      	lsls	r3, r4
 8001ce4:	431d      	orrs	r5, r3
 8001ce6:	002b      	movs	r3, r5
 8001ce8:	1e5d      	subs	r5, r3, #1
 8001cea:	41ab      	sbcs	r3, r5
 8001cec:	2207      	movs	r2, #7
 8001cee:	433b      	orrs	r3, r7
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	2700      	movs	r7, #0
 8001cf4:	e7ad      	b.n	8001c52 <__aeabi_d2f+0x3a>
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <__aeabi_d2f+0x104>)
 8001cf8:	0028      	movs	r0, r5
 8001cfa:	18a2      	adds	r2, r4, r2
 8001cfc:	4095      	lsls	r5, r2
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	1e6c      	subs	r4, r5, #1
 8001d02:	41a5      	sbcs	r5, r4
 8001d04:	40f0      	lsrs	r0, r6
 8001d06:	2207      	movs	r2, #7
 8001d08:	432b      	orrs	r3, r5
 8001d0a:	4303      	orrs	r3, r0
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	2700      	movs	r7, #0
 8001d10:	e79f      	b.n	8001c52 <__aeabi_d2f+0x3a>
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	fffffc80 	.word	0xfffffc80
 8001d18:	fffffca2 	.word	0xfffffca2
 8001d1c:	fffffc82 	.word	0xfffffc82

08001d20 <__clzsi2>:
 8001d20:	211c      	movs	r1, #28
 8001d22:	2301      	movs	r3, #1
 8001d24:	041b      	lsls	r3, r3, #16
 8001d26:	4298      	cmp	r0, r3
 8001d28:	d301      	bcc.n	8001d2e <__clzsi2+0xe>
 8001d2a:	0c00      	lsrs	r0, r0, #16
 8001d2c:	3910      	subs	r1, #16
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	4298      	cmp	r0, r3
 8001d32:	d301      	bcc.n	8001d38 <__clzsi2+0x18>
 8001d34:	0a00      	lsrs	r0, r0, #8
 8001d36:	3908      	subs	r1, #8
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	d301      	bcc.n	8001d42 <__clzsi2+0x22>
 8001d3e:	0900      	lsrs	r0, r0, #4
 8001d40:	3904      	subs	r1, #4
 8001d42:	a202      	add	r2, pc, #8	; (adr r2, 8001d4c <__clzsi2+0x2c>)
 8001d44:	5c10      	ldrb	r0, [r2, r0]
 8001d46:	1840      	adds	r0, r0, r1
 8001d48:	4770      	bx	lr
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	02020304 	.word	0x02020304
 8001d50:	01010101 	.word	0x01010101
	...

08001d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d62:	f001 fcb3 	bl	80036cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d66:	f000 f8a1 	bl	8001eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6a:	f000 fa11 	bl	8002190 <MX_GPIO_Init>
  MX_ADC_Init();
 8001d6e:	f000 f905 	bl	8001f7c <MX_ADC_Init>
  MX_SPI1_Init();
 8001d72:	f000 f99f 	bl	80020b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d76:	f000 f9db 	bl	8002130 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TFT9341_ini(240, 320);
 8001d7a:	23a0      	movs	r3, #160	; 0xa0
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	0019      	movs	r1, r3
 8001d80:	20f0      	movs	r0, #240	; 0xf0
 8001d82:	f000 fb0f 	bl	80023a4 <TFT9341_ini>
  TFT9341_Clear();
 8001d86:	f001 f86b 	bl	8002e60 <TFT9341_Clear>

  float number=0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  while (1)
  {

	//HAL_Delay();

	digital_val = r_single_ext_channel_ADC(VOLTAGE);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f000 fabe 	bl	8002310 <r_single_ext_channel_ADC>
 8001d94:	0002      	movs	r2, r0
 8001d96:	1cbb      	adds	r3, r7, #2
 8001d98:	801a      	strh	r2, [r3, #0]
	number = ADC_POINT * (digital_val);
 8001d9a:	1cbb      	adds	r3, r7, #2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7ff feae 	bl	8001b00 <__aeabi_i2d>
 8001da4:	4a37      	ldr	r2, [pc, #220]	; (8001e84 <main+0x128>)
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <main+0x12c>)
 8001da8:	f7ff fc38 	bl	800161c <__aeabi_dmul>
 8001dac:	0003      	movs	r3, r0
 8001dae:	000c      	movs	r4, r1
 8001db0:	0018      	movs	r0, r3
 8001db2:	0021      	movs	r1, r4
 8001db4:	f7ff ff30 	bl	8001c18 <__aeabi_d2f>
 8001db8:	1c03      	adds	r3, r0, #0
 8001dba:	607b      	str	r3, [r7, #4]
	number = (number * 20.8);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fed9 	bl	8001b74 <__aeabi_f2d>
 8001dc2:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <main+0x130>)
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <main+0x134>)
 8001dc6:	f7ff fc29 	bl	800161c <__aeabi_dmul>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	000c      	movs	r4, r1
 8001dce:	0018      	movs	r0, r3
 8001dd0:	0021      	movs	r1, r4
 8001dd2:	f7ff ff21 	bl	8001c18 <__aeabi_d2f>
 8001dd6:	1c03      	adds	r3, r0, #0
 8001dd8:	607b      	str	r3, [r7, #4]
	TFT9341_Draw_U(number);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	1c18      	adds	r0, r3, #0
 8001dde:	f001 f997 	bl	8003110 <TFT9341_Draw_U>

	digital_val = r_single_ext_channel_ADC(CURRENT);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 fa94 	bl	8002310 <r_single_ext_channel_ADC>
 8001de8:	0002      	movs	r2, r0
 8001dea:	1cbb      	adds	r3, r7, #2
 8001dec:	801a      	strh	r2, [r3, #0]
	number = ((ADC_POINT * digital_val)/1.85)/0.386;
 8001dee:	1cbb      	adds	r3, r7, #2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff fe84 	bl	8001b00 <__aeabi_i2d>
 8001df8:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <main+0x128>)
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <main+0x12c>)
 8001dfc:	f7ff fc0e 	bl	800161c <__aeabi_dmul>
 8001e00:	0003      	movs	r3, r0
 8001e02:	000c      	movs	r4, r1
 8001e04:	0018      	movs	r0, r3
 8001e06:	0021      	movs	r1, r4
 8001e08:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <main+0x138>)
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <main+0x13c>)
 8001e0c:	f7ff f904 	bl	8001018 <__aeabi_ddiv>
 8001e10:	0003      	movs	r3, r0
 8001e12:	000c      	movs	r4, r1
 8001e14:	0018      	movs	r0, r3
 8001e16:	0021      	movs	r1, r4
 8001e18:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <main+0x140>)
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <main+0x144>)
 8001e1c:	f7ff f8fc 	bl	8001018 <__aeabi_ddiv>
 8001e20:	0003      	movs	r3, r0
 8001e22:	000c      	movs	r4, r1
 8001e24:	0018      	movs	r0, r3
 8001e26:	0021      	movs	r1, r4
 8001e28:	f7ff fef6 	bl	8001c18 <__aeabi_d2f>
 8001e2c:	1c03      	adds	r3, r0, #0
 8001e2e:	607b      	str	r3, [r7, #4]
	TFT9341_Draw_I(number);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1c18      	adds	r0, r3, #0
 8001e34:	f001 fa30 	bl	8003298 <TFT9341_Draw_I>

	digital_val = r_single_ext_channel_ADC(TEMPERATURE);
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f000 fa69 	bl	8002310 <r_single_ext_channel_ADC>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	1cbb      	adds	r3, r7, #2
 8001e42:	801a      	strh	r2, [r3, #0]
	if(digital_val>1682)
 8001e44:	1cbb      	adds	r3, r7, #2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <main+0x148>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d90f      	bls.n	8001e6e <main+0x112>
		number = (digital_val-1682)/93;
 8001e4e:	1cbb      	adds	r3, r7, #2
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <main+0x14c>)
 8001e54:	4694      	mov	ip, r2
 8001e56:	4463      	add	r3, ip
 8001e58:	215d      	movs	r1, #93	; 0x5d
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe f9de 	bl	800021c <__divsi3>
 8001e60:	0003      	movs	r3, r0
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff f88e 	bl	8000f84 <__aeabi_i2f>
 8001e68:	1c03      	adds	r3, r0, #0
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	e001      	b.n	8001e72 <main+0x116>
	else
		number = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
	TFT9341_Draw_Temp_Line((uint8_t )number);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe faf8 	bl	8000468 <__aeabi_f2uiz>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 ff95 	bl	8002dac <TFT9341_Draw_Temp_Line>
  {
 8001e82:	e784      	b.n	8001d8e <main+0x32>
 8001e84:	66666666 	.word	0x66666666
 8001e88:	3f4a6666 	.word	0x3f4a6666
 8001e8c:	cccccccd 	.word	0xcccccccd
 8001e90:	4034cccc 	.word	0x4034cccc
 8001e94:	9999999a 	.word	0x9999999a
 8001e98:	3ffd9999 	.word	0x3ffd9999
 8001e9c:	5810624e 	.word	0x5810624e
 8001ea0:	3fd8b439 	.word	0x3fd8b439
 8001ea4:	00000692 	.word	0x00000692
 8001ea8:	fffff96e 	.word	0xfffff96e

08001eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b095      	sub	sp, #84	; 0x54
 8001eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb2:	2420      	movs	r4, #32
 8001eb4:	193b      	adds	r3, r7, r4
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	2330      	movs	r3, #48	; 0x30
 8001eba:	001a      	movs	r2, r3
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f003 fff7 	bl	8005eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec2:	2310      	movs	r3, #16
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	2310      	movs	r3, #16
 8001eca:	001a      	movs	r2, r3
 8001ecc:	2100      	movs	r1, #0
 8001ece:	f003 ffef 	bl	8005eb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed2:	003b      	movs	r3, r7
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	2310      	movs	r3, #16
 8001ed8:	001a      	movs	r2, r3
 8001eda:	2100      	movs	r1, #0
 8001edc:	f003 ffe8 	bl	8005eb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001ee0:	0021      	movs	r1, r4
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	2212      	movs	r2, #18
 8001ee6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2201      	movs	r2, #1
 8001eec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2210      	movs	r2, #16
 8001efe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2202      	movs	r2, #2
 8001f04:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	22a0      	movs	r2, #160	; 0xa0
 8001f10:	0392      	lsls	r2, r2, #14
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	2200      	movs	r2, #0
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f002 fbcf 	bl	80046c0 <HAL_RCC_OscConfig>
 8001f22:	1e03      	subs	r3, r0, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001f26:	f000 fa21 	bl	800236c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	2207      	movs	r2, #7
 8001f30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f32:	187b      	adds	r3, r7, r1
 8001f34:	2202      	movs	r2, #2
 8001f36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2101      	movs	r1, #1
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f002 fed5 	bl	8004cf8 <HAL_RCC_ClockConfig>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001f52:	f000 fa0b 	bl	800236c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f56:	003b      	movs	r3, r7
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001f5c:	003b      	movs	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f62:	003b      	movs	r3, r7
 8001f64:	0018      	movs	r0, r3
 8001f66:	f003 f819 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d001      	beq.n	8001f72 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f6e:	f000 f9fd 	bl	800236c <Error_Handler>
  }
}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b015      	add	sp, #84	; 0x54
 8001f78:	bd90      	pop	{r4, r7, pc}
	...

08001f7c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	0018      	movs	r0, r3
 8001f86:	230c      	movs	r3, #12
 8001f88:	001a      	movs	r2, r3
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	f003 ff90 	bl	8005eb0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001f90:	4b46      	ldr	r3, [pc, #280]	; (80020ac <MX_ADC_Init+0x130>)
 8001f92:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <MX_ADC_Init+0x134>)
 8001f94:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f96:	4b45      	ldr	r3, [pc, #276]	; (80020ac <MX_ADC_Init+0x130>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f9c:	4b43      	ldr	r3, [pc, #268]	; (80020ac <MX_ADC_Init+0x130>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fa2:	4b42      	ldr	r3, [pc, #264]	; (80020ac <MX_ADC_Init+0x130>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <MX_ADC_Init+0x130>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fae:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <MX_ADC_Init+0x130>)
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001fb4:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <MX_ADC_Init+0x130>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001fba:	4b3c      	ldr	r3, [pc, #240]	; (80020ac <MX_ADC_Init+0x130>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001fc0:	4b3a      	ldr	r3, [pc, #232]	; (80020ac <MX_ADC_Init+0x130>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <MX_ADC_Init+0x130>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fcc:	4b37      	ldr	r3, [pc, #220]	; (80020ac <MX_ADC_Init+0x130>)
 8001fce:	22c2      	movs	r2, #194	; 0xc2
 8001fd0:	32ff      	adds	r2, #255	; 0xff
 8001fd2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <MX_ADC_Init+0x130>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <MX_ADC_Init+0x130>)
 8001fdc:	2224      	movs	r2, #36	; 0x24
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fe2:	4b32      	ldr	r3, [pc, #200]	; (80020ac <MX_ADC_Init+0x130>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001fe8:	4b30      	ldr	r3, [pc, #192]	; (80020ac <MX_ADC_Init+0x130>)
 8001fea:	0018      	movs	r0, r3
 8001fec:	f001 fbf4 	bl	80037d8 <HAL_ADC_Init>
 8001ff0:	1e03      	subs	r3, r0, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001ff4:	f000 f9ba 	bl	800236c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	0152      	lsls	r2, r2, #5
 8002004:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2207      	movs	r2, #7
 800200a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800200c:	1d3a      	adds	r2, r7, #4
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <MX_ADC_Init+0x130>)
 8002010:	0011      	movs	r1, r2
 8002012:	0018      	movs	r0, r3
 8002014:	f001 fe52 	bl	8003cbc <HAL_ADC_ConfigChannel>
 8002018:	1e03      	subs	r3, r0, #0
 800201a:	d001      	beq.n	8002020 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800201c:	f000 f9a6 	bl	800236c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002026:	1d3a      	adds	r2, r7, #4
 8002028:	4b20      	ldr	r3, [pc, #128]	; (80020ac <MX_ADC_Init+0x130>)
 800202a:	0011      	movs	r1, r2
 800202c:	0018      	movs	r0, r3
 800202e:	f001 fe45 	bl	8003cbc <HAL_ADC_ConfigChannel>
 8002032:	1e03      	subs	r3, r0, #0
 8002034:	d001      	beq.n	800203a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002036:	f000 f999 	bl	800236c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2203      	movs	r2, #3
 800203e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002040:	1d3a      	adds	r2, r7, #4
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_ADC_Init+0x130>)
 8002044:	0011      	movs	r1, r2
 8002046:	0018      	movs	r0, r3
 8002048:	f001 fe38 	bl	8003cbc <HAL_ADC_ConfigChannel>
 800204c:	1e03      	subs	r3, r0, #0
 800204e:	d001      	beq.n	8002054 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002050:	f000 f98c 	bl	800236c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2204      	movs	r2, #4
 8002058:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800205a:	1d3a      	adds	r2, r7, #4
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <MX_ADC_Init+0x130>)
 800205e:	0011      	movs	r1, r2
 8002060:	0018      	movs	r0, r3
 8002062:	f001 fe2b 	bl	8003cbc <HAL_ADC_ConfigChannel>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d001      	beq.n	800206e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800206a:	f000 f97f 	bl	800236c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2210      	movs	r2, #16
 8002072:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002074:	1d3a      	adds	r2, r7, #4
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <MX_ADC_Init+0x130>)
 8002078:	0011      	movs	r1, r2
 800207a:	0018      	movs	r0, r3
 800207c:	f001 fe1e 	bl	8003cbc <HAL_ADC_ConfigChannel>
 8002080:	1e03      	subs	r3, r0, #0
 8002082:	d001      	beq.n	8002088 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002084:	f000 f972 	bl	800236c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2211      	movs	r2, #17
 800208c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800208e:	1d3a      	adds	r2, r7, #4
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <MX_ADC_Init+0x130>)
 8002092:	0011      	movs	r1, r2
 8002094:	0018      	movs	r0, r3
 8002096:	f001 fe11 	bl	8003cbc <HAL_ADC_ConfigChannel>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d001      	beq.n	80020a2 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800209e:	f000 f965 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	2000010c 	.word	0x2000010c
 80020b0:	40012400 	.word	0x40012400

080020b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_SPI1_Init+0x74>)
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <MX_SPI1_Init+0x78>)
 80020bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_SPI1_Init+0x74>)
 80020c0:	2282      	movs	r2, #130	; 0x82
 80020c2:	0052      	lsls	r2, r2, #1
 80020c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_SPI1_Init+0x74>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_SPI1_Init+0x74>)
 80020ce:	22e0      	movs	r2, #224	; 0xe0
 80020d0:	00d2      	lsls	r2, r2, #3
 80020d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_SPI1_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_SPI1_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_SPI1_Init+0x74>)
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_SPI1_Init+0x74>)
 80020ea:	2208      	movs	r2, #8
 80020ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_SPI1_Init+0x74>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_SPI1_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_SPI1_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_SPI1_Init+0x74>)
 8002102:	2207      	movs	r2, #7
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_SPI1_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_SPI1_Init+0x74>)
 800210e:	2208      	movs	r2, #8
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <MX_SPI1_Init+0x74>)
 8002114:	0018      	movs	r0, r3
 8002116:	f003 f80f 	bl	8005138 <HAL_SPI_Init>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800211e:	f000 f925 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200000a8 	.word	0x200000a8
 800212c:	40013000 	.word	0x40013000

08002130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_USART1_UART_Init+0x58>)
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <MX_USART1_UART_Init+0x5c>)
 8002138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MX_USART1_UART_Init+0x58>)
 800213c:	2296      	movs	r2, #150	; 0x96
 800213e:	0212      	lsls	r2, r2, #8
 8002140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_USART1_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_USART1_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_USART1_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_USART1_UART_Init+0x58>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MX_USART1_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_USART1_UART_Init+0x58>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <MX_USART1_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_USART1_UART_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <MX_USART1_UART_Init+0x58>)
 8002174:	0018      	movs	r0, r3
 8002176:	f003 fb25 	bl	80057c4 <HAL_UART_Init>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d001      	beq.n	8002182 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800217e:	f000 f8f5 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000028 	.word	0x20000028
 800218c:	40013800 	.word	0x40013800

08002190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	240c      	movs	r4, #12
 8002198:	193b      	adds	r3, r7, r4
 800219a:	0018      	movs	r0, r3
 800219c:	2314      	movs	r3, #20
 800219e:	001a      	movs	r2, r3
 80021a0:	2100      	movs	r1, #0
 80021a2:	f003 fe85 	bl	8005eb0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <MX_GPIO_Init+0x88>)
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <MX_GPIO_Init+0x88>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0289      	lsls	r1, r1, #10
 80021b0:	430a      	orrs	r2, r1
 80021b2:	615a      	str	r2, [r3, #20]
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_GPIO_Init+0x88>)
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	029b      	lsls	r3, r3, #10
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_GPIO_Init+0x88>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_GPIO_Init+0x88>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	02c9      	lsls	r1, r1, #11
 80021cc:	430a      	orrs	r2, r1
 80021ce:	615a      	str	r2, [r3, #20]
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_GPIO_Init+0x88>)
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	02db      	lsls	r3, r3, #11
 80021d8:	4013      	ands	r3, r2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11, GPIO_PIN_RESET);
 80021de:	490f      	ldr	r1, [pc, #60]	; (800221c <MX_GPIO_Init+0x8c>)
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <MX_GPIO_Init+0x90>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	0018      	movs	r0, r3
 80021e6:	f002 fa4d 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 80021ea:	0021      	movs	r1, r4
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <MX_GPIO_Init+0x8c>)
 80021f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2201      	movs	r2, #1
 80021f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	2203      	movs	r2, #3
 8002202:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	187b      	adds	r3, r7, r1
 8002206:	4a06      	ldr	r2, [pc, #24]	; (8002220 <MX_GPIO_Init+0x90>)
 8002208:	0019      	movs	r1, r3
 800220a:	0010      	movs	r0, r2
 800220c:	f002 f8ca 	bl	80043a4 <HAL_GPIO_Init>

}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b009      	add	sp, #36	; 0x24
 8002216:	bd90      	pop	{r4, r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	00000807 	.word	0x00000807
 8002220:	48000400 	.word	0x48000400

08002224 <config_int_channel_ADC>:

/* USER CODE BEGIN 4 */
void config_int_channel_ADC(uint32_t channel, bool val)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	000a      	movs	r2, r1
 800222e:	1cfb      	adds	r3, r7, #3
 8002230:	701a      	strb	r2, [r3, #0]
  ADC_ChannelConfTypeDef sConfig;
  sConfig.Channel = channel;
 8002232:	230c      	movs	r3, #12
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	601a      	str	r2, [r3, #0]

  if(val == true)
 800223a:	1cfb      	adds	r3, r7, #3
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d027      	beq.n	8002292 <config_int_channel_ADC+0x6e>
  {
	if(channel == ADC_CHANNEL_VREFINT)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b11      	cmp	r3, #17
 8002246:	d10c      	bne.n	8002262 <config_int_channel_ADC+0x3e>
	{
	  ADC->CCR |= ADC_CCR_VREFEN;
 8002248:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <config_int_channel_ADC+0xd8>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <config_int_channel_ADC+0xd8>)
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	03c9      	lsls	r1, r1, #15
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
	  hadc.Instance->CHSELR = (uint32_t)(ADC_CHSELR_CHSEL17);
 8002256:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <config_int_channel_ADC+0xdc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	0292      	lsls	r2, r2, #10
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
 8002260:	e00e      	b.n	8002280 <config_int_channel_ADC+0x5c>
	}
	else if(channel == ADC_CHANNEL_TEMPSENSOR)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b10      	cmp	r3, #16
 8002266:	d10b      	bne.n	8002280 <config_int_channel_ADC+0x5c>
	{
	  ADC->CCR |= ADC_CCR_TSEN;
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <config_int_channel_ADC+0xd8>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <config_int_channel_ADC+0xd8>)
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	0409      	lsls	r1, r1, #16
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
	  hadc.Instance->CHSELR = (uint32_t)(ADC_CHSELR_CHSEL16);
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <config_int_channel_ADC+0xdc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	0252      	lsls	r2, r2, #9
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	sConfig.Rank          = ADC_RANK_CHANNEL_NUMBER;
 8002280:	210c      	movs	r1, #12
 8002282:	187b      	adds	r3, r7, r1
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	0152      	lsls	r2, r2, #5
 8002288:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime  = ADC_SAMPLETIME_239CYCLES_5;
 800228a:	187b      	adds	r3, r7, r1
 800228c:	2207      	movs	r2, #7
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e028      	b.n	80022e4 <config_int_channel_ADC+0xc0>
  }
  else if(val == false)
 8002292:	1cfb      	adds	r3, r7, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2201      	movs	r2, #1
 8002298:	4053      	eors	r3, r2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d021      	beq.n	80022e4 <config_int_channel_ADC+0xc0>
  {
	if(channel == ADC_CHANNEL_VREFINT)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b11      	cmp	r3, #17
 80022a4:	d10a      	bne.n	80022bc <config_int_channel_ADC+0x98>
	{
	  ADC->CCR &= ~ADC_CCR_VREFEN;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <config_int_channel_ADC+0xd8>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <config_int_channel_ADC+0xd8>)
 80022ac:	4915      	ldr	r1, [pc, #84]	; (8002304 <config_int_channel_ADC+0xe0>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
	  hadc.Instance->CHSELR = 0;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <config_int_channel_ADC+0xdc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2200      	movs	r2, #0
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
 80022ba:	e00c      	b.n	80022d6 <config_int_channel_ADC+0xb2>
	}
	else if(channel == ADC_CHANNEL_TEMPSENSOR)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d109      	bne.n	80022d6 <config_int_channel_ADC+0xb2>
	{
	  ADC->CCR &= ~ADC_CCR_TSEN;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <config_int_channel_ADC+0xd8>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <config_int_channel_ADC+0xd8>)
 80022c8:	490f      	ldr	r1, [pc, #60]	; (8002308 <config_int_channel_ADC+0xe4>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
	  hadc.Instance->CHSELR = 0;
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <config_int_channel_ADC+0xdc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
	}

	sConfig.Rank          = ADC_RANK_NONE;
 80022d6:	210c      	movs	r1, #12
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	4a0c      	ldr	r2, [pc, #48]	; (800230c <config_int_channel_ADC+0xe8>)
 80022dc:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime  = ADC_SAMPLETIME_239CYCLES_5;
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	2207      	movs	r2, #7
 80022e2:	609a      	str	r2, [r3, #8]
  }

  HAL_ADC_ConfigChannel(&hadc,&sConfig);
 80022e4:	230c      	movs	r3, #12
 80022e6:	18fa      	adds	r2, r7, r3
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <config_int_channel_ADC+0xdc>)
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f001 fce5 	bl	8003cbc <HAL_ADC_ConfigChannel>
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b006      	add	sp, #24
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40012708 	.word	0x40012708
 8002300:	2000010c 	.word	0x2000010c
 8002304:	ffbfffff 	.word	0xffbfffff
 8002308:	ff7fffff 	.word	0xff7fffff
 800230c:	00001001 	.word	0x00001001

08002310 <r_single_ext_channel_ADC>:

uint32_t r_single_ext_channel_ADC(uint32_t channel)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	  uint32_t digital_result;

	  config_int_channel_ADC(channel, true);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2101      	movs	r1, #1
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff ff81 	bl	8002224 <config_int_channel_ADC>

	  HAL_ADCEx_Calibration_Start(&hadc);
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <r_single_ext_channel_ADC+0x58>)
 8002324:	0018      	movs	r0, r3
 8002326:	f001 feeb 	bl	8004100 <HAL_ADCEx_Calibration_Start>

	  HAL_ADC_Start(&hadc);
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <r_single_ext_channel_ADC+0x58>)
 800232c:	0018      	movs	r0, r3
 800232e:	f001 fb93 	bl	8003a58 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 8002332:	23fa      	movs	r3, #250	; 0xfa
 8002334:	009a      	lsls	r2, r3, #2
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <r_single_ext_channel_ADC+0x58>)
 8002338:	0011      	movs	r1, r2
 800233a:	0018      	movs	r0, r3
 800233c:	f001 fc20 	bl	8003b80 <HAL_ADC_PollForConversion>
	  digital_result = HAL_ADC_GetValue(&hadc);
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <r_single_ext_channel_ADC+0x58>)
 8002342:	0018      	movs	r0, r3
 8002344:	f001 fcae 	bl	8003ca4 <HAL_ADC_GetValue>
 8002348:	0003      	movs	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_Stop(&hadc);
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <r_single_ext_channel_ADC+0x58>)
 800234e:	0018      	movs	r0, r3
 8002350:	f001 fbd6 	bl	8003b00 <HAL_ADC_Stop>

	  config_int_channel_ADC(channel, false);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2100      	movs	r1, #0
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff ff63 	bl	8002224 <config_int_channel_ADC>

	  return digital_result;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2000010c 	.word	0x2000010c

0800236c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <TFT9341_reset>:
//-------------------------------------------------------------------
uint16_t TFT9341_WIDTH;
uint16_t TFT9341_HEIGHT;
//-------------------------------------------------------------------
void TFT9341_reset(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <TFT9341_reset+0x28>)
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	0018      	movs	r0, r3
 8002384:	f002 f97e 	bl	8004684 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002388:	2005      	movs	r0, #5
 800238a:	f001 fa03 	bl	8003794 <HAL_Delay>
	RESET_IDLE();
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <TFT9341_reset+0x28>)
 8002390:	2201      	movs	r2, #1
 8002392:	2102      	movs	r1, #2
 8002394:	0018      	movs	r0, r3
 8002396:	f002 f975 	bl	8004684 <HAL_GPIO_WritePin>
}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	48000400 	.word	0x48000400

080023a4 <TFT9341_ini>:
//-------------------------------------------------------------------

//-------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	0002      	movs	r2, r0
 80023ac:	1dbb      	adds	r3, r7, #6
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	1c0a      	adds	r2, r1, #0
 80023b4:	801a      	strh	r2, [r3, #0]
	uint8_t data[15];
	CS_ACTIVE();
 80023b6:	4bc9      	ldr	r3, [pc, #804]	; (80026dc <TFT9341_ini+0x338>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	2104      	movs	r1, #4
 80023bc:	0018      	movs	r0, r3
 80023be:	f002 f961 	bl	8004684 <HAL_GPIO_WritePin>
	TFT9341_reset();
 80023c2:	f7ff ffd9 	bl	8002378 <TFT9341_reset>
	//Software Reset
	TFT9341_SendCommand(0x01);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 f98e 	bl	80026e8 <TFT9341_SendCommand>
	HAL_Delay(1000);
 80023cc:	23fa      	movs	r3, #250	; 0xfa
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f001 f9df 	bl	8003794 <HAL_Delay>

	TFT9341_SendCommand(0xCB);
 80023d6:	20cb      	movs	r0, #203	; 0xcb
 80023d8:	f000 f986 	bl	80026e8 <TFT9341_SendCommand>
	//Power Control A
	data[0] = 0x39;
 80023dc:	2108      	movs	r1, #8
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2239      	movs	r2, #57	; 0x39
 80023e2:	701a      	strb	r2, [r3, #0]
	data[1] = 0x2C;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	222c      	movs	r2, #44	; 0x2c
 80023e8:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2200      	movs	r2, #0
 80023ee:	709a      	strb	r2, [r3, #2]
	data[3] = 0x34;
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2234      	movs	r2, #52	; 0x34
 80023f4:	70da      	strb	r2, [r3, #3]
	data[4] = 0x02;
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2202      	movs	r2, #2
 80023fa:	711a      	strb	r2, [r3, #4]
	TFT9341_WriteData(data, 5);
 80023fc:	000c      	movs	r4, r1
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2105      	movs	r1, #5
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f98c 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xCF);
 8002408:	20cf      	movs	r0, #207	; 0xcf
 800240a:	f000 f96d 	bl	80026e8 <TFT9341_SendCommand>
	//Power Control B
	data[0] = 0x00;
 800240e:	0021      	movs	r1, r4
 8002410:	187b      	adds	r3, r7, r1
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
	data[1] = 0xC1;
 8002416:	187b      	adds	r3, r7, r1
 8002418:	22c1      	movs	r2, #193	; 0xc1
 800241a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x30;
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2230      	movs	r2, #48	; 0x30
 8002420:	709a      	strb	r2, [r3, #2]
	TFT9341_WriteData(data, 3);
 8002422:	000c      	movs	r4, r1
 8002424:	187b      	adds	r3, r7, r1
 8002426:	2103      	movs	r1, #3
 8002428:	0018      	movs	r0, r3
 800242a:	f000 f979 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xE8);
 800242e:	20e8      	movs	r0, #232	; 0xe8
 8002430:	f000 f95a 	bl	80026e8 <TFT9341_SendCommand>
	//Driver timing control A
	data[0] = 0x85;
 8002434:	0021      	movs	r1, r4
 8002436:	187b      	adds	r3, r7, r1
 8002438:	2285      	movs	r2, #133	; 0x85
 800243a:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 800243c:	187b      	adds	r3, r7, r1
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
	data[2] = 0x78;
 8002442:	187b      	adds	r3, r7, r1
 8002444:	2278      	movs	r2, #120	; 0x78
 8002446:	709a      	strb	r2, [r3, #2]
	TFT9341_WriteData(data, 3);
 8002448:	000c      	movs	r4, r1
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2103      	movs	r1, #3
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f966 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xEA);
 8002454:	20ea      	movs	r0, #234	; 0xea
 8002456:	f000 f947 	bl	80026e8 <TFT9341_SendCommand>
	//Driver timing control B
	data[0] = 0x00;
 800245a:	0021      	movs	r1, r4
 800245c:	187b      	adds	r3, r7, r1
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8002462:	187b      	adds	r3, r7, r1
 8002464:	2200      	movs	r2, #0
 8002466:	705a      	strb	r2, [r3, #1]
	TFT9341_WriteData(data, 2);
 8002468:	000c      	movs	r4, r1
 800246a:	187b      	adds	r3, r7, r1
 800246c:	2102      	movs	r1, #2
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f956 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xED);
 8002474:	20ed      	movs	r0, #237	; 0xed
 8002476:	f000 f937 	bl	80026e8 <TFT9341_SendCommand>
	//Power on Sequence control
	data[0] = 0x64;
 800247a:	0021      	movs	r1, r4
 800247c:	187b      	adds	r3, r7, r1
 800247e:	2264      	movs	r2, #100	; 0x64
 8002480:	701a      	strb	r2, [r3, #0]
	data[1] = 0x03;
 8002482:	187b      	adds	r3, r7, r1
 8002484:	2203      	movs	r2, #3
 8002486:	705a      	strb	r2, [r3, #1]
	data[2] = 0x12;
 8002488:	187b      	adds	r3, r7, r1
 800248a:	2212      	movs	r2, #18
 800248c:	709a      	strb	r2, [r3, #2]
	data[3] = 0x81;
 800248e:	187b      	adds	r3, r7, r1
 8002490:	2281      	movs	r2, #129	; 0x81
 8002492:	70da      	strb	r2, [r3, #3]
	TFT9341_WriteData(data, 4);
 8002494:	000c      	movs	r4, r1
 8002496:	187b      	adds	r3, r7, r1
 8002498:	2104      	movs	r1, #4
 800249a:	0018      	movs	r0, r3
 800249c:	f000 f940 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xF7);
 80024a0:	20f7      	movs	r0, #247	; 0xf7
 80024a2:	f000 f921 	bl	80026e8 <TFT9341_SendCommand>
	//Pump ratio control
	data[0] = 0x20;
 80024a6:	0021      	movs	r1, r4
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	2220      	movs	r2, #32
 80024ac:	701a      	strb	r2, [r3, #0]
	TFT9341_WriteData(data, 1);
 80024ae:	000c      	movs	r4, r1
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2101      	movs	r1, #1
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 f933 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xC0);
 80024ba:	20c0      	movs	r0, #192	; 0xc0
 80024bc:	f000 f914 	bl	80026e8 <TFT9341_SendCommand>
	//Power Control,VRH[5:0]
	data[0] = 0x23;//0x10;
 80024c0:	0021      	movs	r1, r4
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2223      	movs	r2, #35	; 0x23
 80024c6:	701a      	strb	r2, [r3, #0]
	TFT9341_WriteData(data, 1);
 80024c8:	000c      	movs	r4, r1
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2101      	movs	r1, #1
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f926 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xC1);
 80024d4:	20c1      	movs	r0, #193	; 0xc1
 80024d6:	f000 f907 	bl	80026e8 <TFT9341_SendCommand>
	//Power Control,SAP[2:0];BT[3:0]
	data[0] = 0x10;
 80024da:	0021      	movs	r1, r4
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	2210      	movs	r2, #16
 80024e0:	701a      	strb	r2, [r3, #0]
	TFT9341_WriteData(data, 1);
 80024e2:	000c      	movs	r4, r1
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2101      	movs	r1, #1
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 f919 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xC5);
 80024ee:	20c5      	movs	r0, #197	; 0xc5
 80024f0:	f000 f8fa 	bl	80026e8 <TFT9341_SendCommand>
	//VCOM Control 1
	data[0] = 0x3E;
 80024f4:	0021      	movs	r1, r4
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	223e      	movs	r2, #62	; 0x3e
 80024fa:	701a      	strb	r2, [r3, #0]
	data[1] = 0x28;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2228      	movs	r2, #40	; 0x28
 8002500:	705a      	strb	r2, [r3, #1]
	TFT9341_WriteData(data, 2);
 8002502:	000c      	movs	r4, r1
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2102      	movs	r1, #2
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f909 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xC7);
 800250e:	20c7      	movs	r0, #199	; 0xc7
 8002510:	f000 f8ea 	bl	80026e8 <TFT9341_SendCommand>
	//VCOM Control 2
	data[0] = 0x86;
 8002514:	0021      	movs	r1, r4
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2286      	movs	r2, #134	; 0x86
 800251a:	701a      	strb	r2, [r3, #0]
	TFT9341_WriteData(data, 1);
 800251c:	000c      	movs	r4, r1
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2101      	movs	r1, #1
 8002522:	0018      	movs	r0, r3
 8002524:	f000 f8fc 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0x36);
 8002528:	2036      	movs	r0, #54	; 0x36
 800252a:	f000 f8dd 	bl	80026e8 <TFT9341_SendCommand>
	//Memory Acsess Control
	data[0] = 0x48;
 800252e:	0021      	movs	r1, r4
 8002530:	187b      	adds	r3, r7, r1
 8002532:	2248      	movs	r2, #72	; 0x48
 8002534:	701a      	strb	r2, [r3, #0]
	TFT9341_WriteData(data, 1);
 8002536:	000c      	movs	r4, r1
 8002538:	187b      	adds	r3, r7, r1
 800253a:	2101      	movs	r1, #1
 800253c:	0018      	movs	r0, r3
 800253e:	f000 f8ef 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0x3A);
 8002542:	203a      	movs	r0, #58	; 0x3a
 8002544:	f000 f8d0 	bl	80026e8 <TFT9341_SendCommand>
	//Pixel Format Set
	data[0] = 0x55;//16bit
 8002548:	0021      	movs	r1, r4
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2255      	movs	r2, #85	; 0x55
 800254e:	701a      	strb	r2, [r3, #0]
	TFT9341_WriteData(data, 1);
 8002550:	000c      	movs	r4, r1
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2101      	movs	r1, #1
 8002556:	0018      	movs	r0, r3
 8002558:	f000 f8e2 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xB1);
 800255c:	20b1      	movs	r0, #177	; 0xb1
 800255e:	f000 f8c3 	bl	80026e8 <TFT9341_SendCommand>
	//Frame Rratio Control, Standard RGB Color
	data[0] = 0x00;
 8002562:	0021      	movs	r1, r4
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
	data[1] = 0x18;
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2218      	movs	r2, #24
 800256e:	705a      	strb	r2, [r3, #1]
	TFT9341_WriteData(data, 2);
 8002570:	000c      	movs	r4, r1
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2102      	movs	r1, #2
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f8d2 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xB6);
 800257c:	20b6      	movs	r0, #182	; 0xb6
 800257e:	f000 f8b3 	bl	80026e8 <TFT9341_SendCommand>
	//Display Function Control
	data[0] = 0x08;
 8002582:	0021      	movs	r1, r4
 8002584:	187b      	adds	r3, r7, r1
 8002586:	2208      	movs	r2, #8
 8002588:	701a      	strb	r2, [r3, #0]
	data[1] = 0x82;
 800258a:	187b      	adds	r3, r7, r1
 800258c:	2282      	movs	r2, #130	; 0x82
 800258e:	705a      	strb	r2, [r3, #1]
	data[2] = 0x27;//320 строк
 8002590:	187b      	adds	r3, r7, r1
 8002592:	2227      	movs	r2, #39	; 0x27
 8002594:	709a      	strb	r2, [r3, #2]
	TFT9341_WriteData(data, 3);
 8002596:	000c      	movs	r4, r1
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2103      	movs	r1, #3
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f8bf 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xF2);
 80025a2:	20f2      	movs	r0, #242	; 0xf2
 80025a4:	f000 f8a0 	bl	80026e8 <TFT9341_SendCommand>
	//Enable 3G (пока не знаю что это за режим)
	data[0] = 0x00;//не включаем
 80025a8:	0021      	movs	r1, r4
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
	TFT9341_WriteData(data, 1);
 80025b0:	000c      	movs	r4, r1
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2101      	movs	r1, #1
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 f8b2 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0x26);
 80025bc:	2026      	movs	r0, #38	; 0x26
 80025be:	f000 f893 	bl	80026e8 <TFT9341_SendCommand>
	//Gamma set
	data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 80025c2:	0021      	movs	r1, r4
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
	TFT9341_WriteData(data, 1);
 80025ca:	000c      	movs	r4, r1
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2101      	movs	r1, #1
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 f8a5 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xE0);
 80025d6:	20e0      	movs	r0, #224	; 0xe0
 80025d8:	f000 f886 	bl	80026e8 <TFT9341_SendCommand>
	//Positive Gamma  Correction
	data[0] = 0x0F;
 80025dc:	0021      	movs	r1, r4
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	220f      	movs	r2, #15
 80025e2:	701a      	strb	r2, [r3, #0]
	data[1] = 0x31;
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2231      	movs	r2, #49	; 0x31
 80025e8:	705a      	strb	r2, [r3, #1]
	data[2] = 0x2B;
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	222b      	movs	r2, #43	; 0x2b
 80025ee:	709a      	strb	r2, [r3, #2]
	data[3] = 0x0C;
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	220c      	movs	r2, #12
 80025f4:	70da      	strb	r2, [r3, #3]
	data[4] = 0x0E;
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	220e      	movs	r2, #14
 80025fa:	711a      	strb	r2, [r3, #4]
	data[5] = 0x08;
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	2208      	movs	r2, #8
 8002600:	715a      	strb	r2, [r3, #5]
	data[6] = 0x4E;
 8002602:	187b      	adds	r3, r7, r1
 8002604:	224e      	movs	r2, #78	; 0x4e
 8002606:	719a      	strb	r2, [r3, #6]
	data[7] = 0xF1;
 8002608:	187b      	adds	r3, r7, r1
 800260a:	22f1      	movs	r2, #241	; 0xf1
 800260c:	71da      	strb	r2, [r3, #7]
	data[8] = 0x37;
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2237      	movs	r2, #55	; 0x37
 8002612:	721a      	strb	r2, [r3, #8]
	data[9] = 0x07;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2207      	movs	r2, #7
 8002618:	725a      	strb	r2, [r3, #9]
	data[10] = 0x10;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2210      	movs	r2, #16
 800261e:	729a      	strb	r2, [r3, #10]
	data[11] = 0x03;
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2203      	movs	r2, #3
 8002624:	72da      	strb	r2, [r3, #11]
	data[12] = 0x0E;
 8002626:	187b      	adds	r3, r7, r1
 8002628:	220e      	movs	r2, #14
 800262a:	731a      	strb	r2, [r3, #12]
	data[13] = 0x09;
 800262c:	187b      	adds	r3, r7, r1
 800262e:	2209      	movs	r2, #9
 8002630:	735a      	strb	r2, [r3, #13]
	data[14] = 0x00;
 8002632:	187b      	adds	r3, r7, r1
 8002634:	2200      	movs	r2, #0
 8002636:	739a      	strb	r2, [r3, #14]
	TFT9341_WriteData(data, 15);
 8002638:	000c      	movs	r4, r1
 800263a:	187b      	adds	r3, r7, r1
 800263c:	210f      	movs	r1, #15
 800263e:	0018      	movs	r0, r3
 8002640:	f000 f86e 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0xE1);
 8002644:	20e1      	movs	r0, #225	; 0xe1
 8002646:	f000 f84f 	bl	80026e8 <TFT9341_SendCommand>
	//Negative Gamma  Correction
	data[0] = 0x00;
 800264a:	0021      	movs	r1, r4
 800264c:	187b      	adds	r3, r7, r1
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
	data[1] = 0x0E;
 8002652:	187b      	adds	r3, r7, r1
 8002654:	220e      	movs	r2, #14
 8002656:	705a      	strb	r2, [r3, #1]
	data[2] = 0x14;
 8002658:	187b      	adds	r3, r7, r1
 800265a:	2214      	movs	r2, #20
 800265c:	709a      	strb	r2, [r3, #2]
	data[3] = 0x03;
 800265e:	187b      	adds	r3, r7, r1
 8002660:	2203      	movs	r2, #3
 8002662:	70da      	strb	r2, [r3, #3]
	data[4] = 0x11;
 8002664:	187b      	adds	r3, r7, r1
 8002666:	2211      	movs	r2, #17
 8002668:	711a      	strb	r2, [r3, #4]
	data[5] = 0x07;
 800266a:	187b      	adds	r3, r7, r1
 800266c:	2207      	movs	r2, #7
 800266e:	715a      	strb	r2, [r3, #5]
	data[6] = 0x31;
 8002670:	187b      	adds	r3, r7, r1
 8002672:	2231      	movs	r2, #49	; 0x31
 8002674:	719a      	strb	r2, [r3, #6]
	data[7] = 0xC1;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	22c1      	movs	r2, #193	; 0xc1
 800267a:	71da      	strb	r2, [r3, #7]
	data[8] = 0x48;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2248      	movs	r2, #72	; 0x48
 8002680:	721a      	strb	r2, [r3, #8]
	data[9] = 0x08;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2208      	movs	r2, #8
 8002686:	725a      	strb	r2, [r3, #9]
	data[10] = 0x0F;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	220f      	movs	r2, #15
 800268c:	729a      	strb	r2, [r3, #10]
	data[11] = 0x0C;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	220c      	movs	r2, #12
 8002692:	72da      	strb	r2, [r3, #11]
	data[12] = 0x31;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2231      	movs	r2, #49	; 0x31
 8002698:	731a      	strb	r2, [r3, #12]
	data[13] = 0x36;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2236      	movs	r2, #54	; 0x36
 800269e:	735a      	strb	r2, [r3, #13]
	data[14] = 0x0F;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	220f      	movs	r2, #15
 80026a4:	739a      	strb	r2, [r3, #14]
	TFT9341_WriteData(data, 15);
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	210f      	movs	r1, #15
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f838 	bl	8002720 <TFT9341_WriteData>

	TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 80026b0:	2011      	movs	r0, #17
 80026b2:	f000 f819 	bl	80026e8 <TFT9341_SendCommand>
	HAL_Delay(150);
 80026b6:	2096      	movs	r0, #150	; 0x96
 80026b8:	f001 f86c 	bl	8003794 <HAL_Delay>

	TFT9341_SendCommand(0x29);
 80026bc:	2029      	movs	r0, #41	; 0x29
 80026be:	f000 f813 	bl	80026e8 <TFT9341_SendCommand>
	//Display ON
	//data[0] = TFT9341_ROTATION;
	//TFT9341_SendCommand(0x29);
	//TFT9341_WriteData(data, 1);

	TFT9341_WIDTH = w_size;
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <TFT9341_ini+0x33c>)
 80026c4:	1dba      	adds	r2, r7, #6
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	801a      	strh	r2, [r3, #0]
	TFT9341_HEIGHT = h_size;
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <TFT9341_ini+0x340>)
 80026cc:	1d3a      	adds	r2, r7, #4
 80026ce:	8812      	ldrh	r2, [r2, #0]
 80026d0:	801a      	strh	r2, [r3, #0]
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b007      	add	sp, #28
 80026d8:	bd90      	pop	{r4, r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	48000400 	.word	0x48000400
 80026e0:	2000014e 	.word	0x2000014e
 80026e4:	2000014c 	.word	0x2000014c

080026e8 <TFT9341_SendCommand>:
//-------------------------------------------------------------------

//-------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cm)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	0002      	movs	r2, r0
 80026f0:	1dfb      	adds	r3, r7, #7
 80026f2:	701a      	strb	r2, [r3, #0]
  DC_COMMAND();
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <TFT9341_SendCommand+0x2c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	2101      	movs	r1, #1
 80026fa:	0018      	movs	r0, r3
 80026fc:	f001 ffc2 	bl	8004684 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi1, &cm, 1, 5000);
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <TFT9341_SendCommand+0x30>)
 8002702:	1df9      	adds	r1, r7, #7
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <TFT9341_SendCommand+0x34>)
 8002706:	2201      	movs	r2, #1
 8002708:	f002 fdb0 	bl	800526c <HAL_SPI_Transmit>
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}
 8002714:	48000400 	.word	0x48000400
 8002718:	00001388 	.word	0x00001388
 800271c:	200000a8 	.word	0x200000a8

08002720 <TFT9341_WriteData>:
	DC_DATA();
	HAL_SPI_Transmit (&hspi1, &dt, 1, 5000);
}
//-------------------------------------------------------------------
void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
	DC_DATA();
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <TFT9341_WriteData+0x64>)
 800272c:	2201      	movs	r2, #1
 800272e:	2101      	movs	r1, #1
 8002730:	0018      	movs	r0, r3
 8002732:	f001 ffa7 	bl	8004684 <HAL_GPIO_WritePin>
	while(buff_size > 0) {
 8002736:	e01e      	b.n	8002776 <TFT9341_WriteData+0x56>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	0212      	lsls	r2, r2, #8
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <TFT9341_WriteData+0x26>
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	210e      	movs	r1, #14
 8002748:	187a      	adds	r2, r7, r1
 800274a:	8013      	strh	r3, [r2, #0]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 800274c:	2301      	movs	r3, #1
 800274e:	425c      	negs	r4, r3
 8002750:	000d      	movs	r5, r1
 8002752:	187b      	adds	r3, r7, r1
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	480b      	ldr	r0, [pc, #44]	; (8002788 <TFT9341_WriteData+0x68>)
 800275a:	0023      	movs	r3, r4
 800275c:	f002 fd86 	bl	800526c <HAL_SPI_Transmit>
		buff += chunk_size;
 8002760:	0029      	movs	r1, r5
 8002762:	187b      	adds	r3, r7, r1
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	18d3      	adds	r3, r2, r3
 800276a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800276c:	187b      	adds	r3, r7, r1
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1dd      	bne.n	8002738 <TFT9341_WriteData+0x18>
	}
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b004      	add	sp, #16
 8002782:	bdb0      	pop	{r4, r5, r7, pc}
 8002784:	48000400 	.word	0x48000400
 8002788:	200000a8 	.word	0x200000a8

0800278c <TFT9341_SetAddrWindow>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------

static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	0005      	movs	r5, r0
 8002794:	000c      	movs	r4, r1
 8002796:	0010      	movs	r0, r2
 8002798:	0019      	movs	r1, r3
 800279a:	1dbb      	adds	r3, r7, #6
 800279c:	1c2a      	adds	r2, r5, #0
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	1c22      	adds	r2, r4, #0
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	1cbb      	adds	r3, r7, #2
 80027a8:	1c02      	adds	r2, r0, #0
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	003b      	movs	r3, r7
 80027ae:	1c0a      	adds	r2, r1, #0
 80027b0:	801a      	strh	r2, [r3, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 80027b2:	202a      	movs	r0, #42	; 0x2a
 80027b4:	f7ff ff98 	bl	80026e8 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80027b8:	1dbb      	adds	r3, r7, #6
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	210c      	movs	r1, #12
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	1dbb      	adds	r3, r7, #6
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	705a      	strb	r2, [r3, #1]
 80027d2:	1cbb      	adds	r3, r7, #2
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	b29b      	uxth	r3, r3
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	709a      	strb	r2, [r3, #2]
 80027e0:	1cbb      	adds	r3, r7, #2
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	70da      	strb	r2, [r3, #3]
    TFT9341_WriteData(data, sizeof(data));
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2104      	movs	r1, #4
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff ff96 	bl	8002720 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 80027f4:	202b      	movs	r0, #43	; 0x2b
 80027f6:	f7ff ff77 	bl	80026e8 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29b      	uxth	r3, r3
 8002802:	b2da      	uxtb	r2, r3
 8002804:	2108      	movs	r1, #8
 8002806:	187b      	adds	r3, r7, r1
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	187b      	adds	r3, r7, r1
 8002812:	705a      	strb	r2, [r3, #1]
 8002814:	003b      	movs	r3, r7
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	b29b      	uxth	r3, r3
 800281c:	b2da      	uxtb	r2, r3
 800281e:	187b      	adds	r3, r7, r1
 8002820:	709a      	strb	r2, [r3, #2]
 8002822:	003b      	movs	r3, r7
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	187b      	adds	r3, r7, r1
 800282a:	70da      	strb	r2, [r3, #3]
    TFT9341_WriteData(data, sizeof(data));
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2104      	movs	r1, #4
 8002830:	0018      	movs	r0, r3
 8002832:	f7ff ff75 	bl	8002720 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8002836:	202c      	movs	r0, #44	; 0x2c
 8002838:	f7ff ff56 	bl	80026e8 <TFT9341_SendCommand>
}//-------------------------------------------------------------------
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bdb0      	pop	{r4, r5, r7, pc}

08002844 <TFT9341_FillRect>:
void TFT9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	0005      	movs	r5, r0
 800284c:	000c      	movs	r4, r1
 800284e:	0010      	movs	r0, r2
 8002850:	0019      	movs	r1, r3
 8002852:	1dbb      	adds	r3, r7, #6
 8002854:	1c2a      	adds	r2, r5, #0
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	1c22      	adds	r2, r4, #0
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	1cbb      	adds	r3, r7, #2
 8002860:	1c02      	adds	r2, r0, #0
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	003b      	movs	r3, r7
 8002866:	1c0a      	adds	r2, r1, #0
 8002868:	801a      	strh	r2, [r3, #0]
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <TFT9341_FillRect+0xec>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	1dba      	adds	r2, r7, #6
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d258      	bcs.n	8002928 <TFT9341_FillRect+0xe4>
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <TFT9341_FillRect+0xf0>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	8812      	ldrh	r2, [r2, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d252      	bcs.n	8002928 <TFT9341_FillRect+0xe4>
 8002882:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <TFT9341_FillRect+0xec>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	1cba      	adds	r2, r7, #2
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d24c      	bcs.n	8002928 <TFT9341_FillRect+0xe4>
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <TFT9341_FillRect+0xf0>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	003a      	movs	r2, r7
 8002894:	8812      	ldrh	r2, [r2, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d246      	bcs.n	8002928 <TFT9341_FillRect+0xe4>
	if(x1>x2) swap(x1,x2);
 800289a:	1dba      	adds	r2, r7, #6
 800289c:	1cbb      	adds	r3, r7, #2
 800289e:	8812      	ldrh	r2, [r2, #0]
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d90c      	bls.n	80028c0 <TFT9341_FillRect+0x7c>
 80028a6:	210e      	movs	r1, #14
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	1dba      	adds	r2, r7, #6
 80028ac:	8812      	ldrh	r2, [r2, #0]
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	1dbb      	adds	r3, r7, #6
 80028b2:	1cba      	adds	r2, r7, #2
 80028b4:	8812      	ldrh	r2, [r2, #0]
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	1cbb      	adds	r3, r7, #2
 80028ba:	187a      	adds	r2, r7, r1
 80028bc:	8812      	ldrh	r2, [r2, #0]
 80028be:	801a      	strh	r2, [r3, #0]
	if(y1>y2) swap(y1,y2);
 80028c0:	1d3a      	adds	r2, r7, #4
 80028c2:	003b      	movs	r3, r7
 80028c4:	8812      	ldrh	r2, [r2, #0]
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d90c      	bls.n	80028e6 <TFT9341_FillRect+0xa2>
 80028cc:	210c      	movs	r1, #12
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	1d3a      	adds	r2, r7, #4
 80028d2:	8812      	ldrh	r2, [r2, #0]
 80028d4:	801a      	strh	r2, [r3, #0]
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	003a      	movs	r2, r7
 80028da:	8812      	ldrh	r2, [r2, #0]
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	003b      	movs	r3, r7
 80028e0:	187a      	adds	r2, r7, r1
 80028e2:	8812      	ldrh	r2, [r2, #0]
 80028e4:	801a      	strh	r2, [r3, #0]
  TFT9341_SetAddrWindow(x1, y1, x2, y2);
 80028e6:	003b      	movs	r3, r7
 80028e8:	881c      	ldrh	r4, [r3, #0]
 80028ea:	1cbb      	adds	r3, r7, #2
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	8819      	ldrh	r1, [r3, #0]
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	8818      	ldrh	r0, [r3, #0]
 80028f6:	0023      	movs	r3, r4
 80028f8:	f7ff ff48 	bl	800278c <TFT9341_SetAddrWindow>
  TFT9341_Draw_Colour_Burst(color,(x2-x1+1)*(y2-y1+1));
 80028fc:	1cbb      	adds	r3, r7, #2
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	1dbb      	adds	r3, r7, #6
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	3301      	adds	r3, #1
 8002908:	003a      	movs	r2, r7
 800290a:	8811      	ldrh	r1, [r2, #0]
 800290c:	1d3a      	adds	r2, r7, #4
 800290e:	8812      	ldrh	r2, [r2, #0]
 8002910:	1a8a      	subs	r2, r1, r2
 8002912:	3201      	adds	r2, #1
 8002914:	4353      	muls	r3, r2
 8002916:	001a      	movs	r2, r3
 8002918:	2320      	movs	r3, #32
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	0011      	movs	r1, r2
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f809 	bl	8002938 <TFT9341_Draw_Colour_Burst>
 8002926:	e000      	b.n	800292a <TFT9341_FillRect+0xe6>
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 8002928:	46c0      	nop			; (mov r8, r8)
}
 800292a:	46bd      	mov	sp, r7
 800292c:	b004      	add	sp, #16
 800292e:	bdb0      	pop	{r4, r5, r7, pc}
 8002930:	2000014e 	.word	0x2000014e
 8002934:	2000014c 	.word	0x2000014c

08002938 <TFT9341_Draw_Colour_Burst>:

void TFT9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	b095      	sub	sp, #84	; 0x54
 800293c:	af00      	add	r7, sp, #0
 800293e:	0002      	movs	r2, r0
 8002940:	6239      	str	r1, [r7, #32]
 8002942:	2326      	movs	r3, #38	; 0x26
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	801a      	strh	r2, [r3, #0]
 8002948:	466b      	mov	r3, sp
 800294a:	607b      	str	r3, [r7, #4]
	//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	647b      	str	r3, [r7, #68]	; 0x44
	if((Size*2) < BURST_MAX_SIZE)
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	005a      	lsls	r2, r3, #1
 8002954:	23f4      	movs	r3, #244	; 0xf4
 8002956:	33ff      	adds	r3, #255	; 0xff
 8002958:	429a      	cmp	r2, r3
 800295a:	d802      	bhi.n	8002962 <TFT9341_Draw_Colour_Burst+0x2a>
	{
		Buffer_Size = Size;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
 8002960:	e002      	b.n	8002968 <TFT9341_Draw_Colour_Burst+0x30>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8002962:	23fa      	movs	r3, #250	; 0xfa
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	647b      	str	r3, [r7, #68]	; 0x44
	}

	DC_DATA();
 8002968:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <TFT9341_Draw_Colour_Burst+0x144>)
 800296a:	2201      	movs	r2, #1
 800296c:	2101      	movs	r1, #1
 800296e:	0018      	movs	r0, r3
 8002970:	f001 fe88 	bl	8004684 <HAL_GPIO_WritePin>

	unsigned char chifted = Colour>>8;
 8002974:	2326      	movs	r3, #38	; 0x26
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b29a      	uxth	r2, r3
 800297e:	2323      	movs	r3, #35	; 0x23
 8002980:	2120      	movs	r1, #32
 8002982:	468c      	mov	ip, r1
 8002984:	44bc      	add	ip, r7
 8002986:	4463      	add	r3, ip
 8002988:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[Buffer_Size];
 800298a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298c:	001a      	movs	r2, r3
 800298e:	3a01      	subs	r2, #1
 8002990:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	2200      	movs	r2, #0
 8002996:	617a      	str	r2, [r7, #20]
 8002998:	6938      	ldr	r0, [r7, #16]
 800299a:	6979      	ldr	r1, [r7, #20]
 800299c:	0002      	movs	r2, r0
 800299e:	0f52      	lsrs	r2, r2, #29
 80029a0:	000e      	movs	r6, r1
 80029a2:	00f6      	lsls	r6, r6, #3
 80029a4:	61fe      	str	r6, [r7, #28]
 80029a6:	69fe      	ldr	r6, [r7, #28]
 80029a8:	4316      	orrs	r6, r2
 80029aa:	61fe      	str	r6, [r7, #28]
 80029ac:	0002      	movs	r2, r0
 80029ae:	00d2      	lsls	r2, r2, #3
 80029b0:	61ba      	str	r2, [r7, #24]
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	60fa      	str	r2, [r7, #12]
 80029b8:	68b8      	ldr	r0, [r7, #8]
 80029ba:	68f9      	ldr	r1, [r7, #12]
 80029bc:	0002      	movs	r2, r0
 80029be:	0f52      	lsrs	r2, r2, #29
 80029c0:	000e      	movs	r6, r1
 80029c2:	00f5      	lsls	r5, r6, #3
 80029c4:	4315      	orrs	r5, r2
 80029c6:	0002      	movs	r2, r0
 80029c8:	00d4      	lsls	r4, r2, #3
 80029ca:	3307      	adds	r3, #7
 80029cc:	08db      	lsrs	r3, r3, #3
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	466a      	mov	r2, sp
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	469d      	mov	sp, r3
 80029d6:	466b      	mov	r3, sp
 80029d8:	3300      	adds	r3, #0
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80029dc:	2300      	movs	r3, #0
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e0:	e014      	b.n	8002a0c <TFT9341_Draw_Colour_Burst+0xd4>
		{
			burst_buffer[j] = 	chifted;
 80029e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e6:	18d3      	adds	r3, r2, r3
 80029e8:	2223      	movs	r2, #35	; 0x23
 80029ea:	2120      	movs	r1, #32
 80029ec:	468c      	mov	ip, r1
 80029ee:	44bc      	add	ip, r7
 80029f0:	4462      	add	r2, ip
 80029f2:	7812      	ldrb	r2, [r2, #0]
 80029f4:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = Colour;
 80029f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f8:	3301      	adds	r3, #1
 80029fa:	2226      	movs	r2, #38	; 0x26
 80029fc:	18ba      	adds	r2, r7, r2
 80029fe:	8812      	ldrh	r2, [r2, #0]
 8002a00:	b2d1      	uxtb	r1, r2
 8002a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a04:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a08:	3302      	adds	r3, #2
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3e6      	bcc.n	80029e2 <TFT9341_Draw_Colour_Burst+0xaa>
		}

	uint32_t Sending_Size = Size*2;
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002a1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a1e:	f7fd fb73 	bl	8000108 <__udivsi3>
 8002a22:	0003      	movs	r3, r0
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7fd fbf2 	bl	8000214 <__aeabi_uidivmod>
 8002a30:	000b      	movs	r3, r1
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(Sending_in_Block != 0)
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d011      	beq.n	8002a5e <TFT9341_Draw_Colour_Burst+0x126>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a3e:	e00a      	b.n	8002a56 <TFT9341_Draw_Colour_Burst+0x11e>
		{
			HAL_SPI_Transmit(&hspi1, (unsigned char *)burst_buffer, Buffer_Size, HAL_MAX_DELAY);
 8002a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	2301      	movs	r3, #1
 8002a48:	425b      	negs	r3, r3
 8002a4a:	480d      	ldr	r0, [pc, #52]	; (8002a80 <TFT9341_Draw_Colour_Burst+0x148>)
 8002a4c:	f002 fc0e 	bl	800526c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a52:	3301      	adds	r3, #1
 8002a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d3f0      	bcc.n	8002a40 <TFT9341_Draw_Colour_Burst+0x108>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(&hspi1, (unsigned char *)burst_buffer, Remainder_from_block, HAL_MAX_DELAY);
 8002a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	2301      	movs	r3, #1
 8002a66:	425b      	negs	r3, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <TFT9341_Draw_Colour_Burst+0x148>)
 8002a6a:	f002 fbff 	bl	800526c <HAL_SPI_Transmit>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	469d      	mov	sp, r3
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b015      	add	sp, #84	; 0x54
 8002a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	48000400 	.word	0x48000400
 8002a80:	200000a8 	.word	0x200000a8

08002a84 <TFT9341_FillScreen>:

//-------------------------------------------------------------------
//-------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	1dbb      	adds	r3, r7, #6
 8002a8e:	801a      	strh	r2, [r3, #0]
	TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <TFT9341_FillScreen+0x34>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <TFT9341_FillScreen+0x38>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b299      	uxth	r1, r3
 8002aa0:	1dbb      	adds	r3, r7, #6
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	000b      	movs	r3, r1
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7ff feca 	bl	8002844 <TFT9341_FillRect>
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2000014e 	.word	0x2000014e
 8002abc:	2000014c 	.word	0x2000014c

08002ac0 <TFT9341_Draw_Number>:

void TFT9341_Draw_Number(uint8_t number,uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	4cb1      	ldr	r4, [pc, #708]	; (8002d88 <TFT9341_Draw_Number+0x2c8>)
 8002ac4:	44a5      	add	sp, r4
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	0005      	movs	r5, r0
 8002aca:	000c      	movs	r4, r1
 8002acc:	0010      	movs	r0, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	4bae      	ldr	r3, [pc, #696]	; (8002d8c <TFT9341_Draw_Number+0x2cc>)
 8002ad2:	22d2      	movs	r2, #210	; 0xd2
 8002ad4:	0092      	lsls	r2, r2, #2
 8002ad6:	4694      	mov	ip, r2
 8002ad8:	44bc      	add	ip, r7
 8002ada:	4463      	add	r3, ip
 8002adc:	1c2a      	adds	r2, r5, #0
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	4bab      	ldr	r3, [pc, #684]	; (8002d90 <TFT9341_Draw_Number+0x2d0>)
 8002ae2:	22d2      	movs	r2, #210	; 0xd2
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	4694      	mov	ip, r2
 8002ae8:	44bc      	add	ip, r7
 8002aea:	4463      	add	r3, ip
 8002aec:	1c22      	adds	r2, r4, #0
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	4ba8      	ldr	r3, [pc, #672]	; (8002d94 <TFT9341_Draw_Number+0x2d4>)
 8002af2:	22d2      	movs	r2, #210	; 0xd2
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	4694      	mov	ip, r2
 8002af8:	44bc      	add	ip, r7
 8002afa:	4463      	add	r3, ip
 8002afc:	1c02      	adds	r2, r0, #0
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	4ba1      	ldr	r3, [pc, #644]	; (8002d88 <TFT9341_Draw_Number+0x2c8>)
 8002b02:	22d2      	movs	r2, #210	; 0xd2
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	4694      	mov	ip, r2
 8002b08:	44bc      	add	ip, r7
 8002b0a:	4463      	add	r3, ip
 8002b0c:	1c0a      	adds	r2, r1, #0
 8002b0e:	801a      	strh	r2, [r3, #0]
	TFT9341_SetAddrWindow(x1, y1, x2, y2);
 8002b10:	23d6      	movs	r3, #214	; 0xd6
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	881c      	ldrh	r4, [r3, #0]
 8002b18:	4b9b      	ldr	r3, [pc, #620]	; (8002d88 <TFT9341_Draw_Number+0x2c8>)
 8002b1a:	22d2      	movs	r2, #210	; 0xd2
 8002b1c:	0092      	lsls	r2, r2, #2
 8002b1e:	4694      	mov	ip, r2
 8002b20:	44bc      	add	ip, r7
 8002b22:	4463      	add	r3, ip
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	4b9b      	ldr	r3, [pc, #620]	; (8002d94 <TFT9341_Draw_Number+0x2d4>)
 8002b28:	21d2      	movs	r1, #210	; 0xd2
 8002b2a:	0089      	lsls	r1, r1, #2
 8002b2c:	468c      	mov	ip, r1
 8002b2e:	44bc      	add	ip, r7
 8002b30:	4463      	add	r3, ip
 8002b32:	8819      	ldrh	r1, [r3, #0]
 8002b34:	4b96      	ldr	r3, [pc, #600]	; (8002d90 <TFT9341_Draw_Number+0x2d0>)
 8002b36:	20d2      	movs	r0, #210	; 0xd2
 8002b38:	0080      	lsls	r0, r0, #2
 8002b3a:	4684      	mov	ip, r0
 8002b3c:	44bc      	add	ip, r7
 8002b3e:	4463      	add	r3, ip
 8002b40:	8818      	ldrh	r0, [r3, #0]
 8002b42:	0023      	movs	r3, r4
 8002b44:	f7ff fe22 	bl	800278c <TFT9341_SetAddrWindow>
	DC_DATA();
 8002b48:	4b93      	ldr	r3, [pc, #588]	; (8002d98 <TFT9341_Draw_Number+0x2d8>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f001 fd98 	bl	8004684 <HAL_GPIO_WritePin>

	uint32_t counter = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	22d1      	movs	r2, #209	; 0xd1
 8002b58:	0092      	lsls	r2, r2, #2
 8002b5a:	18ba      	adds	r2, r7, r2
 8002b5c:	6013      	str	r3, [r2, #0]

	unsigned char Temp_small_buffer[BURST_MAX_SIZE];

	for(uint32_t i = 0; i < 12816/BURST_MAX_SIZE; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	22d0      	movs	r2, #208	; 0xd0
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	18ba      	adds	r2, r7, r2
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e084      	b.n	8002c74 <TFT9341_Draw_Number+0x1b4>
	{
		for(uint32_t k = 0; k<BURST_MAX_SIZE; k=k+2)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	22cf      	movs	r2, #207	; 0xcf
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	18ba      	adds	r2, r7, r2
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e066      	b.n	8002c44 <TFT9341_Draw_Number+0x184>
		{
			if((image_data_Font[number][counter/8]>>(7-(counter%8)))&0x01 == 1)
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <TFT9341_Draw_Number+0x2cc>)
 8002b78:	22d2      	movs	r2, #210	; 0xd2
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4694      	mov	ip, r2
 8002b7e:	44bc      	add	ip, r7
 8002b80:	4463      	add	r3, ip
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	25d1      	movs	r5, #209	; 0xd1
 8002b86:	00ad      	lsls	r5, r5, #2
 8002b88:	197b      	adds	r3, r7, r5
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	08d9      	lsrs	r1, r3, #3
 8002b8e:	4883      	ldr	r0, [pc, #524]	; (8002d9c <TFT9341_Draw_Number+0x2dc>)
 8002b90:	0013      	movs	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	189b      	adds	r3, r3, r2
 8002b96:	009c      	lsls	r4, r3, #2
 8002b98:	191b      	adds	r3, r3, r4
 8002b9a:	015b      	lsls	r3, r3, #5
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	18c3      	adds	r3, r0, r3
 8002ba0:	5c5b      	ldrb	r3, [r3, r1]
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	197b      	adds	r3, r7, r5
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	2207      	movs	r2, #7
 8002bac:	4013      	ands	r3, r2
 8002bae:	4119      	asrs	r1, r3
 8002bb0:	000b      	movs	r3, r1
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d017      	beq.n	8002be8 <TFT9341_Draw_Number+0x128>
			{
				Temp_small_buffer[k] = 0x00;
 8002bb8:	4b79      	ldr	r3, [pc, #484]	; (8002da0 <TFT9341_Draw_Number+0x2e0>)
 8002bba:	22d2      	movs	r2, #210	; 0xd2
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	18ba      	adds	r2, r7, r2
 8002bc0:	18d2      	adds	r2, r2, r3
 8002bc2:	21cf      	movs	r1, #207	; 0xcf
 8002bc4:	0089      	lsls	r1, r1, #2
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	18d3      	adds	r3, r2, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
				Temp_small_buffer[k+1] = 0x00;
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a72      	ldr	r2, [pc, #456]	; (8002da0 <TFT9341_Draw_Number+0x2e0>)
 8002bd8:	21d2      	movs	r1, #210	; 0xd2
 8002bda:	0089      	lsls	r1, r1, #2
 8002bdc:	468c      	mov	ip, r1
 8002bde:	44bc      	add	ip, r7
 8002be0:	4462      	add	r2, ip
 8002be2:	2100      	movs	r1, #0
 8002be4:	54d1      	strb	r1, [r2, r3]
 8002be6:	e01f      	b.n	8002c28 <TFT9341_Draw_Number+0x168>
			}
			else
			{
				Temp_small_buffer[k] = (color>>8)&0xff;
 8002be8:	20d7      	movs	r0, #215	; 0xd7
 8002bea:	0080      	lsls	r0, r0, #2
 8002bec:	183b      	adds	r3, r7, r0
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b2d9      	uxtb	r1, r3
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <TFT9341_Draw_Number+0x2e0>)
 8002bf8:	22d2      	movs	r2, #210	; 0xd2
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	18ba      	adds	r2, r7, r2
 8002bfe:	18d2      	adds	r2, r2, r3
 8002c00:	24cf      	movs	r4, #207	; 0xcf
 8002c02:	00a4      	lsls	r4, r4, #2
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	18d3      	adds	r3, r2, r3
 8002c0a:	1c0a      	adds	r2, r1, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
				Temp_small_buffer[k+1] = color&0xff;
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	183a      	adds	r2, r7, r0
 8002c16:	8812      	ldrh	r2, [r2, #0]
 8002c18:	b2d1      	uxtb	r1, r2
 8002c1a:	4a61      	ldr	r2, [pc, #388]	; (8002da0 <TFT9341_Draw_Number+0x2e0>)
 8002c1c:	20d2      	movs	r0, #210	; 0xd2
 8002c1e:	0080      	lsls	r0, r0, #2
 8002c20:	4684      	mov	ip, r0
 8002c22:	44bc      	add	ip, r7
 8002c24:	4462      	add	r2, ip
 8002c26:	54d1      	strb	r1, [r2, r3]
			}
			counter++;
 8002c28:	22d1      	movs	r2, #209	; 0xd1
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	18bb      	adds	r3, r7, r2
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	18ba      	adds	r2, r7, r2
 8002c34:	6013      	str	r3, [r2, #0]
		for(uint32_t k = 0; k<BURST_MAX_SIZE; k=k+2)
 8002c36:	22cf      	movs	r2, #207	; 0xcf
 8002c38:	0092      	lsls	r2, r2, #2
 8002c3a:	18bb      	adds	r3, r7, r2
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3302      	adds	r3, #2
 8002c40:	18ba      	adds	r2, r7, r2
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	23cf      	movs	r3, #207	; 0xcf
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	23f4      	movs	r3, #244	; 0xf4
 8002c4e:	33ff      	adds	r3, #255	; 0xff
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d990      	bls.n	8002b76 <TFT9341_Draw_Number+0xb6>
		}
		HAL_SPI_Transmit(&hspi1, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002c54:	23fa      	movs	r3, #250	; 0xfa
 8002c56:	005a      	lsls	r2, r3, #1
 8002c58:	23a2      	movs	r3, #162	; 0xa2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	18f9      	adds	r1, r7, r3
 8002c5e:	4851      	ldr	r0, [pc, #324]	; (8002da4 <TFT9341_Draw_Number+0x2e4>)
 8002c60:	230a      	movs	r3, #10
 8002c62:	f002 fb03 	bl	800526c <HAL_SPI_Transmit>
	for(uint32_t i = 0; i < 12816/BURST_MAX_SIZE; i++)
 8002c66:	22d0      	movs	r2, #208	; 0xd0
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	18bb      	adds	r3, r7, r2
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	18ba      	adds	r2, r7, r2
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	23d0      	movs	r3, #208	; 0xd0
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b18      	cmp	r3, #24
 8002c7e:	d800      	bhi.n	8002c82 <TFT9341_Draw_Number+0x1c2>
 8002c80:	e773      	b.n	8002b6a <TFT9341_Draw_Number+0xaa>
	}

	unsigned char Temp_small_buffer_2[316];

	for(uint32_t k = 0; k<316; k=k+2)
 8002c82:	2300      	movs	r3, #0
 8002c84:	22ce      	movs	r2, #206	; 0xce
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	18ba      	adds	r2, r7, r2
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e066      	b.n	8002d5c <TFT9341_Draw_Number+0x29c>
	{
		if((image_data_Font[number][counter/8]>>(7-(counter%8)))&0x01 == 1)
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <TFT9341_Draw_Number+0x2cc>)
 8002c90:	22d2      	movs	r2, #210	; 0xd2
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4694      	mov	ip, r2
 8002c96:	44bc      	add	ip, r7
 8002c98:	4463      	add	r3, ip
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	25d1      	movs	r5, #209	; 0xd1
 8002c9e:	00ad      	lsls	r5, r5, #2
 8002ca0:	197b      	adds	r3, r7, r5
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	08d9      	lsrs	r1, r3, #3
 8002ca6:	483d      	ldr	r0, [pc, #244]	; (8002d9c <TFT9341_Draw_Number+0x2dc>)
 8002ca8:	0013      	movs	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	189b      	adds	r3, r3, r2
 8002cae:	009c      	lsls	r4, r3, #2
 8002cb0:	191b      	adds	r3, r3, r4
 8002cb2:	015b      	lsls	r3, r3, #5
 8002cb4:	189b      	adds	r3, r3, r2
 8002cb6:	18c3      	adds	r3, r0, r3
 8002cb8:	5c5b      	ldrb	r3, [r3, r1]
 8002cba:	0019      	movs	r1, r3
 8002cbc:	197b      	adds	r3, r7, r5
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	4119      	asrs	r1, r3
 8002cc8:	000b      	movs	r3, r1
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d017      	beq.n	8002d00 <TFT9341_Draw_Number+0x240>
		{
			Temp_small_buffer_2[k] = 0x00;
 8002cd0:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <TFT9341_Draw_Number+0x2e8>)
 8002cd2:	22d2      	movs	r2, #210	; 0xd2
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	18ba      	adds	r2, r7, r2
 8002cd8:	18d2      	adds	r2, r2, r3
 8002cda:	21ce      	movs	r1, #206	; 0xce
 8002cdc:	0089      	lsls	r1, r1, #2
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	18d3      	adds	r3, r2, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
			Temp_small_buffer_2[k+1] = 0x00;
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	4a2e      	ldr	r2, [pc, #184]	; (8002da8 <TFT9341_Draw_Number+0x2e8>)
 8002cf0:	21d2      	movs	r1, #210	; 0xd2
 8002cf2:	0089      	lsls	r1, r1, #2
 8002cf4:	468c      	mov	ip, r1
 8002cf6:	44bc      	add	ip, r7
 8002cf8:	4462      	add	r2, ip
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	54d1      	strb	r1, [r2, r3]
 8002cfe:	e01f      	b.n	8002d40 <TFT9341_Draw_Number+0x280>
		}
		else
		{
			Temp_small_buffer_2[k] = (color>>8)&0xff;
 8002d00:	20d7      	movs	r0, #215	; 0xd7
 8002d02:	0080      	lsls	r0, r0, #2
 8002d04:	183b      	adds	r3, r7, r0
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	b2d9      	uxtb	r1, r3
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <TFT9341_Draw_Number+0x2e8>)
 8002d10:	22d2      	movs	r2, #210	; 0xd2
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	18ba      	adds	r2, r7, r2
 8002d16:	18d2      	adds	r2, r2, r3
 8002d18:	24ce      	movs	r4, #206	; 0xce
 8002d1a:	00a4      	lsls	r4, r4, #2
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	18d3      	adds	r3, r2, r3
 8002d22:	1c0a      	adds	r2, r1, #0
 8002d24:	701a      	strb	r2, [r3, #0]
			Temp_small_buffer_2[k+1] = color&0xff;
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	183a      	adds	r2, r7, r0
 8002d2e:	8812      	ldrh	r2, [r2, #0]
 8002d30:	b2d1      	uxtb	r1, r2
 8002d32:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <TFT9341_Draw_Number+0x2e8>)
 8002d34:	20d2      	movs	r0, #210	; 0xd2
 8002d36:	0080      	lsls	r0, r0, #2
 8002d38:	4684      	mov	ip, r0
 8002d3a:	44bc      	add	ip, r7
 8002d3c:	4462      	add	r2, ip
 8002d3e:	54d1      	strb	r1, [r2, r3]
		}
		counter++;
 8002d40:	22d1      	movs	r2, #209	; 0xd1
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	18bb      	adds	r3, r7, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	18ba      	adds	r2, r7, r2
 8002d4c:	6013      	str	r3, [r2, #0]
	for(uint32_t k = 0; k<316; k=k+2)
 8002d4e:	22ce      	movs	r2, #206	; 0xce
 8002d50:	0092      	lsls	r2, r2, #2
 8002d52:	18bb      	adds	r3, r7, r2
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3302      	adds	r3, #2
 8002d58:	18ba      	adds	r2, r7, r2
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	23ce      	movs	r3, #206	; 0xce
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	233c      	movs	r3, #60	; 0x3c
 8002d66:	33ff      	adds	r3, #255	; 0xff
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d990      	bls.n	8002c8e <TFT9341_Draw_Number+0x1ce>
	}
	HAL_SPI_Transmit(&hspi1, (unsigned char*)Temp_small_buffer_2, 316, 10);
 8002d6c:	239e      	movs	r3, #158	; 0x9e
 8002d6e:	005a      	lsls	r2, r3, #1
 8002d70:	2308      	movs	r3, #8
 8002d72:	18f9      	adds	r1, r7, r3
 8002d74:	480b      	ldr	r0, [pc, #44]	; (8002da4 <TFT9341_Draw_Number+0x2e4>)
 8002d76:	230a      	movs	r3, #10
 8002d78:	f002 fa78 	bl	800526c <HAL_SPI_Transmit>

}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	23d2      	movs	r3, #210	; 0xd2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	449d      	add	sp, r3
 8002d86:	bdb0      	pop	{r4, r5, r7, pc}
 8002d88:	fffffcb8 	.word	0xfffffcb8
 8002d8c:	fffffcbf 	.word	0xfffffcbf
 8002d90:	fffffcbc 	.word	0xfffffcbc
 8002d94:	fffffcba 	.word	0xfffffcba
 8002d98:	48000400 	.word	0x48000400
 8002d9c:	0800601c 	.word	0x0800601c
 8002da0:	fffffdfc 	.word	0xfffffdfc
 8002da4:	200000a8 	.word	0x200000a8
 8002da8:	fffffcc0 	.word	0xfffffcc0

08002dac <TFT9341_Draw_Temp_Line>:

void TFT9341_Draw_Temp_Line(uint8_t number)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	0002      	movs	r2, r0
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	701a      	strb	r2, [r3, #0]

	if(number>12)
 8002db8:	1dfb      	adds	r3, r7, #7
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d902      	bls.n	8002dc6 <TFT9341_Draw_Temp_Line+0x1a>
		number = 12;
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<12;i++)
 8002dc6:	230f      	movs	r3, #15
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e03c      	b.n	8002e4a <TFT9341_Draw_Temp_Line+0x9e>
	{
		if(i<number)
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	18fa      	adds	r2, r7, r3
 8002dd4:	1dfb      	adds	r3, r7, #7
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d21a      	bcs.n	8002e14 <TFT9341_Draw_Temp_Line+0x68>
			TFT9341_FillRect(i*20, 160, 19+i*20, 180, temp_color[i]);
 8002dde:	240f      	movs	r4, #15
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2214      	movs	r2, #20
 8002de8:	4353      	muls	r3, r2
 8002dea:	b298      	uxth	r0, r3
 8002dec:	193b      	adds	r3, r7, r4
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2214      	movs	r2, #20
 8002df4:	4353      	muls	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3313      	adds	r3, #19
 8002dfa:	b299      	uxth	r1, r3
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <TFT9341_Draw_Temp_Line+0xb0>)
 8002e02:	0052      	lsls	r2, r2, #1
 8002e04:	5ad3      	ldrh	r3, [r2, r3]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	23b4      	movs	r3, #180	; 0xb4
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	21a0      	movs	r1, #160	; 0xa0
 8002e0e:	f7ff fd19 	bl	8002844 <TFT9341_FillRect>
 8002e12:	e014      	b.n	8002e3e <TFT9341_Draw_Temp_Line+0x92>
		else
			TFT9341_FillRect(i*20, 160, 19+i*20, 180, BLACK);
 8002e14:	210f      	movs	r1, #15
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2214      	movs	r2, #20
 8002e1e:	4353      	muls	r3, r2
 8002e20:	b298      	uxth	r0, r3
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2214      	movs	r2, #20
 8002e2a:	4353      	muls	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3313      	adds	r3, #19
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	2300      	movs	r3, #0
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	23b4      	movs	r3, #180	; 0xb4
 8002e38:	21a0      	movs	r1, #160	; 0xa0
 8002e3a:	f7ff fd03 	bl	8002844 <TFT9341_FillRect>
	for(uint8_t i=0;i<12;i++)
 8002e3e:	210f      	movs	r1, #15
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	781a      	ldrb	r2, [r3, #0]
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	3201      	adds	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b0b      	cmp	r3, #11
 8002e52:	d9bd      	bls.n	8002dd0 <TFT9341_Draw_Temp_Line+0x24>
	}
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b005      	add	sp, #20
 8002e5a:	bd90      	pop	{r4, r7, pc}
 8002e5c:	08006004 	.word	0x08006004

08002e60 <TFT9341_Clear>:
//-------------------------------------------------------------------
void TFT9341_Clear()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
	TFT9341_FillScreen(BLACK);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7ff fe0c 	bl	8002a84 <TFT9341_FillScreen>
	uint8_t data_0[] = { 0xFF, 0xFF };
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	4a69      	ldr	r2, [pc, #420]	; (8003014 <TFT9341_Clear+0x1b4>)
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	801a      	strh	r2, [r3, #0]
	uint8_t data_1[] = { 0x00, 0x00 };
 8002e74:	003b      	movs	r3, r7
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	003b      	movs	r3, r7
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	705a      	strb	r2, [r3, #1]

	//вывод надписи "напряжение,в"
	TFT9341_SetAddrWindow(WORK_W+45, WORK_H, (45+152+WORK_W-1), (20+WORK_H-1));
 8002e80:	232b      	movs	r3, #43	; 0x2b
 8002e82:	22c7      	movs	r2, #199	; 0xc7
 8002e84:	2118      	movs	r1, #24
 8002e86:	2030      	movs	r0, #48	; 0x30
 8002e88:	f7ff fc80 	bl	800278c <TFT9341_SetAddrWindow>
	DC_DATA();
 8002e8c:	4b62      	ldr	r3, [pc, #392]	; (8003018 <TFT9341_Clear+0x1b8>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2101      	movs	r1, #1
 8002e92:	0018      	movs	r0, r3
 8002e94:	f001 fbf6 	bl	8004684 <HAL_GPIO_WritePin>
	for(uint32_t i = 0; i < 380; i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e027      	b.n	8002eee <TFT9341_Clear+0x8e>
	{
		for(uint32_t j = 0; j < 8; j++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	e01e      	b.n	8002ee2 <TFT9341_Clear+0x82>
		{
			if((image_data_U[i]>>(7-j))&0x01 == 1)
 8002ea4:	4a5d      	ldr	r2, [pc, #372]	; (800301c <TFT9341_Clear+0x1bc>)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	18d3      	adds	r3, r2, r3
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	0019      	movs	r1, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	4119      	asrs	r1, r3
 8002eb6:	000b      	movs	r3, r1
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TFT9341_Clear+0x6e>
				HAL_SPI_Transmit(&hspi1, data_1, 2, HAL_MAX_DELAY);
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	425b      	negs	r3, r3
 8002ec2:	0039      	movs	r1, r7
 8002ec4:	4856      	ldr	r0, [pc, #344]	; (8003020 <TFT9341_Clear+0x1c0>)
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f002 f9d0 	bl	800526c <HAL_SPI_Transmit>
 8002ecc:	e006      	b.n	8002edc <TFT9341_Clear+0x7c>
			else
				HAL_SPI_Transmit(&hspi1, data_0, 2, HAL_MAX_DELAY);
 8002ece:	2301      	movs	r3, #1
 8002ed0:	425b      	negs	r3, r3
 8002ed2:	1d39      	adds	r1, r7, #4
 8002ed4:	4852      	ldr	r0, [pc, #328]	; (8003020 <TFT9341_Clear+0x1c0>)
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f002 f9c8 	bl	800526c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < 8; j++)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b07      	cmp	r3, #7
 8002ee6:	d9dd      	bls.n	8002ea4 <TFT9341_Clear+0x44>
	for(uint32_t i = 0; i < 380; i++)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3301      	adds	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	237c      	movs	r3, #124	; 0x7c
 8002ef2:	33ff      	adds	r3, #255	; 0xff
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d9d2      	bls.n	8002e9e <TFT9341_Clear+0x3e>
		}
	}

	//вывод надписи "сила тока, А"
	TFT9341_SetAddrWindow(WORK_W+58, 300, (58+120+WORK_W-1), (319));
 8002ef8:	2340      	movs	r3, #64	; 0x40
 8002efa:	33ff      	adds	r3, #255	; 0xff
 8002efc:	001a      	movs	r2, r3
 8002efe:	2396      	movs	r3, #150	; 0x96
 8002f00:	0059      	lsls	r1, r3, #1
 8002f02:	0013      	movs	r3, r2
 8002f04:	22b4      	movs	r2, #180	; 0xb4
 8002f06:	203d      	movs	r0, #61	; 0x3d
 8002f08:	f7ff fc40 	bl	800278c <TFT9341_SetAddrWindow>
	DC_DATA();
 8002f0c:	4b42      	ldr	r3, [pc, #264]	; (8003018 <TFT9341_Clear+0x1b8>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2101      	movs	r1, #1
 8002f12:	0018      	movs	r0, r3
 8002f14:	f001 fbb6 	bl	8004684 <HAL_GPIO_WritePin>
	for(uint32_t i = 0; i < 300; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e027      	b.n	8002f6e <TFT9341_Clear+0x10e>
	{
		for(uint32_t j = 0; j < 8; j++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	e01e      	b.n	8002f62 <TFT9341_Clear+0x102>
		{
			if((image_data_I[i]>>(7-j))&0x01 == 1)
 8002f24:	4a3f      	ldr	r2, [pc, #252]	; (8003024 <TFT9341_Clear+0x1c4>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	18d3      	adds	r3, r2, r3
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2207      	movs	r2, #7
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	4119      	asrs	r1, r3
 8002f36:	000b      	movs	r3, r1
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <TFT9341_Clear+0xee>
				HAL_SPI_Transmit(&hspi1, data_1, 2, HAL_MAX_DELAY);
 8002f3e:	2301      	movs	r3, #1
 8002f40:	425b      	negs	r3, r3
 8002f42:	0039      	movs	r1, r7
 8002f44:	4836      	ldr	r0, [pc, #216]	; (8003020 <TFT9341_Clear+0x1c0>)
 8002f46:	2202      	movs	r2, #2
 8002f48:	f002 f990 	bl	800526c <HAL_SPI_Transmit>
 8002f4c:	e006      	b.n	8002f5c <TFT9341_Clear+0xfc>
			else
				HAL_SPI_Transmit(&hspi1, data_0, 2, HAL_MAX_DELAY);
 8002f4e:	2301      	movs	r3, #1
 8002f50:	425b      	negs	r3, r3
 8002f52:	1d39      	adds	r1, r7, #4
 8002f54:	4832      	ldr	r0, [pc, #200]	; (8003020 <TFT9341_Clear+0x1c0>)
 8002f56:	2202      	movs	r2, #2
 8002f58:	f002 f988 	bl	800526c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < 8; j++)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b07      	cmp	r3, #7
 8002f66:	d9dd      	bls.n	8002f24 <TFT9341_Clear+0xc4>
	for(uint32_t i = 0; i < 300; i++)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	232c      	movs	r3, #44	; 0x2c
 8002f72:	33ff      	adds	r3, #255	; 0xff
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d9d2      	bls.n	8002f1e <TFT9341_Clear+0xbe>
		}
	}

	TFT9341_Draw_Number(0,14, 60, 85, 148,WHITE);
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <TFT9341_Clear+0x1c8>)
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	2394      	movs	r3, #148	; 0x94
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2355      	movs	r3, #85	; 0x55
 8002f82:	223c      	movs	r2, #60	; 0x3c
 8002f84:	210e      	movs	r1, #14
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7ff fd9a 	bl	8002ac0 <TFT9341_Draw_Number>
	TFT9341_Draw_Number(0,91, 60, 162, 148,WHITE);
 8002f8c:	4b26      	ldr	r3, [pc, #152]	; (8003028 <TFT9341_Clear+0x1c8>)
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2394      	movs	r3, #148	; 0x94
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	23a2      	movs	r3, #162	; 0xa2
 8002f96:	223c      	movs	r2, #60	; 0x3c
 8002f98:	215b      	movs	r1, #91	; 0x5b
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7ff fd90 	bl	8002ac0 <TFT9341_Draw_Number>
	TFT9341_Draw_Number(0,168, 60, 239, 148,WHITE);
 8002fa0:	4b21      	ldr	r3, [pc, #132]	; (8003028 <TFT9341_Clear+0x1c8>)
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	2394      	movs	r3, #148	; 0x94
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	23ef      	movs	r3, #239	; 0xef
 8002faa:	223c      	movs	r2, #60	; 0x3c
 8002fac:	21a8      	movs	r1, #168	; 0xa8
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7ff fd86 	bl	8002ac0 <TFT9341_Draw_Number>

	TFT9341_Draw_Number(0,14, 192, 85, 280,YELLOW);
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <TFT9341_Clear+0x1cc>)
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	238c      	movs	r3, #140	; 0x8c
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2355      	movs	r3, #85	; 0x55
 8002fc0:	22c0      	movs	r2, #192	; 0xc0
 8002fc2:	210e      	movs	r1, #14
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7ff fd7b 	bl	8002ac0 <TFT9341_Draw_Number>
	TFT9341_Draw_Number(0,91, 192, 162, 280,YELLOW);
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <TFT9341_Clear+0x1cc>)
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	238c      	movs	r3, #140	; 0x8c
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	23a2      	movs	r3, #162	; 0xa2
 8002fd6:	22c0      	movs	r2, #192	; 0xc0
 8002fd8:	215b      	movs	r1, #91	; 0x5b
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7ff fd70 	bl	8002ac0 <TFT9341_Draw_Number>
	TFT9341_Draw_Number(0,168, 192, 239, 280,YELLOW);
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <TFT9341_Clear+0x1cc>)
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	238c      	movs	r3, #140	; 0x8c
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	23ef      	movs	r3, #239	; 0xef
 8002fec:	22c0      	movs	r2, #192	; 0xc0
 8002fee:	21a8      	movs	r1, #168	; 0xa8
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7ff fd65 	bl	8002ac0 <TFT9341_Draw_Number>

	TFT9341_FillRect(0, 159, 239, 181, WHITE);
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <TFT9341_Clear+0x1c8>)
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	23b5      	movs	r3, #181	; 0xb5
 8002ffc:	22ef      	movs	r2, #239	; 0xef
 8002ffe:	219f      	movs	r1, #159	; 0x9f
 8003000:	2000      	movs	r0, #0
 8003002:	f7ff fc1f 	bl	8002844 <TFT9341_FillRect>
	TFT9341_Draw_Temp_Line(12);
 8003006:	200c      	movs	r0, #12
 8003008:	f7ff fed0 	bl	8002dac <TFT9341_Draw_Temp_Line>

}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b006      	add	sp, #24
 8003012:	bd80      	pop	{r7, pc}
 8003014:	08005f20 	.word	0x08005f20
 8003018:	48000400 	.word	0x48000400
 800301c:	08007f68 	.word	0x08007f68
 8003020:	200000a8 	.word	0x200000a8
 8003024:	080080e4 	.word	0x080080e4
 8003028:	0000ffff 	.word	0x0000ffff
 800302c:	0000ffe0 	.word	0x0000ffe0

08003030 <TFT9341_Draw_Point_U>:

void TFT9341_Draw_Point_U(uint8_t n)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af02      	add	r7, sp, #8
 8003036:	0002      	movs	r2, r0
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	701a      	strb	r2, [r3, #0]
	if(n==1)
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d110      	bne.n	8003066 <TFT9341_Draw_Point_U+0x36>
	{
		TFT9341_FillRect(76, 144, 84, 154, WHITE);
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <TFT9341_Draw_Point_U+0x60>)
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	239a      	movs	r3, #154	; 0x9a
 800304a:	2254      	movs	r2, #84	; 0x54
 800304c:	2190      	movs	r1, #144	; 0x90
 800304e:	204c      	movs	r0, #76	; 0x4c
 8003050:	f7ff fbf8 	bl	8002844 <TFT9341_FillRect>
		TFT9341_FillRect(153, 144, 161, 154, BLACK);
 8003054:	2300      	movs	r3, #0
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	239a      	movs	r3, #154	; 0x9a
 800305a:	22a1      	movs	r2, #161	; 0xa1
 800305c:	2190      	movs	r1, #144	; 0x90
 800305e:	2099      	movs	r0, #153	; 0x99
 8003060:	f7ff fbf0 	bl	8002844 <TFT9341_FillRect>
	else
	{
		TFT9341_FillRect(153, 144, 161, 154, WHITE);
		TFT9341_FillRect(76, 144, 84, 154, BLACK);
	}
}
 8003064:	e00f      	b.n	8003086 <TFT9341_Draw_Point_U+0x56>
		TFT9341_FillRect(153, 144, 161, 154, WHITE);
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <TFT9341_Draw_Point_U+0x60>)
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	239a      	movs	r3, #154	; 0x9a
 800306c:	22a1      	movs	r2, #161	; 0xa1
 800306e:	2190      	movs	r1, #144	; 0x90
 8003070:	2099      	movs	r0, #153	; 0x99
 8003072:	f7ff fbe7 	bl	8002844 <TFT9341_FillRect>
		TFT9341_FillRect(76, 144, 84, 154, BLACK);
 8003076:	2300      	movs	r3, #0
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	239a      	movs	r3, #154	; 0x9a
 800307c:	2254      	movs	r2, #84	; 0x54
 800307e:	2190      	movs	r1, #144	; 0x90
 8003080:	204c      	movs	r0, #76	; 0x4c
 8003082:	f7ff fbdf 	bl	8002844 <TFT9341_FillRect>
}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	0000ffff 	.word	0x0000ffff

08003094 <TFT9341_Draw_Point_I>:

void TFT9341_Draw_Point_I(uint8_t n)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af02      	add	r7, sp, #8
 800309a:	0002      	movs	r2, r0
 800309c:	1dfb      	adds	r3, r7, #7
 800309e:	701a      	strb	r2, [r3, #0]
	if(n==1)
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d116      	bne.n	80030d6 <TFT9341_Draw_Point_I+0x42>
	{
		TFT9341_FillRect(153, 278, 161, 288, BLACK);
 80030a8:	2390      	movs	r3, #144	; 0x90
 80030aa:	005a      	lsls	r2, r3, #1
 80030ac:	238b      	movs	r3, #139	; 0x8b
 80030ae:	0059      	lsls	r1, r3, #1
 80030b0:	2300      	movs	r3, #0
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	0013      	movs	r3, r2
 80030b6:	22a1      	movs	r2, #161	; 0xa1
 80030b8:	2099      	movs	r0, #153	; 0x99
 80030ba:	f7ff fbc3 	bl	8002844 <TFT9341_FillRect>
		TFT9341_FillRect(76, 278, 83, 288, WHITE);
 80030be:	2390      	movs	r3, #144	; 0x90
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	238b      	movs	r3, #139	; 0x8b
 80030c4:	0059      	lsls	r1, r3, #1
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <TFT9341_Draw_Point_I+0x78>)
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	0013      	movs	r3, r2
 80030cc:	2253      	movs	r2, #83	; 0x53
 80030ce:	204c      	movs	r0, #76	; 0x4c
 80030d0:	f7ff fbb8 	bl	8002844 <TFT9341_FillRect>
	else
	{
		TFT9341_FillRect(76, 278, 83, 288, BLACK);
		TFT9341_FillRect(153, 278, 161, 288, WHITE);
	}
}
 80030d4:	e015      	b.n	8003102 <TFT9341_Draw_Point_I+0x6e>
		TFT9341_FillRect(76, 278, 83, 288, BLACK);
 80030d6:	2390      	movs	r3, #144	; 0x90
 80030d8:	005a      	lsls	r2, r3, #1
 80030da:	238b      	movs	r3, #139	; 0x8b
 80030dc:	0059      	lsls	r1, r3, #1
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	0013      	movs	r3, r2
 80030e4:	2253      	movs	r2, #83	; 0x53
 80030e6:	204c      	movs	r0, #76	; 0x4c
 80030e8:	f7ff fbac 	bl	8002844 <TFT9341_FillRect>
		TFT9341_FillRect(153, 278, 161, 288, WHITE);
 80030ec:	2390      	movs	r3, #144	; 0x90
 80030ee:	005a      	lsls	r2, r3, #1
 80030f0:	238b      	movs	r3, #139	; 0x8b
 80030f2:	0059      	lsls	r1, r3, #1
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <TFT9341_Draw_Point_I+0x78>)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	0013      	movs	r3, r2
 80030fa:	22a1      	movs	r2, #161	; 0xa1
 80030fc:	2099      	movs	r0, #153	; 0x99
 80030fe:	f7ff fba1 	bl	8002844 <TFT9341_FillRect>
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	0000ffff 	.word	0x0000ffff

08003110 <TFT9341_Draw_U>:
//-------------------------------------------------------------------
void TFT9341_Draw_U(float U)
{
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
 8003116:	6078      	str	r0, [r7, #4]
	uint16_t  Temp = roundf(U * 100.0);
 8003118:	495c      	ldr	r1, [pc, #368]	; (800328c <TFT9341_Draw_U+0x17c>)
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fc1c 	bl	8000958 <__aeabi_fmul>
 8003120:	1c03      	adds	r3, r0, #0
 8003122:	1c18      	adds	r0, r3, #0
 8003124:	f002 fecc 	bl	8005ec0 <roundf>
 8003128:	1c03      	adds	r3, r0, #0
 800312a:	250e      	movs	r5, #14
 800312c:	197c      	adds	r4, r7, r5
 800312e:	1c18      	adds	r0, r3, #0
 8003130:	f7fd f99a 	bl	8000468 <__aeabi_f2uiz>
 8003134:	0003      	movs	r3, r0
 8003136:	8023      	strh	r3, [r4, #0]

	if(Temp<999)
 8003138:	197b      	adds	r3, r7, r5
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	4a54      	ldr	r2, [pc, #336]	; (8003290 <TFT9341_Draw_U+0x180>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d846      	bhi.n	80031d0 <TFT9341_Draw_U+0xc0>
	{
		TFT9341_Draw_Number(Temp/100,14, 60, 85, 148,WHITE);
 8003142:	240e      	movs	r4, #14
 8003144:	193b      	adds	r3, r7, r4
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	2164      	movs	r1, #100	; 0x64
 800314a:	0018      	movs	r0, r3
 800314c:	f7fc ffdc 	bl	8000108 <__udivsi3>
 8003150:	0003      	movs	r3, r0
 8003152:	b29b      	uxth	r3, r3
 8003154:	b2d8      	uxtb	r0, r3
 8003156:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <TFT9341_Draw_U+0x184>)
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	2394      	movs	r3, #148	; 0x94
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2355      	movs	r3, #85	; 0x55
 8003160:	223c      	movs	r2, #60	; 0x3c
 8003162:	210e      	movs	r1, #14
 8003164:	f7ff fcac 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Number((Temp%100)/10,91, 60, 162, 148,WHITE);
 8003168:	193b      	adds	r3, r7, r4
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	2164      	movs	r1, #100	; 0x64
 800316e:	0018      	movs	r0, r3
 8003170:	f7fd f850 	bl	8000214 <__aeabi_uidivmod>
 8003174:	000b      	movs	r3, r1
 8003176:	b29b      	uxth	r3, r3
 8003178:	210a      	movs	r1, #10
 800317a:	0018      	movs	r0, r3
 800317c:	f7fc ffc4 	bl	8000108 <__udivsi3>
 8003180:	0003      	movs	r3, r0
 8003182:	b29b      	uxth	r3, r3
 8003184:	b2d8      	uxtb	r0, r3
 8003186:	4b43      	ldr	r3, [pc, #268]	; (8003294 <TFT9341_Draw_U+0x184>)
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2394      	movs	r3, #148	; 0x94
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	23a2      	movs	r3, #162	; 0xa2
 8003190:	223c      	movs	r2, #60	; 0x3c
 8003192:	215b      	movs	r1, #91	; 0x5b
 8003194:	f7ff fc94 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Number((Temp%100)%10,168, 60, 239, 148,WHITE);
 8003198:	193b      	adds	r3, r7, r4
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	2164      	movs	r1, #100	; 0x64
 800319e:	0018      	movs	r0, r3
 80031a0:	f7fd f838 	bl	8000214 <__aeabi_uidivmod>
 80031a4:	000b      	movs	r3, r1
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	210a      	movs	r1, #10
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7fd f832 	bl	8000214 <__aeabi_uidivmod>
 80031b0:	000b      	movs	r3, r1
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	b2d8      	uxtb	r0, r3
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <TFT9341_Draw_U+0x184>)
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	2394      	movs	r3, #148	; 0x94
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	23ef      	movs	r3, #239	; 0xef
 80031c0:	223c      	movs	r2, #60	; 0x3c
 80031c2:	21a8      	movs	r1, #168	; 0xa8
 80031c4:	f7ff fc7c 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Point_U(1);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7ff ff31 	bl	8003030 <TFT9341_Draw_Point_U>
		TFT9341_Draw_Number(Temp/100,14, 60, 85, 148,WHITE);
		TFT9341_Draw_Number((Temp%100)/10,91, 60, 162, 148,WHITE);
		TFT9341_Draw_Number((Temp%100)%10,168, 60, 239, 148,WHITE);
		TFT9341_Draw_Point_U(0);
	}
}
 80031ce:	e059      	b.n	8003284 <TFT9341_Draw_U+0x174>
		Temp = roundf(Temp/10);
 80031d0:	240e      	movs	r4, #14
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	210a      	movs	r1, #10
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fc ff95 	bl	8000108 <__udivsi3>
 80031de:	0003      	movs	r3, r0
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7fd fece 	bl	8000f84 <__aeabi_i2f>
 80031e8:	1c03      	adds	r3, r0, #0
 80031ea:	0025      	movs	r5, r4
 80031ec:	193c      	adds	r4, r7, r4
 80031ee:	1c18      	adds	r0, r3, #0
 80031f0:	f7fd f93a 	bl	8000468 <__aeabi_f2uiz>
 80031f4:	0003      	movs	r3, r0
 80031f6:	8023      	strh	r3, [r4, #0]
		TFT9341_Draw_Number(Temp/100,14, 60, 85, 148,WHITE);
 80031f8:	002c      	movs	r4, r5
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	0018      	movs	r0, r3
 8003202:	f7fc ff81 	bl	8000108 <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	b29b      	uxth	r3, r3
 800320a:	b2d8      	uxtb	r0, r3
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <TFT9341_Draw_U+0x184>)
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	2394      	movs	r3, #148	; 0x94
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2355      	movs	r3, #85	; 0x55
 8003216:	223c      	movs	r2, #60	; 0x3c
 8003218:	210e      	movs	r1, #14
 800321a:	f7ff fc51 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Number((Temp%100)/10,91, 60, 162, 148,WHITE);
 800321e:	193b      	adds	r3, r7, r4
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	2164      	movs	r1, #100	; 0x64
 8003224:	0018      	movs	r0, r3
 8003226:	f7fc fff5 	bl	8000214 <__aeabi_uidivmod>
 800322a:	000b      	movs	r3, r1
 800322c:	b29b      	uxth	r3, r3
 800322e:	210a      	movs	r1, #10
 8003230:	0018      	movs	r0, r3
 8003232:	f7fc ff69 	bl	8000108 <__udivsi3>
 8003236:	0003      	movs	r3, r0
 8003238:	b29b      	uxth	r3, r3
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <TFT9341_Draw_U+0x184>)
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	2394      	movs	r3, #148	; 0x94
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	23a2      	movs	r3, #162	; 0xa2
 8003246:	223c      	movs	r2, #60	; 0x3c
 8003248:	215b      	movs	r1, #91	; 0x5b
 800324a:	f7ff fc39 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Number((Temp%100)%10,168, 60, 239, 148,WHITE);
 800324e:	193b      	adds	r3, r7, r4
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	0018      	movs	r0, r3
 8003256:	f7fc ffdd 	bl	8000214 <__aeabi_uidivmod>
 800325a:	000b      	movs	r3, r1
 800325c:	b29b      	uxth	r3, r3
 800325e:	210a      	movs	r1, #10
 8003260:	0018      	movs	r0, r3
 8003262:	f7fc ffd7 	bl	8000214 <__aeabi_uidivmod>
 8003266:	000b      	movs	r3, r1
 8003268:	b29b      	uxth	r3, r3
 800326a:	b2d8      	uxtb	r0, r3
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <TFT9341_Draw_U+0x184>)
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2394      	movs	r3, #148	; 0x94
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	23ef      	movs	r3, #239	; 0xef
 8003276:	223c      	movs	r2, #60	; 0x3c
 8003278:	21a8      	movs	r1, #168	; 0xa8
 800327a:	f7ff fc21 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Point_U(0);
 800327e:	2000      	movs	r0, #0
 8003280:	f7ff fed6 	bl	8003030 <TFT9341_Draw_Point_U>
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bdb0      	pop	{r4, r5, r7, pc}
 800328c:	42c80000 	.word	0x42c80000
 8003290:	000003e6 	.word	0x000003e6
 8003294:	0000ffff 	.word	0x0000ffff

08003298 <TFT9341_Draw_I>:

void TFT9341_Draw_I(float I)
{
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af02      	add	r7, sp, #8
 800329e:	6078      	str	r0, [r7, #4]
	uint16_t Temp=0;
 80032a0:	230e      	movs	r3, #14
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	801a      	strh	r2, [r3, #0]

	if(I<10.0)
 80032a8:	495f      	ldr	r1, [pc, #380]	; (8003428 <TFT9341_Draw_I+0x190>)
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd f8b4 	bl	8000418 <__aeabi_fcmplt>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d05a      	beq.n	800336a <TFT9341_Draw_I+0xd2>
	{
		Temp = roundf(I * 100.0);
 80032b4:	495d      	ldr	r1, [pc, #372]	; (800342c <TFT9341_Draw_I+0x194>)
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fb4e 	bl	8000958 <__aeabi_fmul>
 80032bc:	1c03      	adds	r3, r0, #0
 80032be:	1c18      	adds	r0, r3, #0
 80032c0:	f002 fdfe 	bl	8005ec0 <roundf>
 80032c4:	1c03      	adds	r3, r0, #0
 80032c6:	240e      	movs	r4, #14
 80032c8:	0025      	movs	r5, r4
 80032ca:	193c      	adds	r4, r7, r4
 80032cc:	1c18      	adds	r0, r3, #0
 80032ce:	f7fd f8cb 	bl	8000468 <__aeabi_f2uiz>
 80032d2:	0003      	movs	r3, r0
 80032d4:	8023      	strh	r3, [r4, #0]
		TFT9341_Draw_Number(Temp/100,14, 192, 85, 280,YELLOW);
 80032d6:	002c      	movs	r4, r5
 80032d8:	193b      	adds	r3, r7, r4
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	2164      	movs	r1, #100	; 0x64
 80032de:	0018      	movs	r0, r3
 80032e0:	f7fc ff12 	bl	8000108 <__udivsi3>
 80032e4:	0003      	movs	r3, r0
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	b2d8      	uxtb	r0, r3
 80032ea:	4b51      	ldr	r3, [pc, #324]	; (8003430 <TFT9341_Draw_I+0x198>)
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	238c      	movs	r3, #140	; 0x8c
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2355      	movs	r3, #85	; 0x55
 80032f6:	22c0      	movs	r2, #192	; 0xc0
 80032f8:	210e      	movs	r1, #14
 80032fa:	f7ff fbe1 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Number((Temp%100)/10,91, 192, 162, 280,YELLOW);
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	2164      	movs	r1, #100	; 0x64
 8003304:	0018      	movs	r0, r3
 8003306:	f7fc ff85 	bl	8000214 <__aeabi_uidivmod>
 800330a:	000b      	movs	r3, r1
 800330c:	b29b      	uxth	r3, r3
 800330e:	210a      	movs	r1, #10
 8003310:	0018      	movs	r0, r3
 8003312:	f7fc fef9 	bl	8000108 <__udivsi3>
 8003316:	0003      	movs	r3, r0
 8003318:	b29b      	uxth	r3, r3
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	4b44      	ldr	r3, [pc, #272]	; (8003430 <TFT9341_Draw_I+0x198>)
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	238c      	movs	r3, #140	; 0x8c
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	23a2      	movs	r3, #162	; 0xa2
 8003328:	22c0      	movs	r2, #192	; 0xc0
 800332a:	215b      	movs	r1, #91	; 0x5b
 800332c:	f7ff fbc8 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Number((Temp%100)%10,168, 192, 239, 280,YELLOW);
 8003330:	193b      	adds	r3, r7, r4
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	2164      	movs	r1, #100	; 0x64
 8003336:	0018      	movs	r0, r3
 8003338:	f7fc ff6c 	bl	8000214 <__aeabi_uidivmod>
 800333c:	000b      	movs	r3, r1
 800333e:	b29b      	uxth	r3, r3
 8003340:	210a      	movs	r1, #10
 8003342:	0018      	movs	r0, r3
 8003344:	f7fc ff66 	bl	8000214 <__aeabi_uidivmod>
 8003348:	000b      	movs	r3, r1
 800334a:	b29b      	uxth	r3, r3
 800334c:	b2d8      	uxtb	r0, r3
 800334e:	4b38      	ldr	r3, [pc, #224]	; (8003430 <TFT9341_Draw_I+0x198>)
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	238c      	movs	r3, #140	; 0x8c
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	23ef      	movs	r3, #239	; 0xef
 800335a:	22c0      	movs	r2, #192	; 0xc0
 800335c:	21a8      	movs	r1, #168	; 0xa8
 800335e:	f7ff fbaf 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Point_I(1);
 8003362:	2001      	movs	r0, #1
 8003364:	f7ff fe96 	bl	8003094 <TFT9341_Draw_Point_I>
		TFT9341_Draw_Number(Temp/100,14, 192, 85, 280,YELLOW);
		TFT9341_Draw_Number((Temp%100)/10,91, 192, 162, 280,YELLOW);
		TFT9341_Draw_Number((Temp%100)%10,168, 192, 239, 280,YELLOW);
		TFT9341_Draw_Point_I(0);
	}
}
 8003368:	e059      	b.n	800341e <TFT9341_Draw_I+0x186>
		Temp = roundf(I * 10.0);
 800336a:	492f      	ldr	r1, [pc, #188]	; (8003428 <TFT9341_Draw_I+0x190>)
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7fd faf3 	bl	8000958 <__aeabi_fmul>
 8003372:	1c03      	adds	r3, r0, #0
 8003374:	1c18      	adds	r0, r3, #0
 8003376:	f002 fda3 	bl	8005ec0 <roundf>
 800337a:	1c03      	adds	r3, r0, #0
 800337c:	240e      	movs	r4, #14
 800337e:	0025      	movs	r5, r4
 8003380:	193c      	adds	r4, r7, r4
 8003382:	1c18      	adds	r0, r3, #0
 8003384:	f7fd f870 	bl	8000468 <__aeabi_f2uiz>
 8003388:	0003      	movs	r3, r0
 800338a:	8023      	strh	r3, [r4, #0]
		TFT9341_Draw_Number(Temp/100,14, 192, 85, 280,YELLOW);
 800338c:	002c      	movs	r4, r5
 800338e:	193b      	adds	r3, r7, r4
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	2164      	movs	r1, #100	; 0x64
 8003394:	0018      	movs	r0, r3
 8003396:	f7fc feb7 	bl	8000108 <__udivsi3>
 800339a:	0003      	movs	r3, r0
 800339c:	b29b      	uxth	r3, r3
 800339e:	b2d8      	uxtb	r0, r3
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <TFT9341_Draw_I+0x198>)
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	238c      	movs	r3, #140	; 0x8c
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	2355      	movs	r3, #85	; 0x55
 80033ac:	22c0      	movs	r2, #192	; 0xc0
 80033ae:	210e      	movs	r1, #14
 80033b0:	f7ff fb86 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Number((Temp%100)/10,91, 192, 162, 280,YELLOW);
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	2164      	movs	r1, #100	; 0x64
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7fc ff2a 	bl	8000214 <__aeabi_uidivmod>
 80033c0:	000b      	movs	r3, r1
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	210a      	movs	r1, #10
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fc fe9e 	bl	8000108 <__udivsi3>
 80033cc:	0003      	movs	r3, r0
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	b2d8      	uxtb	r0, r3
 80033d2:	4b17      	ldr	r3, [pc, #92]	; (8003430 <TFT9341_Draw_I+0x198>)
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	238c      	movs	r3, #140	; 0x8c
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	23a2      	movs	r3, #162	; 0xa2
 80033de:	22c0      	movs	r2, #192	; 0xc0
 80033e0:	215b      	movs	r1, #91	; 0x5b
 80033e2:	f7ff fb6d 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Number((Temp%100)%10,168, 192, 239, 280,YELLOW);
 80033e6:	193b      	adds	r3, r7, r4
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	2164      	movs	r1, #100	; 0x64
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fc ff11 	bl	8000214 <__aeabi_uidivmod>
 80033f2:	000b      	movs	r3, r1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	210a      	movs	r1, #10
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7fc ff0b 	bl	8000214 <__aeabi_uidivmod>
 80033fe:	000b      	movs	r3, r1
 8003400:	b29b      	uxth	r3, r3
 8003402:	b2d8      	uxtb	r0, r3
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <TFT9341_Draw_I+0x198>)
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	238c      	movs	r3, #140	; 0x8c
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	23ef      	movs	r3, #239	; 0xef
 8003410:	22c0      	movs	r2, #192	; 0xc0
 8003412:	21a8      	movs	r1, #168	; 0xa8
 8003414:	f7ff fb54 	bl	8002ac0 <TFT9341_Draw_Number>
		TFT9341_Draw_Point_I(0);
 8003418:	2000      	movs	r0, #0
 800341a:	f7ff fe3b 	bl	8003094 <TFT9341_Draw_Point_I>
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bdb0      	pop	{r4, r5, r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	41200000 	.word	0x41200000
 800342c:	42c80000 	.word	0x42c80000
 8003430:	0000ffe0 	.word	0x0000ffe0

08003434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_MspInit+0x44>)
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_MspInit+0x44>)
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	619a      	str	r2, [r3, #24]
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_MspInit+0x44>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_MspInit+0x44>)
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_MspInit+0x44>)
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	0549      	lsls	r1, r1, #21
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_MspInit+0x44>)
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	055b      	lsls	r3, r3, #21
 8003468:	4013      	ands	r3, r2
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	2314      	movs	r3, #20
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	0018      	movs	r0, r3
 800348a:	2314      	movs	r3, #20
 800348c:	001a      	movs	r2, r3
 800348e:	2100      	movs	r1, #0
 8003490:	f002 fd0e 	bl	8005eb0 <memset>
  if(hadc->Instance==ADC1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_ADC_MspInit+0x84>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d12c      	bne.n	80034f8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_ADC_MspInit+0x88>)
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_ADC_MspInit+0x88>)
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	0089      	lsls	r1, r1, #2
 80034a8:	430a      	orrs	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_ADC_MspInit+0x88>)
 80034ae:	699a      	ldr	r2, [r3, #24]
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_ADC_MspInit+0x88>)
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_ADC_MspInit+0x88>)
 80034c0:	2180      	movs	r1, #128	; 0x80
 80034c2:	0289      	lsls	r1, r1, #10
 80034c4:	430a      	orrs	r2, r1
 80034c6:	615a      	str	r2, [r3, #20]
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_ADC_MspInit+0x88>)
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	029b      	lsls	r3, r3, #10
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80034d6:	2114      	movs	r1, #20
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	221e      	movs	r2, #30
 80034dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2203      	movs	r2, #3
 80034e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	187a      	adds	r2, r7, r1
 80034ec:	2390      	movs	r3, #144	; 0x90
 80034ee:	05db      	lsls	r3, r3, #23
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f000 ff56 	bl	80043a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b00a      	add	sp, #40	; 0x28
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40012400 	.word	0x40012400
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	2314      	movs	r3, #20
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	0018      	movs	r0, r3
 8003516:	2314      	movs	r3, #20
 8003518:	001a      	movs	r2, r3
 800351a:	2100      	movs	r1, #0
 800351c:	f002 fcc8 	bl	8005eb0 <memset>
  if(hspi->Instance==SPI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <HAL_SPI_MspInit+0x90>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d132      	bne.n	8003590 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800352a:	4b1c      	ldr	r3, [pc, #112]	; (800359c <HAL_SPI_MspInit+0x94>)
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_SPI_MspInit+0x94>)
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	0149      	lsls	r1, r1, #5
 8003534:	430a      	orrs	r2, r1
 8003536:	619a      	str	r2, [r3, #24]
 8003538:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_SPI_MspInit+0x94>)
 800353a:	699a      	ldr	r2, [r3, #24]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	015b      	lsls	r3, r3, #5
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_SPI_MspInit+0x94>)
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_SPI_MspInit+0x94>)
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	0289      	lsls	r1, r1, #10
 8003550:	430a      	orrs	r2, r1
 8003552:	615a      	str	r2, [r3, #20]
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_SPI_MspInit+0x94>)
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	029b      	lsls	r3, r3, #10
 800355c:	4013      	ands	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003562:	2114      	movs	r1, #20
 8003564:	187b      	adds	r3, r7, r1
 8003566:	22e0      	movs	r2, #224	; 0xe0
 8003568:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2202      	movs	r2, #2
 800356e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2203      	movs	r2, #3
 800357a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	187a      	adds	r2, r7, r1
 8003584:	2390      	movs	r3, #144	; 0x90
 8003586:	05db      	lsls	r3, r3, #23
 8003588:	0011      	movs	r1, r2
 800358a:	0018      	movs	r0, r3
 800358c:	f000 ff0a 	bl	80043a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b00a      	add	sp, #40	; 0x28
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013000 	.word	0x40013000
 800359c:	40021000 	.word	0x40021000

080035a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	2314      	movs	r3, #20
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	0018      	movs	r0, r3
 80035ae:	2314      	movs	r3, #20
 80035b0:	001a      	movs	r2, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	f002 fc7c 	bl	8005eb0 <memset>
  if(huart->Instance==USART1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_UART_MspInit+0x94>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d133      	bne.n	800362a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035c2:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_UART_MspInit+0x98>)
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_UART_MspInit+0x98>)
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	01c9      	lsls	r1, r1, #7
 80035cc:	430a      	orrs	r2, r1
 80035ce:	619a      	str	r2, [r3, #24]
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_UART_MspInit+0x98>)
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	01db      	lsls	r3, r3, #7
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <HAL_UART_MspInit+0x98>)
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <HAL_UART_MspInit+0x98>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0289      	lsls	r1, r1, #10
 80035e8:	430a      	orrs	r2, r1
 80035ea:	615a      	str	r2, [r3, #20]
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_UART_MspInit+0x98>)
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	029b      	lsls	r3, r3, #10
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035fa:	2114      	movs	r1, #20
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	22c0      	movs	r2, #192	; 0xc0
 8003600:	00d2      	lsls	r2, r2, #3
 8003602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2202      	movs	r2, #2
 8003608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2203      	movs	r2, #3
 8003614:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2201      	movs	r2, #1
 800361a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361c:	187a      	adds	r2, r7, r1
 800361e:	2390      	movs	r3, #144	; 0x90
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f000 febd 	bl	80043a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b00a      	add	sp, #40	; 0x28
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	40013800 	.word	0x40013800
 8003638:	40021000 	.word	0x40021000

0800363c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800364a:	e7fe      	b.n	800364a <HardFault_Handler+0x4>

0800364c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003664:	f000 f87a 	bl	800375c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003678:	480d      	ldr	r0, [pc, #52]	; (80036b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800367a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800367c:	480d      	ldr	r0, [pc, #52]	; (80036b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800367e:	490e      	ldr	r1, [pc, #56]	; (80036b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003680:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <LoopForever+0xe>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003684:	e002      	b.n	800368c <LoopCopyDataInit>

08003686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368a:	3304      	adds	r3, #4

0800368c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800368c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800368e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003690:	d3f9      	bcc.n	8003686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003692:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003694:	4c0b      	ldr	r4, [pc, #44]	; (80036c4 <LoopForever+0x16>)
  movs r3, #0
 8003696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003698:	e001      	b.n	800369e <LoopFillZerobss>

0800369a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800369c:	3204      	adds	r2, #4

0800369e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800369e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a0:	d3fb      	bcc.n	800369a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80036a2:	f7ff ffe4 	bl	800366e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80036a6:	f002 fbdf 	bl	8005e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036aa:	f7fe fb57 	bl	8001d5c <main>

080036ae <LoopForever>:

LoopForever:
    b LoopForever
 80036ae:	e7fe      	b.n	80036ae <LoopForever>
  ldr   r0, =_estack
 80036b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80036bc:	08008230 	.word	0x08008230
  ldr r2, =_sbss
 80036c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80036c4:	20000154 	.word	0x20000154

080036c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC1_IRQHandler>
	...

080036cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HAL_Init+0x24>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_Init+0x24>)
 80036d6:	2110      	movs	r1, #16
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80036dc:	2000      	movs	r0, #0
 80036de:	f000 f809 	bl	80036f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e2:	f7ff fea7 	bl	8003434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	40022000 	.word	0x40022000

080036f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_InitTick+0x5c>)
 80036fe:	681c      	ldr	r4, [r3, #0]
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <HAL_InitTick+0x60>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	0019      	movs	r1, r3
 8003706:	23fa      	movs	r3, #250	; 0xfa
 8003708:	0098      	lsls	r0, r3, #2
 800370a:	f7fc fcfd 	bl	8000108 <__udivsi3>
 800370e:	0003      	movs	r3, r0
 8003710:	0019      	movs	r1, r3
 8003712:	0020      	movs	r0, r4
 8003714:	f7fc fcf8 	bl	8000108 <__udivsi3>
 8003718:	0003      	movs	r3, r0
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fe35 	bl	800438a <HAL_SYSTICK_Config>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d001      	beq.n	8003728 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e00f      	b.n	8003748 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d80b      	bhi.n	8003746 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	2301      	movs	r3, #1
 8003732:	425b      	negs	r3, r3
 8003734:	2200      	movs	r2, #0
 8003736:	0018      	movs	r0, r3
 8003738:	f000 fe12 	bl	8004360 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_InitTick+0x64>)
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b003      	add	sp, #12
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	20000000 	.word	0x20000000
 8003754:	20000008 	.word	0x20000008
 8003758:	20000004 	.word	0x20000004

0800375c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_IncTick+0x1c>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	001a      	movs	r2, r3
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_IncTick+0x20>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	18d2      	adds	r2, r2, r3
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_IncTick+0x20>)
 800376e:	601a      	str	r2, [r3, #0]
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	20000008 	.word	0x20000008
 800377c:	20000150 	.word	0x20000150

08003780 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  return uwTick;
 8003784:	4b02      	ldr	r3, [pc, #8]	; (8003790 <HAL_GetTick+0x10>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	20000150 	.word	0x20000150

08003794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7ff fff0 	bl	8003780 <HAL_GetTick>
 80037a0:	0003      	movs	r3, r0
 80037a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3301      	adds	r3, #1
 80037ac:	d005      	beq.n	80037ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_Delay+0x40>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	001a      	movs	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	189b      	adds	r3, r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	f7ff ffe0 	bl	8003780 <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d8f7      	bhi.n	80037bc <HAL_Delay+0x28>
  {
  }
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b004      	add	sp, #16
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000008 	.word	0x20000008

080037d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037e0:	230f      	movs	r3, #15
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e125      	b.n	8003a42 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2234      	movs	r2, #52	; 0x34
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff fe34 	bl	800347c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	2210      	movs	r2, #16
 800381a:	4013      	ands	r3, r2
 800381c:	d000      	beq.n	8003820 <HAL_ADC_Init+0x48>
 800381e:	e103      	b.n	8003a28 <HAL_ADC_Init+0x250>
 8003820:	230f      	movs	r3, #15
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d000      	beq.n	800382c <HAL_ADC_Init+0x54>
 800382a:	e0fd      	b.n	8003a28 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2204      	movs	r2, #4
 8003834:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003836:	d000      	beq.n	800383a <HAL_ADC_Init+0x62>
 8003838:	e0f6      	b.n	8003a28 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	4a83      	ldr	r2, [pc, #524]	; (8003a4c <HAL_ADC_Init+0x274>)
 8003840:	4013      	ands	r3, r2
 8003842:	2202      	movs	r2, #2
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2203      	movs	r2, #3
 8003852:	4013      	ands	r3, r2
 8003854:	2b01      	cmp	r3, #1
 8003856:	d112      	bne.n	800387e <HAL_ADC_Init+0xa6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	4013      	ands	r3, r2
 8003862:	2b01      	cmp	r3, #1
 8003864:	d009      	beq.n	800387a <HAL_ADC_Init+0xa2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	401a      	ands	r2, r3
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	429a      	cmp	r2, r3
 8003878:	d101      	bne.n	800387e <HAL_ADC_Init+0xa6>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_ADC_Init+0xa8>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d116      	bne.n	80038b2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2218      	movs	r2, #24
 800388c:	4393      	bics	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	0899      	lsrs	r1, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4964      	ldr	r1, [pc, #400]	; (8003a50 <HAL_ADC_Init+0x278>)
 80038be:	400a      	ands	r2, r1
 80038c0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7e1b      	ldrb	r3, [r3, #24]
 80038c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7e5b      	ldrb	r3, [r3, #25]
 80038cc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7e9b      	ldrb	r3, [r3, #26]
 80038d4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80038d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d002      	beq.n	80038e6 <HAL_ADC_Init+0x10e>
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	015b      	lsls	r3, r3, #5
 80038e4:	e000      	b.n	80038e8 <HAL_ADC_Init+0x110>
 80038e6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80038e8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80038ee:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d101      	bne.n	80038fc <HAL_ADC_Init+0x124>
 80038f8:	2304      	movs	r3, #4
 80038fa:	e000      	b.n	80038fe <HAL_ADC_Init+0x126>
 80038fc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80038fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2124      	movs	r1, #36	; 0x24
 8003904:	5c5b      	ldrb	r3, [r3, r1]
 8003906:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003908:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	4313      	orrs	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7edb      	ldrb	r3, [r3, #27]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d115      	bne.n	8003944 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7e9b      	ldrb	r3, [r3, #26]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	0252      	lsls	r2, r2, #9
 8003926:	4313      	orrs	r3, r2
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	e00b      	b.n	8003944 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	2220      	movs	r2, #32
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	2201      	movs	r2, #1
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	23c2      	movs	r3, #194	; 0xc2
 800394a:	33ff      	adds	r3, #255	; 0xff
 800394c:	429a      	cmp	r2, r3
 800394e:	d007      	beq.n	8003960 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003958:	4313      	orrs	r3, r2
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	4313      	orrs	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68d9      	ldr	r1, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	430a      	orrs	r2, r1
 800396e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	055b      	lsls	r3, r3, #21
 8003978:	429a      	cmp	r2, r3
 800397a:	d01b      	beq.n	80039b4 <HAL_ADC_Init+0x1dc>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d017      	beq.n	80039b4 <HAL_ADC_Init+0x1dc>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	2b02      	cmp	r3, #2
 800398a:	d013      	beq.n	80039b4 <HAL_ADC_Init+0x1dc>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	2b03      	cmp	r3, #3
 8003992:	d00f      	beq.n	80039b4 <HAL_ADC_Init+0x1dc>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	2b04      	cmp	r3, #4
 800399a:	d00b      	beq.n	80039b4 <HAL_ADC_Init+0x1dc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d007      	beq.n	80039b4 <HAL_ADC_Init+0x1dc>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d003      	beq.n	80039b4 <HAL_ADC_Init+0x1dc>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	2b07      	cmp	r3, #7
 80039b2:	d112      	bne.n	80039da <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2107      	movs	r1, #7
 80039c0:	438a      	bics	r2, r1
 80039c2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6959      	ldr	r1, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	2207      	movs	r2, #7
 80039d0:	401a      	ands	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_ADC_Init+0x27c>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10b      	bne.n	8003a02 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	2203      	movs	r2, #3
 80039f6:	4393      	bics	r3, r2
 80039f8:	2201      	movs	r2, #1
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a00:	e01c      	b.n	8003a3c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	2212      	movs	r2, #18
 8003a08:	4393      	bics	r3, r2
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	2201      	movs	r2, #1
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003a1e:	230f      	movs	r3, #15
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a26:	e009      	b.n	8003a3c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003a34:	230f      	movs	r3, #15
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	781b      	ldrb	r3, [r3, #0]
}
 8003a42:	0018      	movs	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	fffffefd 	.word	0xfffffefd
 8003a50:	fffe0219 	.word	0xfffe0219
 8003a54:	833fffe7 	.word	0x833fffe7

08003a58 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a60:	230f      	movs	r3, #15
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	4013      	ands	r3, r2
 8003a72:	d138      	bne.n	8003ae6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2234      	movs	r2, #52	; 0x34
 8003a78:	5c9b      	ldrb	r3, [r3, r2]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_Start+0x2a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e038      	b.n	8003af4 <HAL_ADC_Start+0x9c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2234      	movs	r2, #52	; 0x34
 8003a86:	2101      	movs	r1, #1
 8003a88:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7e5b      	ldrb	r3, [r3, #25]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d007      	beq.n	8003aa2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003a92:	230f      	movs	r3, #15
 8003a94:	18fc      	adds	r4, r7, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 fa05 	bl	8003ea8 <ADC_Enable>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003aa2:	230f      	movs	r3, #15
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d120      	bne.n	8003aee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	4a12      	ldr	r2, [pc, #72]	; (8003afc <HAL_ADC_Start+0xa4>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	0052      	lsls	r2, r2, #1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2234      	movs	r2, #52	; 0x34
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	221c      	movs	r2, #28
 8003ad2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2104      	movs	r1, #4
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	e003      	b.n	8003aee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ae6:	230f      	movs	r3, #15
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2202      	movs	r2, #2
 8003aec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003aee:	230f      	movs	r3, #15
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	781b      	ldrb	r3, [r3, #0]
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b005      	add	sp, #20
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	fffff0fe 	.word	0xfffff0fe

08003b00 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8003b00:	b5b0      	push	{r4, r5, r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b08:	230f      	movs	r3, #15
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2234      	movs	r2, #52	; 0x34
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_ADC_Stop+0x1e>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e02a      	b.n	8003b74 <HAL_ADC_Stop+0x74>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2234      	movs	r2, #52	; 0x34
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003b26:	250f      	movs	r5, #15
 8003b28:	197c      	adds	r4, r7, r5
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 faa1 	bl	8004074 <ADC_ConversionStop>
 8003b32:	0003      	movs	r3, r0
 8003b34:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b36:	197b      	adds	r3, r7, r5
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d113      	bne.n	8003b66 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003b3e:	250f      	movs	r5, #15
 8003b40:	197c      	adds	r4, r7, r5
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 fa2b 	bl	8003fa0 <ADC_Disable>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003b4e:	197b      	adds	r3, r7, r5
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_ADC_Stop+0x7c>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2201      	movs	r2, #1
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2234      	movs	r2, #52	; 0x34
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b6e:	230f      	movs	r3, #15
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	781b      	ldrb	r3, [r3, #0]
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b7c:	fffffefe 	.word	0xfffffefe

08003b80 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d102      	bne.n	8003b98 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003b92:	2308      	movs	r3, #8
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e014      	b.n	8003bc2 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10b      	bne.n	8003bbe <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	2220      	movs	r2, #32
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2234      	movs	r2, #52	; 0x34
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e06b      	b.n	8003c96 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003bc2:	f7ff fddd 	bl	8003780 <HAL_GetTick>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003bca:	e019      	b.n	8003c00 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	d016      	beq.n	8003c00 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_ADC_PollForConversion+0x68>
 8003bd8:	f7ff fdd2 	bl	8003780 <HAL_GetTick>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d20b      	bcs.n	8003c00 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	2204      	movs	r2, #4
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2234      	movs	r2, #52	; 0x34
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e04a      	b.n	8003c96 <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d0df      	beq.n	8003bcc <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	23c0      	movs	r3, #192	; 0xc0
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	4013      	ands	r3, r2
 8003c26:	d12d      	bne.n	8003c84 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d129      	bne.n	8003c84 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2208      	movs	r2, #8
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d122      	bne.n	8003c84 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2204      	movs	r2, #4
 8003c46:	4013      	ands	r3, r2
 8003c48:	d110      	bne.n	8003c6c <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	210c      	movs	r1, #12
 8003c56:	438a      	bics	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_ADC_PollForConversion+0x120>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	2201      	movs	r2, #1
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
 8003c6a:	e00b      	b.n	8003c84 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	2220      	movs	r2, #32
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7e1b      	ldrb	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	220c      	movs	r2, #12
 8003c92:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	fffffefe 	.word	0xfffffefe

08003ca4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc6:	230f      	movs	r3, #15
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	055b      	lsls	r3, r3, #21
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d011      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x46>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d00d      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x46>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d009      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x46>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d005      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x46>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d001      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x46>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2234      	movs	r2, #52	; 0x34
 8003d06:	5c9b      	ldrb	r3, [r3, r2]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x54>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e0bb      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x1cc>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2234      	movs	r2, #52	; 0x34
 8003d14:	2101      	movs	r1, #1
 8003d16:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2204      	movs	r2, #4
 8003d20:	4013      	ands	r3, r2
 8003d22:	d000      	beq.n	8003d26 <HAL_ADC_ConfigChannel+0x6a>
 8003d24:	e09f      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a59      	ldr	r2, [pc, #356]	; (8003e90 <HAL_ADC_ConfigChannel+0x1d4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d100      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x76>
 8003d30:	e077      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	055b      	lsls	r3, r3, #21
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d037      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d033      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d02f      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d02b      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d027      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d023      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d01f      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	2b07      	cmp	r3, #7
 8003d8a:	d01b      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	2107      	movs	r1, #7
 8003d98:	400b      	ands	r3, r1
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d012      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2107      	movs	r1, #7
 8003daa:	438a      	bics	r2, r1
 8003dac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6959      	ldr	r1, [r3, #20]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2207      	movs	r2, #7
 8003dba:	401a      	ands	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d003      	beq.n	8003dd4 <HAL_ADC_ConfigChannel+0x118>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b11      	cmp	r3, #17
 8003dd2:	d152      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003dd4:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <HAL_ADC_ConfigChannel+0x1d8>)
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d102      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x12a>
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	e001      	b.n	8003dea <HAL_ADC_ConfigChannel+0x12e>
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	03db      	lsls	r3, r3, #15
 8003dea:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <HAL_ADC_ConfigChannel+0x1d8>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d140      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_ADC_ConfigChannel+0x1dc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4927      	ldr	r1, [pc, #156]	; (8003e9c <HAL_ADC_ConfigChannel+0x1e0>)
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7fc f982 	bl	8000108 <__udivsi3>
 8003e04:	0003      	movs	r3, r0
 8003e06:	001a      	movs	r2, r3
 8003e08:	0013      	movs	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e12:	e002      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f9      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x158>
 8003e20:	e02b      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4099      	lsls	r1, r3
 8003e30:	000b      	movs	r3, r1
 8003e32:	43d9      	mvns	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	400a      	ands	r2, r1
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d003      	beq.n	8003e4c <HAL_ADC_ConfigChannel+0x190>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b11      	cmp	r3, #17
 8003e4a:	d116      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_ADC_ConfigChannel+0x1d8>)
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d101      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x1a0>
 8003e58:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <HAL_ADC_ConfigChannel+0x1e4>)
 8003e5a:	e000      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x1a2>
 8003e5c:	4a11      	ldr	r2, [pc, #68]	; (8003ea4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_ADC_ConfigChannel+0x1d8>)
 8003e60:	400a      	ands	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e009      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003e72:	230f      	movs	r3, #15
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2234      	movs	r2, #52	; 0x34
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003e82:	230f      	movs	r3, #15
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	781b      	ldrb	r3, [r3, #0]
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b004      	add	sp, #16
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	00001001 	.word	0x00001001
 8003e94:	40012708 	.word	0x40012708
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	000f4240 	.word	0x000f4240
 8003ea0:	ff7fffff 	.word	0xff7fffff
 8003ea4:	ffbfffff 	.word	0xffbfffff

08003ea8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d112      	bne.n	8003eec <ADC_Enable+0x44>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d009      	beq.n	8003ee8 <ADC_Enable+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	401a      	ands	r2, r3
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d101      	bne.n	8003eec <ADC_Enable+0x44>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <ADC_Enable+0x46>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d14b      	bne.n	8003f8a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <ADC_Enable+0xec>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	2210      	movs	r2, #16
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	2201      	movs	r2, #1
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e038      	b.n	8003f8c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2101      	movs	r1, #1
 8003f26:	430a      	orrs	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <ADC_Enable+0xf0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	491b      	ldr	r1, [pc, #108]	; (8003f9c <ADC_Enable+0xf4>)
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7fc f8e9 	bl	8000108 <__udivsi3>
 8003f36:	0003      	movs	r3, r0
 8003f38:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f3a:	e002      	b.n	8003f42 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f9      	bne.n	8003f3c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f48:	f7ff fc1a 	bl	8003780 <HAL_GetTick>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f50:	e014      	b.n	8003f7c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f52:	f7ff fc15 	bl	8003780 <HAL_GetTick>
 8003f56:	0002      	movs	r2, r0
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d90d      	bls.n	8003f7c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	2210      	movs	r2, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	2201      	movs	r2, #1
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e007      	b.n	8003f8c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2201      	movs	r2, #1
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d1e3      	bne.n	8003f52 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	80000017 	.word	0x80000017
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	000f4240 	.word	0x000f4240

08003fa0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d112      	bne.n	8003fe0 <ADC_Disable+0x40>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d009      	beq.n	8003fdc <ADC_Disable+0x3c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d101      	bne.n	8003fe0 <ADC_Disable+0x40>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <ADC_Disable+0x42>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d041      	beq.n	800406a <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2205      	movs	r2, #5
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d110      	bne.n	8004016 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2102      	movs	r1, #2
 8004000:	430a      	orrs	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2203      	movs	r2, #3
 800400a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800400c:	f7ff fbb8 	bl	8003780 <HAL_GetTick>
 8004010:	0003      	movs	r3, r0
 8004012:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004014:	e022      	b.n	800405c <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	2210      	movs	r2, #16
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	2201      	movs	r2, #1
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e01c      	b.n	800406c <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004032:	f7ff fba5 	bl	8003780 <HAL_GetTick>
 8004036:	0002      	movs	r2, r0
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d90d      	bls.n	800405c <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	2210      	movs	r2, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	2201      	movs	r2, #1
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e007      	b.n	800406c <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2201      	movs	r2, #1
 8004064:	4013      	ands	r3, r2
 8004066:	2b01      	cmp	r3, #1
 8004068:	d0e3      	beq.n	8004032 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bd80      	pop	{r7, pc}

08004074 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2204      	movs	r2, #4
 8004088:	4013      	ands	r3, r2
 800408a:	d034      	beq.n	80040f6 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2204      	movs	r2, #4
 8004094:	4013      	ands	r3, r2
 8004096:	2b04      	cmp	r3, #4
 8004098:	d10d      	bne.n	80040b6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2202      	movs	r2, #2
 80040a2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80040a4:	d107      	bne.n	80040b6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2110      	movs	r1, #16
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040b6:	f7ff fb63 	bl	8003780 <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80040be:	e014      	b.n	80040ea <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80040c0:	f7ff fb5e 	bl	8003780 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d90d      	bls.n	80040ea <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	2210      	movs	r2, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	2201      	movs	r2, #1
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e006      	b.n	80040f8 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2204      	movs	r2, #4
 80040f2:	4013      	ands	r3, r2
 80040f4:	d1e4      	bne.n	80040c0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b004      	add	sp, #16
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004108:	2317      	movs	r3, #23
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2234      	movs	r2, #52	; 0x34
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_ADCEx_Calibration_Start+0x26>
 8004122:	2302      	movs	r3, #2
 8004124:	e084      	b.n	8004230 <HAL_ADCEx_Calibration_Start+0x130>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2234      	movs	r2, #52	; 0x34
 800412a:	2101      	movs	r1, #1
 800412c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2203      	movs	r2, #3
 8004136:	4013      	ands	r3, r2
 8004138:	2b01      	cmp	r3, #1
 800413a:	d112      	bne.n	8004162 <HAL_ADCEx_Calibration_Start+0x62>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2201      	movs	r2, #1
 8004144:	4013      	ands	r3, r2
 8004146:	2b01      	cmp	r3, #1
 8004148:	d009      	beq.n	800415e <HAL_ADCEx_Calibration_Start+0x5e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	401a      	ands	r2, r3
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	429a      	cmp	r2, r3
 800415c:	d101      	bne.n	8004162 <HAL_ADCEx_Calibration_Start+0x62>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_ADCEx_Calibration_Start+0x64>
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d152      	bne.n	800420e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	4a32      	ldr	r2, [pc, #200]	; (8004238 <HAL_ADCEx_Calibration_Start+0x138>)
 800416e:	4013      	ands	r3, r2
 8004170:	2202      	movs	r2, #2
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2203      	movs	r2, #3
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2103      	movs	r1, #3
 8004190:	438a      	bics	r2, r1
 8004192:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2180      	movs	r1, #128	; 0x80
 80041a0:	0609      	lsls	r1, r1, #24
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80041a6:	f7ff faeb 	bl	8003780 <HAL_GetTick>
 80041aa:	0003      	movs	r3, r0
 80041ac:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80041ae:	e014      	b.n	80041da <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80041b0:	f7ff fae6 	bl	8003780 <HAL_GetTick>
 80041b4:	0002      	movs	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d90d      	bls.n	80041da <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	2212      	movs	r2, #18
 80041c4:	4393      	bics	r3, r2
 80041c6:	2210      	movs	r2, #16
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2234      	movs	r2, #52	; 0x34
 80041d2:	2100      	movs	r1, #0
 80041d4:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e02a      	b.n	8004230 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	0fdb      	lsrs	r3, r3, #31
 80041e2:	07da      	lsls	r2, r3, #31
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d0e1      	beq.n	80041b0 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68d9      	ldr	r1, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	2203      	movs	r2, #3
 8004202:	4393      	bics	r3, r2
 8004204:	2201      	movs	r2, #1
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
 800420c:	e009      	b.n	8004222 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	2220      	movs	r2, #32
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800421a:	2317      	movs	r3, #23
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2234      	movs	r2, #52	; 0x34
 8004226:	2100      	movs	r1, #0
 8004228:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800422a:	2317      	movs	r3, #23
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	781b      	ldrb	r3, [r3, #0]
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b006      	add	sp, #24
 8004236:	bd80      	pop	{r7, pc}
 8004238:	fffffefd 	.word	0xfffffefd

0800423c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	0002      	movs	r2, r0
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	1dfb      	adds	r3, r7, #7
 8004248:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800424a:	1dfb      	adds	r3, r7, #7
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b7f      	cmp	r3, #127	; 0x7f
 8004250:	d828      	bhi.n	80042a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004252:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <__NVIC_SetPriority+0xd4>)
 8004254:	1dfb      	adds	r3, r7, #7
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b25b      	sxtb	r3, r3
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	33c0      	adds	r3, #192	; 0xc0
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	589b      	ldr	r3, [r3, r2]
 8004262:	1dfa      	adds	r2, r7, #7
 8004264:	7812      	ldrb	r2, [r2, #0]
 8004266:	0011      	movs	r1, r2
 8004268:	2203      	movs	r2, #3
 800426a:	400a      	ands	r2, r1
 800426c:	00d2      	lsls	r2, r2, #3
 800426e:	21ff      	movs	r1, #255	; 0xff
 8004270:	4091      	lsls	r1, r2
 8004272:	000a      	movs	r2, r1
 8004274:	43d2      	mvns	r2, r2
 8004276:	401a      	ands	r2, r3
 8004278:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	019b      	lsls	r3, r3, #6
 800427e:	22ff      	movs	r2, #255	; 0xff
 8004280:	401a      	ands	r2, r3
 8004282:	1dfb      	adds	r3, r7, #7
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	0018      	movs	r0, r3
 8004288:	2303      	movs	r3, #3
 800428a:	4003      	ands	r3, r0
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004290:	481f      	ldr	r0, [pc, #124]	; (8004310 <__NVIC_SetPriority+0xd4>)
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b25b      	sxtb	r3, r3
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	430a      	orrs	r2, r1
 800429c:	33c0      	adds	r3, #192	; 0xc0
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80042a2:	e031      	b.n	8004308 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <__NVIC_SetPriority+0xd8>)
 80042a6:	1dfb      	adds	r3, r7, #7
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	0019      	movs	r1, r3
 80042ac:	230f      	movs	r3, #15
 80042ae:	400b      	ands	r3, r1
 80042b0:	3b08      	subs	r3, #8
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	3306      	adds	r3, #6
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	18d3      	adds	r3, r2, r3
 80042ba:	3304      	adds	r3, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	1dfa      	adds	r2, r7, #7
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	0011      	movs	r1, r2
 80042c4:	2203      	movs	r2, #3
 80042c6:	400a      	ands	r2, r1
 80042c8:	00d2      	lsls	r2, r2, #3
 80042ca:	21ff      	movs	r1, #255	; 0xff
 80042cc:	4091      	lsls	r1, r2
 80042ce:	000a      	movs	r2, r1
 80042d0:	43d2      	mvns	r2, r2
 80042d2:	401a      	ands	r2, r3
 80042d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	019b      	lsls	r3, r3, #6
 80042da:	22ff      	movs	r2, #255	; 0xff
 80042dc:	401a      	ands	r2, r3
 80042de:	1dfb      	adds	r3, r7, #7
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	0018      	movs	r0, r3
 80042e4:	2303      	movs	r3, #3
 80042e6:	4003      	ands	r3, r0
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042ec:	4809      	ldr	r0, [pc, #36]	; (8004314 <__NVIC_SetPriority+0xd8>)
 80042ee:	1dfb      	adds	r3, r7, #7
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	001c      	movs	r4, r3
 80042f4:	230f      	movs	r3, #15
 80042f6:	4023      	ands	r3, r4
 80042f8:	3b08      	subs	r3, #8
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	430a      	orrs	r2, r1
 80042fe:	3306      	adds	r3, #6
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	18c3      	adds	r3, r0, r3
 8004304:	3304      	adds	r3, #4
 8004306:	601a      	str	r2, [r3, #0]
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b003      	add	sp, #12
 800430e:	bd90      	pop	{r4, r7, pc}
 8004310:	e000e100 	.word	0xe000e100
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <SysTick_Config+0x40>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800432a:	2301      	movs	r3, #1
 800432c:	e010      	b.n	8004350 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <SysTick_Config+0x44>)
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	3a01      	subs	r2, #1
 8004334:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004336:	2301      	movs	r3, #1
 8004338:	425b      	negs	r3, r3
 800433a:	2103      	movs	r1, #3
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff ff7d 	bl	800423c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <SysTick_Config+0x44>)
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <SysTick_Config+0x44>)
 800434a:	2207      	movs	r2, #7
 800434c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800434e:	2300      	movs	r3, #0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}
 8004358:	00ffffff 	.word	0x00ffffff
 800435c:	e000e010 	.word	0xe000e010

08004360 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	210f      	movs	r1, #15
 800436c:	187b      	adds	r3, r7, r1
 800436e:	1c02      	adds	r2, r0, #0
 8004370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	187b      	adds	r3, r7, r1
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	b25b      	sxtb	r3, r3
 800437a:	0011      	movs	r1, r2
 800437c:	0018      	movs	r0, r3
 800437e:	f7ff ff5d 	bl	800423c <__NVIC_SetPriority>
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b004      	add	sp, #16
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff ffbf 	bl	8004318 <SysTick_Config>
 800439a:	0003      	movs	r3, r0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b002      	add	sp, #8
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b2:	e14f      	b.n	8004654 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2101      	movs	r1, #1
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4091      	lsls	r1, r2
 80043be:	000a      	movs	r2, r1
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d100      	bne.n	80043cc <HAL_GPIO_Init+0x28>
 80043ca:	e140      	b.n	800464e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d00b      	beq.n	80043ec <HAL_GPIO_Init+0x48>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d007      	beq.n	80043ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043e0:	2b11      	cmp	r3, #17
 80043e2:	d003      	beq.n	80043ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b12      	cmp	r3, #18
 80043ea:	d130      	bne.n	800444e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	2203      	movs	r2, #3
 80043f8:	409a      	lsls	r2, r3
 80043fa:	0013      	movs	r3, r2
 80043fc:	43da      	mvns	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	409a      	lsls	r2, r3
 800440e:	0013      	movs	r3, r2
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004422:	2201      	movs	r2, #1
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	409a      	lsls	r2, r3
 8004428:	0013      	movs	r3, r2
 800442a:	43da      	mvns	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	2201      	movs	r2, #1
 800443a:	401a      	ands	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	409a      	lsls	r2, r3
 8004440:	0013      	movs	r3, r2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	2203      	movs	r2, #3
 800445a:	409a      	lsls	r2, r3
 800445c:	0013      	movs	r3, r2
 800445e:	43da      	mvns	r2, r3
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4013      	ands	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	0013      	movs	r3, r2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0xea>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b12      	cmp	r3, #18
 800448c:	d123      	bne.n	80044d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	08da      	lsrs	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3208      	adds	r2, #8
 8004496:	0092      	lsls	r2, r2, #2
 8004498:	58d3      	ldr	r3, [r2, r3]
 800449a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2207      	movs	r2, #7
 80044a0:	4013      	ands	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	220f      	movs	r2, #15
 80044a6:	409a      	lsls	r2, r3
 80044a8:	0013      	movs	r3, r2
 80044aa:	43da      	mvns	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2107      	movs	r1, #7
 80044ba:	400b      	ands	r3, r1
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	409a      	lsls	r2, r3
 80044c0:	0013      	movs	r3, r2
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	08da      	lsrs	r2, r3, #3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3208      	adds	r2, #8
 80044d0:	0092      	lsls	r2, r2, #2
 80044d2:	6939      	ldr	r1, [r7, #16]
 80044d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	2203      	movs	r2, #3
 80044e2:	409a      	lsls	r2, r3
 80044e4:	0013      	movs	r3, r2
 80044e6:	43da      	mvns	r2, r3
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2203      	movs	r2, #3
 80044f4:	401a      	ands	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	409a      	lsls	r2, r3
 80044fc:	0013      	movs	r3, r2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	055b      	lsls	r3, r3, #21
 8004512:	4013      	ands	r3, r2
 8004514:	d100      	bne.n	8004518 <HAL_GPIO_Init+0x174>
 8004516:	e09a      	b.n	800464e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004518:	4b54      	ldr	r3, [pc, #336]	; (800466c <HAL_GPIO_Init+0x2c8>)
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_GPIO_Init+0x2c8>)
 800451e:	2101      	movs	r1, #1
 8004520:	430a      	orrs	r2, r1
 8004522:	619a      	str	r2, [r3, #24]
 8004524:	4b51      	ldr	r3, [pc, #324]	; (800466c <HAL_GPIO_Init+0x2c8>)
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2201      	movs	r2, #1
 800452a:	4013      	ands	r3, r2
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004530:	4a4f      	ldr	r2, [pc, #316]	; (8004670 <HAL_GPIO_Init+0x2cc>)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	089b      	lsrs	r3, r3, #2
 8004536:	3302      	adds	r3, #2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	589b      	ldr	r3, [r3, r2]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2203      	movs	r2, #3
 8004542:	4013      	ands	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	220f      	movs	r2, #15
 8004548:	409a      	lsls	r2, r3
 800454a:	0013      	movs	r3, r2
 800454c:	43da      	mvns	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4013      	ands	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	2390      	movs	r3, #144	; 0x90
 8004558:	05db      	lsls	r3, r3, #23
 800455a:	429a      	cmp	r2, r3
 800455c:	d013      	beq.n	8004586 <HAL_GPIO_Init+0x1e2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a44      	ldr	r2, [pc, #272]	; (8004674 <HAL_GPIO_Init+0x2d0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00d      	beq.n	8004582 <HAL_GPIO_Init+0x1de>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a43      	ldr	r2, [pc, #268]	; (8004678 <HAL_GPIO_Init+0x2d4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d007      	beq.n	800457e <HAL_GPIO_Init+0x1da>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a42      	ldr	r2, [pc, #264]	; (800467c <HAL_GPIO_Init+0x2d8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d101      	bne.n	800457a <HAL_GPIO_Init+0x1d6>
 8004576:	2303      	movs	r3, #3
 8004578:	e006      	b.n	8004588 <HAL_GPIO_Init+0x1e4>
 800457a:	2305      	movs	r3, #5
 800457c:	e004      	b.n	8004588 <HAL_GPIO_Init+0x1e4>
 800457e:	2302      	movs	r3, #2
 8004580:	e002      	b.n	8004588 <HAL_GPIO_Init+0x1e4>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_GPIO_Init+0x1e4>
 8004586:	2300      	movs	r3, #0
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	2103      	movs	r1, #3
 800458c:	400a      	ands	r2, r1
 800458e:	0092      	lsls	r2, r2, #2
 8004590:	4093      	lsls	r3, r2
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004598:	4935      	ldr	r1, [pc, #212]	; (8004670 <HAL_GPIO_Init+0x2cc>)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	3302      	adds	r3, #2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045a6:	4b36      	ldr	r3, [pc, #216]	; (8004680 <HAL_GPIO_Init+0x2dc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	025b      	lsls	r3, r3, #9
 80045be:	4013      	ands	r3, r2
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045ca:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <HAL_GPIO_Init+0x2dc>)
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80045d0:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_GPIO_Init+0x2dc>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	43da      	mvns	r2, r3
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	029b      	lsls	r3, r3, #10
 80045e8:	4013      	ands	r3, r2
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <HAL_GPIO_Init+0x2dc>)
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045fa:	4b21      	ldr	r3, [pc, #132]	; (8004680 <HAL_GPIO_Init+0x2dc>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	43da      	mvns	r2, r3
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	035b      	lsls	r3, r3, #13
 8004612:	4013      	ands	r3, r2
 8004614:	d003      	beq.n	800461e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <HAL_GPIO_Init+0x2dc>)
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <HAL_GPIO_Init+0x2dc>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	43da      	mvns	r2, r3
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	039b      	lsls	r3, r3, #14
 800463c:	4013      	ands	r3, r2
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_GPIO_Init+0x2dc>)
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	3301      	adds	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	40da      	lsrs	r2, r3
 800465c:	1e13      	subs	r3, r2, #0
 800465e:	d000      	beq.n	8004662 <HAL_GPIO_Init+0x2be>
 8004660:	e6a8      	b.n	80043b4 <HAL_GPIO_Init+0x10>
  } 
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b006      	add	sp, #24
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	40021000 	.word	0x40021000
 8004670:	40010000 	.word	0x40010000
 8004674:	48000400 	.word	0x48000400
 8004678:	48000800 	.word	0x48000800
 800467c:	48000c00 	.word	0x48000c00
 8004680:	40010400 	.word	0x40010400

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	0008      	movs	r0, r1
 800468e:	0011      	movs	r1, r2
 8004690:	1cbb      	adds	r3, r7, #2
 8004692:	1c02      	adds	r2, r0, #0
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	1c7b      	adds	r3, r7, #1
 8004698:	1c0a      	adds	r2, r1, #0
 800469a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800469c:	1c7b      	adds	r3, r7, #1
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046a4:	1cbb      	adds	r3, r7, #2
 80046a6:	881a      	ldrh	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046ac:	e003      	b.n	80046b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ae:	1cbb      	adds	r3, r7, #2
 80046b0:	881a      	ldrh	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b002      	add	sp, #8
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e303      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	4013      	ands	r3, r2
 80046da:	d100      	bne.n	80046de <HAL_RCC_OscConfig+0x1e>
 80046dc:	e08d      	b.n	80047fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80046de:	4bc4      	ldr	r3, [pc, #784]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	220c      	movs	r2, #12
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00e      	beq.n	8004708 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046ea:	4bc1      	ldr	r3, [pc, #772]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	220c      	movs	r2, #12
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d116      	bne.n	8004724 <HAL_RCC_OscConfig+0x64>
 80046f6:	4bbe      	ldr	r3, [pc, #760]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	025b      	lsls	r3, r3, #9
 80046fe:	401a      	ands	r2, r3
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	025b      	lsls	r3, r3, #9
 8004704:	429a      	cmp	r2, r3
 8004706:	d10d      	bne.n	8004724 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	4bb9      	ldr	r3, [pc, #740]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	029b      	lsls	r3, r3, #10
 8004710:	4013      	ands	r3, r2
 8004712:	d100      	bne.n	8004716 <HAL_RCC_OscConfig+0x56>
 8004714:	e070      	b.n	80047f8 <HAL_RCC_OscConfig+0x138>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d000      	beq.n	8004720 <HAL_RCC_OscConfig+0x60>
 800471e:	e06b      	b.n	80047f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e2da      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x7c>
 800472c:	4bb0      	ldr	r3, [pc, #704]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4baf      	ldr	r3, [pc, #700]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004732:	2180      	movs	r1, #128	; 0x80
 8004734:	0249      	lsls	r1, r1, #9
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e02f      	b.n	800479c <HAL_RCC_OscConfig+0xdc>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x9e>
 8004744:	4baa      	ldr	r3, [pc, #680]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4ba9      	ldr	r3, [pc, #676]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800474a:	49aa      	ldr	r1, [pc, #680]	; (80049f4 <HAL_RCC_OscConfig+0x334>)
 800474c:	400a      	ands	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	4ba7      	ldr	r3, [pc, #668]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4ba6      	ldr	r3, [pc, #664]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004756:	49a8      	ldr	r1, [pc, #672]	; (80049f8 <HAL_RCC_OscConfig+0x338>)
 8004758:	400a      	ands	r2, r1
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e01e      	b.n	800479c <HAL_RCC_OscConfig+0xdc>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d10e      	bne.n	8004784 <HAL_RCC_OscConfig+0xc4>
 8004766:	4ba2      	ldr	r3, [pc, #648]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4ba1      	ldr	r3, [pc, #644]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	02c9      	lsls	r1, r1, #11
 8004770:	430a      	orrs	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	4b9e      	ldr	r3, [pc, #632]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4b9d      	ldr	r3, [pc, #628]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800477a:	2180      	movs	r1, #128	; 0x80
 800477c:	0249      	lsls	r1, r1, #9
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e00b      	b.n	800479c <HAL_RCC_OscConfig+0xdc>
 8004784:	4b9a      	ldr	r3, [pc, #616]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b99      	ldr	r3, [pc, #612]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800478a:	499a      	ldr	r1, [pc, #616]	; (80049f4 <HAL_RCC_OscConfig+0x334>)
 800478c:	400a      	ands	r2, r1
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	4b97      	ldr	r3, [pc, #604]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b96      	ldr	r3, [pc, #600]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004796:	4998      	ldr	r1, [pc, #608]	; (80049f8 <HAL_RCC_OscConfig+0x338>)
 8004798:	400a      	ands	r2, r1
 800479a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d014      	beq.n	80047ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fe ffec 	bl	8003780 <HAL_GetTick>
 80047a8:	0003      	movs	r3, r0
 80047aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ae:	f7fe ffe7 	bl	8003780 <HAL_GetTick>
 80047b2:	0002      	movs	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b64      	cmp	r3, #100	; 0x64
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e28c      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c0:	4b8b      	ldr	r3, [pc, #556]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	029b      	lsls	r3, r3, #10
 80047c8:	4013      	ands	r3, r2
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0xee>
 80047cc:	e015      	b.n	80047fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ce:	f7fe ffd7 	bl	8003780 <HAL_GetTick>
 80047d2:	0003      	movs	r3, r0
 80047d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fe ffd2 	bl	8003780 <HAL_GetTick>
 80047dc:	0002      	movs	r2, r0
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e277      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	4b81      	ldr	r3, [pc, #516]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	029b      	lsls	r3, r3, #10
 80047f2:	4013      	ands	r3, r2
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x118>
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2202      	movs	r2, #2
 8004800:	4013      	ands	r3, r2
 8004802:	d100      	bne.n	8004806 <HAL_RCC_OscConfig+0x146>
 8004804:	e069      	b.n	80048da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004806:	4b7a      	ldr	r3, [pc, #488]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	220c      	movs	r2, #12
 800480c:	4013      	ands	r3, r2
 800480e:	d00b      	beq.n	8004828 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004810:	4b77      	ldr	r3, [pc, #476]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	220c      	movs	r2, #12
 8004816:	4013      	ands	r3, r2
 8004818:	2b08      	cmp	r3, #8
 800481a:	d11c      	bne.n	8004856 <HAL_RCC_OscConfig+0x196>
 800481c:	4b74      	ldr	r3, [pc, #464]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	025b      	lsls	r3, r3, #9
 8004824:	4013      	ands	r3, r2
 8004826:	d116      	bne.n	8004856 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004828:	4b71      	ldr	r3, [pc, #452]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2202      	movs	r2, #2
 800482e:	4013      	ands	r3, r2
 8004830:	d005      	beq.n	800483e <HAL_RCC_OscConfig+0x17e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e24d      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	22f8      	movs	r2, #248	; 0xf8
 8004844:	4393      	bics	r3, r2
 8004846:	0019      	movs	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	00da      	lsls	r2, r3, #3
 800484e:	4b68      	ldr	r3, [pc, #416]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004854:	e041      	b.n	80048da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d024      	beq.n	80048a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485e:	4b64      	ldr	r3, [pc, #400]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b63      	ldr	r3, [pc, #396]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004864:	2101      	movs	r1, #1
 8004866:	430a      	orrs	r2, r1
 8004868:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fe ff89 	bl	8003780 <HAL_GetTick>
 800486e:	0003      	movs	r3, r0
 8004870:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004874:	f7fe ff84 	bl	8003780 <HAL_GetTick>
 8004878:	0002      	movs	r2, r0
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e229      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004886:	4b5a      	ldr	r3, [pc, #360]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2202      	movs	r2, #2
 800488c:	4013      	ands	r3, r2
 800488e:	d0f1      	beq.n	8004874 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b57      	ldr	r3, [pc, #348]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	22f8      	movs	r2, #248	; 0xf8
 8004896:	4393      	bics	r3, r2
 8004898:	0019      	movs	r1, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00da      	lsls	r2, r3, #3
 80048a0:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80048a2:	430a      	orrs	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e018      	b.n	80048da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a8:	4b51      	ldr	r3, [pc, #324]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b50      	ldr	r3, [pc, #320]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80048ae:	2101      	movs	r1, #1
 80048b0:	438a      	bics	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fe ff64 	bl	8003780 <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048be:	f7fe ff5f 	bl	8003780 <HAL_GetTick>
 80048c2:	0002      	movs	r2, r0
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e204      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d0:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d1f1      	bne.n	80048be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2208      	movs	r2, #8
 80048e0:	4013      	ands	r3, r2
 80048e2:	d036      	beq.n	8004952 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d019      	beq.n	8004920 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ec:	4b40      	ldr	r3, [pc, #256]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80048ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f0:	4b3f      	ldr	r3, [pc, #252]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80048f2:	2101      	movs	r1, #1
 80048f4:	430a      	orrs	r2, r1
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f8:	f7fe ff42 	bl	8003780 <HAL_GetTick>
 80048fc:	0003      	movs	r3, r0
 80048fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004902:	f7fe ff3d 	bl	8003780 <HAL_GetTick>
 8004906:	0002      	movs	r2, r0
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e1e2      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004914:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2202      	movs	r2, #2
 800491a:	4013      	ands	r3, r2
 800491c:	d0f1      	beq.n	8004902 <HAL_RCC_OscConfig+0x242>
 800491e:	e018      	b.n	8004952 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004920:	4b33      	ldr	r3, [pc, #204]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004924:	4b32      	ldr	r3, [pc, #200]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004926:	2101      	movs	r1, #1
 8004928:	438a      	bics	r2, r1
 800492a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492c:	f7fe ff28 	bl	8003780 <HAL_GetTick>
 8004930:	0003      	movs	r3, r0
 8004932:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004936:	f7fe ff23 	bl	8003780 <HAL_GetTick>
 800493a:	0002      	movs	r2, r0
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e1c8      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	2202      	movs	r2, #2
 800494e:	4013      	ands	r3, r2
 8004950:	d1f1      	bne.n	8004936 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2204      	movs	r2, #4
 8004958:	4013      	ands	r3, r2
 800495a:	d100      	bne.n	800495e <HAL_RCC_OscConfig+0x29e>
 800495c:	e0b6      	b.n	8004acc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495e:	231f      	movs	r3, #31
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004966:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	055b      	lsls	r3, r3, #21
 800496e:	4013      	ands	r3, r2
 8004970:	d111      	bne.n	8004996 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	0549      	lsls	r1, r1, #21
 800497c:	430a      	orrs	r2, r1
 800497e:	61da      	str	r2, [r3, #28]
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	055b      	lsls	r3, r3, #21
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800498e:	231f      	movs	r3, #31
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_RCC_OscConfig+0x33c>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4013      	ands	r3, r2
 80049a0:	d11a      	bne.n	80049d8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <HAL_RCC_OscConfig+0x33c>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_RCC_OscConfig+0x33c>)
 80049a8:	2180      	movs	r1, #128	; 0x80
 80049aa:	0049      	lsls	r1, r1, #1
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b0:	f7fe fee6 	bl	8003780 <HAL_GetTick>
 80049b4:	0003      	movs	r3, r0
 80049b6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ba:	f7fe fee1 	bl	8003780 <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b64      	cmp	r3, #100	; 0x64
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e186      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCC_OscConfig+0x33c>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4013      	ands	r3, r2
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d10f      	bne.n	8004a00 <HAL_RCC_OscConfig+0x340>
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80049e2:	6a1a      	ldr	r2, [r3, #32]
 80049e4:	4b02      	ldr	r3, [pc, #8]	; (80049f0 <HAL_RCC_OscConfig+0x330>)
 80049e6:	2101      	movs	r1, #1
 80049e8:	430a      	orrs	r2, r1
 80049ea:	621a      	str	r2, [r3, #32]
 80049ec:	e036      	b.n	8004a5c <HAL_RCC_OscConfig+0x39c>
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	40021000 	.word	0x40021000
 80049f4:	fffeffff 	.word	0xfffeffff
 80049f8:	fffbffff 	.word	0xfffbffff
 80049fc:	40007000 	.word	0x40007000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCC_OscConfig+0x362>
 8004a08:	4bb6      	ldr	r3, [pc, #728]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a0a:	6a1a      	ldr	r2, [r3, #32]
 8004a0c:	4bb5      	ldr	r3, [pc, #724]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	621a      	str	r2, [r3, #32]
 8004a14:	4bb3      	ldr	r3, [pc, #716]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	4bb2      	ldr	r3, [pc, #712]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a1a:	2104      	movs	r1, #4
 8004a1c:	438a      	bics	r2, r1
 8004a1e:	621a      	str	r2, [r3, #32]
 8004a20:	e01c      	b.n	8004a5c <HAL_RCC_OscConfig+0x39c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x384>
 8004a2a:	4bae      	ldr	r3, [pc, #696]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a2c:	6a1a      	ldr	r2, [r3, #32]
 8004a2e:	4bad      	ldr	r3, [pc, #692]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a30:	2104      	movs	r1, #4
 8004a32:	430a      	orrs	r2, r1
 8004a34:	621a      	str	r2, [r3, #32]
 8004a36:	4bab      	ldr	r3, [pc, #684]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a38:	6a1a      	ldr	r2, [r3, #32]
 8004a3a:	4baa      	ldr	r3, [pc, #680]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	621a      	str	r2, [r3, #32]
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0x39c>
 8004a44:	4ba7      	ldr	r3, [pc, #668]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	4ba6      	ldr	r3, [pc, #664]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	621a      	str	r2, [r3, #32]
 8004a50:	4ba4      	ldr	r3, [pc, #656]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	4ba3      	ldr	r3, [pc, #652]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a56:	2104      	movs	r1, #4
 8004a58:	438a      	bics	r2, r1
 8004a5a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d014      	beq.n	8004a8e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a64:	f7fe fe8c 	bl	8003780 <HAL_GetTick>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	e009      	b.n	8004a82 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7fe fe87 	bl	8003780 <HAL_GetTick>
 8004a72:	0002      	movs	r2, r0
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	4a9b      	ldr	r2, [pc, #620]	; (8004ce8 <HAL_RCC_OscConfig+0x628>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e12b      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a82:	4b98      	ldr	r3, [pc, #608]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	2202      	movs	r2, #2
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x3ae>
 8004a8c:	e013      	b.n	8004ab6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8e:	f7fe fe77 	bl	8003780 <HAL_GetTick>
 8004a92:	0003      	movs	r3, r0
 8004a94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a96:	e009      	b.n	8004aac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a98:	f7fe fe72 	bl	8003780 <HAL_GetTick>
 8004a9c:	0002      	movs	r2, r0
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	4a91      	ldr	r2, [pc, #580]	; (8004ce8 <HAL_RCC_OscConfig+0x628>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e116      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aac:	4b8d      	ldr	r3, [pc, #564]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ab6:	231f      	movs	r3, #31
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac0:	4b88      	ldr	r3, [pc, #544]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	4b87      	ldr	r3, [pc, #540]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004ac6:	4989      	ldr	r1, [pc, #548]	; (8004cec <HAL_RCC_OscConfig+0x62c>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d063      	beq.n	8004b9e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d12a      	bne.n	8004b34 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ade:	4b81      	ldr	r3, [pc, #516]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae2:	4b80      	ldr	r3, [pc, #512]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004ae4:	2104      	movs	r1, #4
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004aea:	4b7e      	ldr	r3, [pc, #504]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aee:	4b7d      	ldr	r3, [pc, #500]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004af0:	2101      	movs	r1, #1
 8004af2:	430a      	orrs	r2, r1
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af6:	f7fe fe43 	bl	8003780 <HAL_GetTick>
 8004afa:	0003      	movs	r3, r0
 8004afc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b00:	f7fe fe3e 	bl	8003780 <HAL_GetTick>
 8004b04:	0002      	movs	r2, r0
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0e3      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b12:	4b74      	ldr	r3, [pc, #464]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	2202      	movs	r2, #2
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d0f1      	beq.n	8004b00 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b1c:	4b71      	ldr	r3, [pc, #452]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	22f8      	movs	r2, #248	; 0xf8
 8004b22:	4393      	bics	r3, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	00da      	lsls	r2, r3, #3
 8004b2c:	4b6d      	ldr	r3, [pc, #436]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34
 8004b32:	e034      	b.n	8004b9e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	3305      	adds	r3, #5
 8004b3a:	d111      	bne.n	8004b60 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004b3c:	4b69      	ldr	r3, [pc, #420]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b40:	4b68      	ldr	r3, [pc, #416]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b42:	2104      	movs	r1, #4
 8004b44:	438a      	bics	r2, r1
 8004b46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b48:	4b66      	ldr	r3, [pc, #408]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	22f8      	movs	r2, #248	; 0xf8
 8004b4e:	4393      	bics	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	00da      	lsls	r2, r3, #3
 8004b58:	4b62      	ldr	r3, [pc, #392]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b5e:	e01e      	b.n	8004b9e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b60:	4b60      	ldr	r3, [pc, #384]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b64:	4b5f      	ldr	r3, [pc, #380]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b66:	2104      	movs	r1, #4
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004b6c:	4b5d      	ldr	r3, [pc, #372]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b70:	4b5c      	ldr	r3, [pc, #368]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b72:	2101      	movs	r1, #1
 8004b74:	438a      	bics	r2, r1
 8004b76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b78:	f7fe fe02 	bl	8003780 <HAL_GetTick>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b82:	f7fe fdfd 	bl	8003780 <HAL_GetTick>
 8004b86:	0002      	movs	r2, r0
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e0a2      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004b94:	4b53      	ldr	r3, [pc, #332]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	2202      	movs	r2, #2
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d1f1      	bne.n	8004b82 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d100      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4e8>
 8004ba6:	e097      	b.n	8004cd8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba8:	4b4e      	ldr	r3, [pc, #312]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	220c      	movs	r2, #12
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d100      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x4f6>
 8004bb4:	e06b      	b.n	8004c8e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d14c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b48      	ldr	r3, [pc, #288]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004bc4:	494a      	ldr	r1, [pc, #296]	; (8004cf0 <HAL_RCC_OscConfig+0x630>)
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bca:	f7fe fdd9 	bl	8003780 <HAL_GetTick>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fe fdd4 	bl	8003780 <HAL_GetTick>
 8004bd8:	0002      	movs	r2, r0
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e079      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004be6:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	049b      	lsls	r3, r3, #18
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf2:	4b3c      	ldr	r3, [pc, #240]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	220f      	movs	r2, #15
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c02:	430a      	orrs	r2, r1
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4a3a      	ldr	r2, [pc, #232]	; (8004cf4 <HAL_RCC_OscConfig+0x634>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	4b32      	ldr	r3, [pc, #200]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c20:	4b30      	ldr	r3, [pc, #192]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	0449      	lsls	r1, r1, #17
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2e:	f7fe fda7 	bl	8003780 <HAL_GetTick>
 8004c32:	0003      	movs	r3, r0
 8004c34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fe fda2 	bl	8003780 <HAL_GetTick>
 8004c3c:	0002      	movs	r2, r0
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e047      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	049b      	lsls	r3, r3, #18
 8004c52:	4013      	ands	r3, r2
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x578>
 8004c56:	e03f      	b.n	8004cd8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c58:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c5e:	4924      	ldr	r1, [pc, #144]	; (8004cf0 <HAL_RCC_OscConfig+0x630>)
 8004c60:	400a      	ands	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fe fd8c 	bl	8003780 <HAL_GetTick>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fe fd87 	bl	8003780 <HAL_GetTick>
 8004c72:	0002      	movs	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e02c      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c80:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	049b      	lsls	r3, r3, #18
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5ae>
 8004c8c:	e024      	b.n	8004cd8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e01f      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <HAL_RCC_OscConfig+0x624>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	025b      	lsls	r3, r3, #9
 8004cac:	401a      	ands	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	220f      	movs	r2, #15
 8004cba:	401a      	ands	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	23f0      	movs	r3, #240	; 0xf0
 8004cc8:	039b      	lsls	r3, r3, #14
 8004cca:	401a      	ands	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	0018      	movs	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b008      	add	sp, #32
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	00001388 	.word	0x00001388
 8004cec:	efffffff 	.word	0xefffffff
 8004cf0:	feffffff 	.word	0xfeffffff
 8004cf4:	ffc2ffff 	.word	0xffc2ffff

08004cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0b3      	b.n	8004e74 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b5b      	ldr	r3, [pc, #364]	; (8004e7c <HAL_RCC_ClockConfig+0x184>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2201      	movs	r2, #1
 8004d12:	4013      	ands	r3, r2
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d911      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b58      	ldr	r3, [pc, #352]	; (8004e7c <HAL_RCC_ClockConfig+0x184>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4393      	bics	r3, r2
 8004d22:	0019      	movs	r1, r3
 8004d24:	4b55      	ldr	r3, [pc, #340]	; (8004e7c <HAL_RCC_ClockConfig+0x184>)
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_ClockConfig+0x184>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2201      	movs	r2, #1
 8004d32:	4013      	ands	r3, r2
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d001      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e09a      	b.n	8004e74 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2202      	movs	r2, #2
 8004d44:	4013      	ands	r3, r2
 8004d46:	d015      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d006      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d52:	4b4b      	ldr	r3, [pc, #300]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	4b4a      	ldr	r3, [pc, #296]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004d58:	21e0      	movs	r1, #224	; 0xe0
 8004d5a:	00c9      	lsls	r1, r1, #3
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d60:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	22f0      	movs	r2, #240	; 0xf0
 8004d66:	4393      	bics	r3, r2
 8004d68:	0019      	movs	r1, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	4b44      	ldr	r3, [pc, #272]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d040      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d107      	bne.n	8004d96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b3e      	ldr	r3, [pc, #248]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d114      	bne.n	8004dbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e06e      	b.n	8004e74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	049b      	lsls	r3, r3, #18
 8004da6:	4013      	ands	r3, r2
 8004da8:	d108      	bne.n	8004dbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e062      	b.n	8004e74 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dae:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2202      	movs	r2, #2
 8004db4:	4013      	ands	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e05b      	b.n	8004e74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dbc:	4b30      	ldr	r3, [pc, #192]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd0:	f7fe fcd6 	bl	8003780 <HAL_GetTick>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd8:	e009      	b.n	8004dee <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dda:	f7fe fcd1 	bl	8003780 <HAL_GetTick>
 8004dde:	0002      	movs	r2, r0
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	4a27      	ldr	r2, [pc, #156]	; (8004e84 <HAL_RCC_ClockConfig+0x18c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e042      	b.n	8004e74 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	220c      	movs	r2, #12
 8004df4:	401a      	ands	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1ec      	bne.n	8004dda <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e00:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_RCC_ClockConfig+0x184>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2201      	movs	r2, #1
 8004e06:	4013      	ands	r3, r2
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d211      	bcs.n	8004e32 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCC_ClockConfig+0x184>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2201      	movs	r2, #1
 8004e14:	4393      	bics	r3, r2
 8004e16:	0019      	movs	r1, r3
 8004e18:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <HAL_RCC_ClockConfig+0x184>)
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_RCC_ClockConfig+0x184>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	4013      	ands	r3, r2
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e020      	b.n	8004e74 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2204      	movs	r2, #4
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <HAL_RCC_ClockConfig+0x190>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e50:	f000 f820 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e54:	0001      	movs	r1, r0
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_RCC_ClockConfig+0x188>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	220f      	movs	r2, #15
 8004e5e:	4013      	ands	r3, r2
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <HAL_RCC_ClockConfig+0x194>)
 8004e62:	5cd3      	ldrb	r3, [r2, r3]
 8004e64:	000a      	movs	r2, r1
 8004e66:	40da      	lsrs	r2, r3
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_ClockConfig+0x198>)
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	f7fe fc41 	bl	80036f4 <HAL_InitTick>
  
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b004      	add	sp, #16
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40022000 	.word	0x40022000
 8004e80:	40021000 	.word	0x40021000
 8004e84:	00001388 	.word	0x00001388
 8004e88:	fffff8ff 	.word	0xfffff8ff
 8004e8c:	08008210 	.word	0x08008210
 8004e90:	20000000 	.word	0x20000000

08004e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b08f      	sub	sp, #60	; 0x3c
 8004e98:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004e9a:	2314      	movs	r3, #20
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ea0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004ea2:	c313      	stmia	r3!, {r0, r1, r4}
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	4a29      	ldr	r2, [pc, #164]	; (8004f50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004eac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004eae:	c313      	stmia	r3!, {r0, r1, r4}
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb8:	2300      	movs	r3, #0
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004ec8:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	220c      	movs	r2, #12
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d002      	beq.n	8004ede <HAL_RCC_GetSysClockFreq+0x4a>
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d003      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x50>
 8004edc:	e02d      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ede:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ee2:	e02d      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	0c9b      	lsrs	r3, r3, #18
 8004ee8:	220f      	movs	r2, #15
 8004eea:	4013      	ands	r3, r2
 8004eec:	2214      	movs	r2, #20
 8004eee:	18ba      	adds	r2, r7, r2
 8004ef0:	5cd3      	ldrb	r3, [r2, r3]
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ef4:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	220f      	movs	r2, #15
 8004efa:	4013      	ands	r3, r2
 8004efc:	1d3a      	adds	r2, r7, #4
 8004efe:	5cd3      	ldrb	r3, [r2, r3]
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	025b      	lsls	r3, r3, #9
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f0e:	4812      	ldr	r0, [pc, #72]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f10:	f7fb f8fa 	bl	8000108 <__udivsi3>
 8004f14:	0003      	movs	r3, r0
 8004f16:	001a      	movs	r2, r3
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	4353      	muls	r3, r2
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1e:	e009      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f22:	000a      	movs	r2, r1
 8004f24:	0152      	lsls	r2, r2, #5
 8004f26:	1a52      	subs	r2, r2, r1
 8004f28:	0193      	lsls	r3, r2, #6
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	185b      	adds	r3, r3, r1
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f38:	e002      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f3a:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b00f      	add	sp, #60	; 0x3c
 8004f48:	bd90      	pop	{r4, r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	08005f24 	.word	0x08005f24
 8004f50:	08005f34 	.word	0x08005f34
 8004f54:	40021000 	.word	0x40021000
 8004f58:	007a1200 	.word	0x007a1200

08004f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f60:	4b02      	ldr	r3, [pc, #8]	; (8004f6c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	20000000 	.word	0x20000000

08004f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004f74:	f7ff fff2 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004f78:	0001      	movs	r1, r0
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	2207      	movs	r2, #7
 8004f82:	4013      	ands	r3, r2
 8004f84:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	40d9      	lsrs	r1, r3
 8004f8a:	000b      	movs	r3, r1
}    
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	40021000 	.word	0x40021000
 8004f98:	08008220 	.word	0x08008220

08004f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	025b      	lsls	r3, r3, #9
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d100      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004fb8:	e08f      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004fba:	2317      	movs	r3, #23
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc2:	4b57      	ldr	r3, [pc, #348]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	055b      	lsls	r3, r3, #21
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d111      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fce:	4b54      	ldr	r3, [pc, #336]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fd0:	69da      	ldr	r2, [r3, #28]
 8004fd2:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fd4:	2180      	movs	r1, #128	; 0x80
 8004fd6:	0549      	lsls	r1, r1, #21
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	61da      	str	r2, [r3, #28]
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	055b      	lsls	r3, r3, #21
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fea:	2317      	movs	r3, #23
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d11a      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffe:	4b49      	ldr	r3, [pc, #292]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b48      	ldr	r3, [pc, #288]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005004:	2180      	movs	r1, #128	; 0x80
 8005006:	0049      	lsls	r1, r1, #1
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500c:	f7fe fbb8 	bl	8003780 <HAL_GetTick>
 8005010:	0003      	movs	r3, r0
 8005012:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005016:	f7fe fbb3 	bl	8003780 <HAL_GetTick>
 800501a:	0002      	movs	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b64      	cmp	r3, #100	; 0x64
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e077      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	4b3e      	ldr	r3, [pc, #248]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4013      	ands	r3, r2
 8005032:	d0f0      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005034:	4b3a      	ldr	r3, [pc, #232]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	23c0      	movs	r3, #192	; 0xc0
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d034      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	23c0      	movs	r3, #192	; 0xc0
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4013      	ands	r3, r2
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	429a      	cmp	r2, r3
 8005054:	d02c      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005056:	4b32      	ldr	r3, [pc, #200]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4a33      	ldr	r2, [pc, #204]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005060:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	4b2e      	ldr	r3, [pc, #184]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	0249      	lsls	r1, r1, #9
 800506a:	430a      	orrs	r2, r1
 800506c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800506e:	4b2c      	ldr	r3, [pc, #176]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005070:	6a1a      	ldr	r2, [r3, #32]
 8005072:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005074:	492d      	ldr	r1, [pc, #180]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005076:	400a      	ands	r2, r1
 8005078:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800507a:	4b29      	ldr	r3, [pc, #164]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	4013      	ands	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005088:	f7fe fb7a 	bl	8003780 <HAL_GetTick>
 800508c:	0003      	movs	r3, r0
 800508e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	e009      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fe fb75 	bl	8003780 <HAL_GetTick>
 8005096:	0002      	movs	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e038      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a6:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	2202      	movs	r2, #2
 80050ac:	4013      	ands	r3, r2
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b0:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	0019      	movs	r1, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050c0:	430a      	orrs	r2, r1
 80050c2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050c4:	2317      	movs	r3, #23
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ce:	4b14      	ldr	r3, [pc, #80]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050d0:	69da      	ldr	r2, [r3, #28]
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050d4:	4917      	ldr	r1, [pc, #92]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	4013      	ands	r3, r2
 80050e2:	d009      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	2203      	movs	r2, #3
 80050ea:	4393      	bics	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050f4:	430a      	orrs	r2, r1
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2220      	movs	r2, #32
 80050fe:	4013      	ands	r3, r2
 8005100:	d009      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	2210      	movs	r2, #16
 8005108:	4393      	bics	r3, r2
 800510a:	0019      	movs	r1, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	4b03      	ldr	r3, [pc, #12]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005112:	430a      	orrs	r2, r1
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	0018      	movs	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	b006      	add	sp, #24
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	40007000 	.word	0x40007000
 8005128:	fffffcff 	.word	0xfffffcff
 800512c:	fffeffff 	.word	0xfffeffff
 8005130:	00001388 	.word	0x00001388
 8005134:	efffffff 	.word	0xefffffff

08005138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e08a      	b.n	8005260 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	225d      	movs	r2, #93	; 0x5d
 8005154:	5c9b      	ldrb	r3, [r3, r2]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d107      	bne.n	800516c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	225c      	movs	r2, #92	; 0x5c
 8005160:	2100      	movs	r1, #0
 8005162:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0018      	movs	r0, r3
 8005168:	f7fe f9ce 	bl	8003508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	225d      	movs	r2, #93	; 0x5d
 8005170:	2102      	movs	r1, #2
 8005172:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2140      	movs	r1, #64	; 0x40
 8005180:	438a      	bics	r2, r1
 8005182:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	23e0      	movs	r3, #224	; 0xe0
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	429a      	cmp	r2, r3
 800518e:	d902      	bls.n	8005196 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e002      	b.n	800519c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005196:	2380      	movs	r3, #128	; 0x80
 8005198:	015b      	lsls	r3, r3, #5
 800519a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	23f0      	movs	r3, #240	; 0xf0
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d008      	beq.n	80051ba <HAL_SPI_Init+0x82>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	23e0      	movs	r3, #224	; 0xe0
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d002      	beq.n	80051ba <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10c      	bne.n	80051dc <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	23e0      	movs	r3, #224	; 0xe0
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d903      	bls.n	80051d6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
 80051d4:	e002      	b.n	80051dc <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6999      	ldr	r1, [r3, #24]
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	400b      	ands	r3, r1
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	431a      	orrs	r2, r3
 800520a:	0011      	movs	r1, r2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	2204      	movs	r2, #4
 8005220:	401a      	ands	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	431a      	orrs	r2, r3
 8005234:	0011      	movs	r1, r2
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4907      	ldr	r1, [pc, #28]	; (8005268 <HAL_SPI_Init+0x130>)
 800524c:	400a      	ands	r2, r1
 800524e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	225d      	movs	r2, #93	; 0x5d
 800525a:	2101      	movs	r1, #1
 800525c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b004      	add	sp, #16
 8005266:	bd80      	pop	{r7, pc}
 8005268:	fffff7ff 	.word	0xfffff7ff

0800526c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	1dbb      	adds	r3, r7, #6
 800527a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800527c:	231f      	movs	r3, #31
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	225c      	movs	r2, #92	; 0x5c
 8005288:	5c9b      	ldrb	r3, [r3, r2]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_SPI_Transmit+0x26>
 800528e:	2302      	movs	r3, #2
 8005290:	e169      	b.n	8005566 <HAL_SPI_Transmit+0x2fa>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	225c      	movs	r2, #92	; 0x5c
 8005296:	2101      	movs	r1, #1
 8005298:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800529a:	f7fe fa71 	bl	8003780 <HAL_GetTick>
 800529e:	0003      	movs	r3, r0
 80052a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052a2:	2316      	movs	r3, #22
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	1dba      	adds	r2, r7, #6
 80052a8:	8812      	ldrh	r2, [r2, #0]
 80052aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	225d      	movs	r2, #93	; 0x5d
 80052b0:	5c9b      	ldrb	r3, [r3, r2]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d004      	beq.n	80052c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80052b8:	231f      	movs	r3, #31
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	2202      	movs	r2, #2
 80052be:	701a      	strb	r2, [r3, #0]
    goto error;
 80052c0:	e146      	b.n	8005550 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_SPI_Transmit+0x64>
 80052c8:	1dbb      	adds	r3, r7, #6
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80052d0:	231f      	movs	r3, #31
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80052d8:	e13a      	b.n	8005550 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	225d      	movs	r2, #93	; 0x5d
 80052de:	2103      	movs	r1, #3
 80052e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1dba      	adds	r2, r7, #6
 80052f2:	8812      	ldrh	r2, [r2, #0]
 80052f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1dba      	adds	r2, r7, #6
 80052fa:	8812      	ldrh	r2, [r2, #0]
 80052fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2244      	movs	r2, #68	; 0x44
 8005308:	2100      	movs	r1, #0
 800530a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2246      	movs	r2, #70	; 0x46
 8005310:	2100      	movs	r1, #0
 8005312:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	429a      	cmp	r2, r3
 800532a:	d108      	bne.n	800533e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	01c9      	lsls	r1, r1, #7
 800533a:	430a      	orrs	r2, r1
 800533c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2240      	movs	r2, #64	; 0x40
 8005346:	4013      	ands	r3, r2
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d007      	beq.n	800535c <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2140      	movs	r1, #64	; 0x40
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	23e0      	movs	r3, #224	; 0xe0
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	429a      	cmp	r2, r3
 8005366:	d94e      	bls.n	8005406 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d004      	beq.n	800537a <HAL_SPI_Transmit+0x10e>
 8005370:	2316      	movs	r3, #22
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d13f      	bne.n	80053fa <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	881a      	ldrh	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800539e:	e02c      	b.n	80053fa <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2202      	movs	r2, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d112      	bne.n	80053d4 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	1c9a      	adds	r2, r3, #2
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053d2:	e012      	b.n	80053fa <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d4:	f7fe f9d4 	bl	8003780 <HAL_GetTick>
 80053d8:	0002      	movs	r2, r0
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d802      	bhi.n	80053ea <HAL_SPI_Transmit+0x17e>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	3301      	adds	r3, #1
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Transmit+0x184>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80053f0:	231f      	movs	r3, #31
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2203      	movs	r2, #3
 80053f6:	701a      	strb	r2, [r3, #0]
          goto error;
 80053f8:	e0aa      	b.n	8005550 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1cd      	bne.n	80053a0 <HAL_SPI_Transmit+0x134>
 8005404:	e080      	b.n	8005508 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_SPI_Transmit+0x1ae>
 800540e:	2316      	movs	r3, #22
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d000      	beq.n	800541a <HAL_SPI_Transmit+0x1ae>
 8005418:	e071      	b.n	80054fe <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d912      	bls.n	800544a <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	881a      	ldrh	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	1c9a      	adds	r2, r3, #2
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b02      	subs	r3, #2
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005448:	e059      	b.n	80054fe <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	7812      	ldrb	r2, [r2, #0]
 8005456:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005470:	e045      	b.n	80054fe <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2202      	movs	r2, #2
 800547a:	4013      	ands	r3, r2
 800547c:	2b02      	cmp	r3, #2
 800547e:	d12b      	bne.n	80054d8 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	d912      	bls.n	80054b0 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	881a      	ldrh	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	1c9a      	adds	r2, r3, #2
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b02      	subs	r3, #2
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054ae:	e026      	b.n	80054fe <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	7812      	ldrb	r2, [r2, #0]
 80054bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054d6:	e012      	b.n	80054fe <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d8:	f7fe f952 	bl	8003780 <HAL_GetTick>
 80054dc:	0002      	movs	r2, r0
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d802      	bhi.n	80054ee <HAL_SPI_Transmit+0x282>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	d102      	bne.n	80054f4 <HAL_SPI_Transmit+0x288>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 80054f4:	231f      	movs	r3, #31
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2203      	movs	r2, #3
 80054fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80054fc:	e028      	b.n	8005550 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1b4      	bne.n	8005472 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	0018      	movs	r0, r3
 8005510:	f000 f912 	bl	8005738 <SPI_EndRxTxTransaction>
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d002      	beq.n	800551e <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005526:	2300      	movs	r3, #0
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8005544:	231f      	movs	r3, #31
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	2201      	movs	r2, #1
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e000      	b.n	8005550 <HAL_SPI_Transmit+0x2e4>
  }

error:
 800554e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	225d      	movs	r2, #93	; 0x5d
 8005554:	2101      	movs	r1, #1
 8005556:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	225c      	movs	r2, #92	; 0x5c
 800555c:	2100      	movs	r1, #0
 800555e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005560:	231f      	movs	r3, #31
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	781b      	ldrb	r3, [r3, #0]
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b008      	add	sp, #32
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	1dfb      	adds	r3, r7, #7
 800557e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005580:	e050      	b.n	8005624 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	d04d      	beq.n	8005624 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005588:	f7fe f8fa 	bl	8003780 <HAL_GetTick>
 800558c:	0002      	movs	r2, r0
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d902      	bls.n	800559e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d142      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	21e0      	movs	r1, #224	; 0xe0
 80055aa:	438a      	bics	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	2382      	movs	r3, #130	; 0x82
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d113      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d005      	beq.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d107      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2140      	movs	r1, #64	; 0x40
 80055de:	438a      	bics	r2, r1
 80055e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	019b      	lsls	r3, r3, #6
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d110      	bne.n	8005610 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4914      	ldr	r1, [pc, #80]	; (800564c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80055fa:	400a      	ands	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2180      	movs	r1, #128	; 0x80
 800560a:	0189      	lsls	r1, r1, #6
 800560c:	430a      	orrs	r2, r1
 800560e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	225d      	movs	r2, #93	; 0x5d
 8005614:	2101      	movs	r1, #1
 8005616:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	225c      	movs	r2, #92	; 0x5c
 800561c:	2100      	movs	r1, #0
 800561e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e00f      	b.n	8005644 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4013      	ands	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	425a      	negs	r2, r3
 8005634:	4153      	adcs	r3, r2
 8005636:	b2db      	uxtb	r3, r3
 8005638:	001a      	movs	r2, r3
 800563a:	1dfb      	adds	r3, r7, #7
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d19f      	bne.n	8005582 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b004      	add	sp, #16
 800564a:	bd80      	pop	{r7, pc}
 800564c:	ffffdfff 	.word	0xffffdfff

08005650 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800565e:	e05c      	b.n	800571a <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	23c0      	movs	r3, #192	; 0xc0
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	429a      	cmp	r2, r3
 8005668:	d106      	bne.n	8005678 <SPI_WaitFifoStateUntilTimeout+0x28>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	330c      	adds	r3, #12
 8005676:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	d04d      	beq.n	800571a <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800567e:	f7fe f87f 	bl	8003780 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d902      	bls.n	8005694 <SPI_WaitFifoStateUntilTimeout+0x44>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d142      	bne.n	800571a <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	21e0      	movs	r1, #224	; 0xe0
 80056a0:	438a      	bics	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	2382      	movs	r3, #130	; 0x82
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d113      	bne.n	80056d8 <SPI_WaitFifoStateUntilTimeout+0x88>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d005      	beq.n	80056c8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d107      	bne.n	80056d8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2140      	movs	r1, #64	; 0x40
 80056d4:	438a      	bics	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	019b      	lsls	r3, r3, #6
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d110      	bne.n	8005706 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4911      	ldr	r1, [pc, #68]	; (8005734 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80056f0:	400a      	ands	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	0189      	lsls	r1, r1, #6
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	225d      	movs	r2, #93	; 0x5d
 800570a:	2101      	movs	r1, #1
 800570c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	225c      	movs	r2, #92	; 0x5c
 8005712:	2100      	movs	r1, #0
 8005714:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e008      	b.n	800572c <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d19a      	bne.n	8005660 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	0018      	movs	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	b004      	add	sp, #16
 8005732:	bd80      	pop	{r7, pc}
 8005734:	ffffdfff 	.word	0xffffdfff

08005738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	23c0      	movs	r3, #192	; 0xc0
 8005748:	0159      	lsls	r1, r3, #5
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	0013      	movs	r3, r2
 8005752:	2200      	movs	r2, #0
 8005754:	f7ff ff7c 	bl	8005650 <SPI_WaitFifoStateUntilTimeout>
 8005758:	1e03      	subs	r3, r0, #0
 800575a:	d007      	beq.n	800576c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005760:	2220      	movs	r2, #32
 8005762:	431a      	orrs	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e027      	b.n	80057bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	0013      	movs	r3, r2
 8005776:	2200      	movs	r2, #0
 8005778:	2180      	movs	r1, #128	; 0x80
 800577a:	f7ff fef9 	bl	8005570 <SPI_WaitFlagStateUntilTimeout>
 800577e:	1e03      	subs	r3, r0, #0
 8005780:	d007      	beq.n	8005792 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005786:	2220      	movs	r2, #32
 8005788:	431a      	orrs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e014      	b.n	80057bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	23c0      	movs	r3, #192	; 0xc0
 8005796:	00d9      	lsls	r1, r3, #3
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	0013      	movs	r3, r2
 80057a0:	2200      	movs	r2, #0
 80057a2:	f7ff ff55 	bl	8005650 <SPI_WaitFifoStateUntilTimeout>
 80057a6:	1e03      	subs	r3, r0, #0
 80057a8:	d007      	beq.n	80057ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	2220      	movs	r2, #32
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e000      	b.n	80057bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b004      	add	sp, #16
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e044      	b.n	8005860 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2270      	movs	r2, #112	; 0x70
 80057e2:	2100      	movs	r1, #0
 80057e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7fd fed9 	bl	80035a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2224      	movs	r2, #36	; 0x24
 80057f2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2101      	movs	r1, #1
 8005800:	438a      	bics	r2, r1
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	0018      	movs	r0, r3
 8005808:	f000 f830 	bl	800586c <UART_SetConfig>
 800580c:	0003      	movs	r3, r0
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e024      	b.n	8005860 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f000 f9a9 	bl	8005b78 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	490d      	ldr	r1, [pc, #52]	; (8005868 <HAL_UART_Init+0xa4>)
 8005832:	400a      	ands	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2108      	movs	r1, #8
 8005842:	438a      	bics	r2, r1
 8005844:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2101      	movs	r1, #1
 8005852:	430a      	orrs	r2, r1
 8005854:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0018      	movs	r0, r3
 800585a:	f000 fa41 	bl	8005ce0 <UART_CheckIdleState>
 800585e:	0003      	movs	r3, r0
}
 8005860:	0018      	movs	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}
 8005868:	fffff7ff 	.word	0xfffff7ff

0800586c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005874:	2300      	movs	r3, #0
 8005876:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005878:	2317      	movs	r3, #23
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4aad      	ldr	r2, [pc, #692]	; (8005b54 <UART_SetConfig+0x2e8>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	0019      	movs	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4aa8      	ldr	r2, [pc, #672]	; (8005b58 <UART_SetConfig+0x2ec>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	0019      	movs	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a9f      	ldr	r2, [pc, #636]	; (8005b5c <UART_SetConfig+0x2f0>)
 80058de:	4013      	ands	r3, r2
 80058e0:	0019      	movs	r1, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a9b      	ldr	r2, [pc, #620]	; (8005b60 <UART_SetConfig+0x2f4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d125      	bne.n	8005942 <UART_SetConfig+0xd6>
 80058f6:	4b9b      	ldr	r3, [pc, #620]	; (8005b64 <UART_SetConfig+0x2f8>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	2203      	movs	r2, #3
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d00f      	beq.n	8005922 <UART_SetConfig+0xb6>
 8005902:	d304      	bcc.n	800590e <UART_SetConfig+0xa2>
 8005904:	2b02      	cmp	r3, #2
 8005906:	d011      	beq.n	800592c <UART_SetConfig+0xc0>
 8005908:	2b03      	cmp	r3, #3
 800590a:	d005      	beq.n	8005918 <UART_SetConfig+0xac>
 800590c:	e013      	b.n	8005936 <UART_SetConfig+0xca>
 800590e:	231f      	movs	r3, #31
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e022      	b.n	800595e <UART_SetConfig+0xf2>
 8005918:	231f      	movs	r3, #31
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2202      	movs	r2, #2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e01d      	b.n	800595e <UART_SetConfig+0xf2>
 8005922:	231f      	movs	r3, #31
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	2204      	movs	r2, #4
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e018      	b.n	800595e <UART_SetConfig+0xf2>
 800592c:	231f      	movs	r3, #31
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	2208      	movs	r2, #8
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e013      	b.n	800595e <UART_SetConfig+0xf2>
 8005936:	231f      	movs	r3, #31
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	2210      	movs	r2, #16
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	e00d      	b.n	800595e <UART_SetConfig+0xf2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a88      	ldr	r2, [pc, #544]	; (8005b68 <UART_SetConfig+0x2fc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d104      	bne.n	8005956 <UART_SetConfig+0xea>
 800594c:	231f      	movs	r3, #31
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e003      	b.n	800595e <UART_SetConfig+0xf2>
 8005956:	231f      	movs	r3, #31
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	2210      	movs	r2, #16
 800595c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69da      	ldr	r2, [r3, #28]
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	429a      	cmp	r2, r3
 8005968:	d000      	beq.n	800596c <UART_SetConfig+0x100>
 800596a:	e07d      	b.n	8005a68 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800596c:	231f      	movs	r3, #31
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d01c      	beq.n	80059b0 <UART_SetConfig+0x144>
 8005976:	dc02      	bgt.n	800597e <UART_SetConfig+0x112>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <UART_SetConfig+0x11c>
 800597c:	e04b      	b.n	8005a16 <UART_SetConfig+0x1aa>
 800597e:	2b04      	cmp	r3, #4
 8005980:	d025      	beq.n	80059ce <UART_SetConfig+0x162>
 8005982:	2b08      	cmp	r3, #8
 8005984:	d037      	beq.n	80059f6 <UART_SetConfig+0x18a>
 8005986:	e046      	b.n	8005a16 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005988:	f7ff faf2 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 800598c:	0003      	movs	r3, r0
 800598e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	005a      	lsls	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	18d2      	adds	r2, r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	0019      	movs	r1, r3
 80059a2:	0010      	movs	r0, r2
 80059a4:	f7fa fbb0 	bl	8000108 <__udivsi3>
 80059a8:	0003      	movs	r3, r0
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	61bb      	str	r3, [r7, #24]
        break;
 80059ae:	e037      	b.n	8005a20 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	4a6d      	ldr	r2, [pc, #436]	; (8005b6c <UART_SetConfig+0x300>)
 80059b8:	189a      	adds	r2, r3, r2
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	0019      	movs	r1, r3
 80059c0:	0010      	movs	r0, r2
 80059c2:	f7fa fba1 	bl	8000108 <__udivsi3>
 80059c6:	0003      	movs	r3, r0
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	61bb      	str	r3, [r7, #24]
        break;
 80059cc:	e028      	b.n	8005a20 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ce:	f7ff fa61 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 80059d2:	0003      	movs	r3, r0
 80059d4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	005a      	lsls	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	085b      	lsrs	r3, r3, #1
 80059e0:	18d2      	adds	r2, r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	0019      	movs	r1, r3
 80059e8:	0010      	movs	r0, r2
 80059ea:	f7fa fb8d 	bl	8000108 <__udivsi3>
 80059ee:	0003      	movs	r3, r0
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	61bb      	str	r3, [r7, #24]
        break;
 80059f4:	e014      	b.n	8005a20 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	0252      	lsls	r2, r2, #9
 8005a00:	189a      	adds	r2, r3, r2
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	0019      	movs	r1, r3
 8005a08:	0010      	movs	r0, r2
 8005a0a:	f7fa fb7d 	bl	8000108 <__udivsi3>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	61bb      	str	r3, [r7, #24]
        break;
 8005a14:	e004      	b.n	8005a20 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8005a16:	2317      	movs	r3, #23
 8005a18:	18fb      	adds	r3, r7, r3
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
        break;
 8005a1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	d91b      	bls.n	8005a5e <UART_SetConfig+0x1f2>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	4a51      	ldr	r2, [pc, #324]	; (8005b70 <UART_SetConfig+0x304>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d817      	bhi.n	8005a5e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	200a      	movs	r0, #10
 8005a34:	183b      	adds	r3, r7, r0
 8005a36:	210f      	movs	r1, #15
 8005a38:	438a      	bics	r2, r1
 8005a3a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2207      	movs	r2, #7
 8005a44:	4013      	ands	r3, r2
 8005a46:	b299      	uxth	r1, r3
 8005a48:	183b      	adds	r3, r7, r0
 8005a4a:	183a      	adds	r2, r7, r0
 8005a4c:	8812      	ldrh	r2, [r2, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	183a      	adds	r2, r7, r0
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	e06c      	b.n	8005b38 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005a5e:	2317      	movs	r3, #23
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	2201      	movs	r2, #1
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e067      	b.n	8005b38 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8005a68:	231f      	movs	r3, #31
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d01b      	beq.n	8005aaa <UART_SetConfig+0x23e>
 8005a72:	dc02      	bgt.n	8005a7a <UART_SetConfig+0x20e>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <UART_SetConfig+0x218>
 8005a78:	e049      	b.n	8005b0e <UART_SetConfig+0x2a2>
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d024      	beq.n	8005ac8 <UART_SetConfig+0x25c>
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d035      	beq.n	8005aee <UART_SetConfig+0x282>
 8005a82:	e044      	b.n	8005b0e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a84:	f7ff fa74 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	085a      	lsrs	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	18d2      	adds	r2, r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	0010      	movs	r0, r2
 8005a9e:	f7fa fb33 	bl	8000108 <__udivsi3>
 8005aa2:	0003      	movs	r3, r0
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	61bb      	str	r3, [r7, #24]
        break;
 8005aa8:	e036      	b.n	8005b18 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	4a30      	ldr	r2, [pc, #192]	; (8005b74 <UART_SetConfig+0x308>)
 8005ab2:	189a      	adds	r2, r3, r2
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	0019      	movs	r1, r3
 8005aba:	0010      	movs	r0, r2
 8005abc:	f7fa fb24 	bl	8000108 <__udivsi3>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	61bb      	str	r3, [r7, #24]
        break;
 8005ac6:	e027      	b.n	8005b18 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac8:	f7ff f9e4 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8005acc:	0003      	movs	r3, r0
 8005ace:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	085a      	lsrs	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	18d2      	adds	r2, r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	0019      	movs	r1, r3
 8005ae0:	0010      	movs	r0, r2
 8005ae2:	f7fa fb11 	bl	8000108 <__udivsi3>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	61bb      	str	r3, [r7, #24]
        break;
 8005aec:	e014      	b.n	8005b18 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	2280      	movs	r2, #128	; 0x80
 8005af6:	0212      	lsls	r2, r2, #8
 8005af8:	189a      	adds	r2, r3, r2
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	0019      	movs	r1, r3
 8005b00:	0010      	movs	r0, r2
 8005b02:	f7fa fb01 	bl	8000108 <__udivsi3>
 8005b06:	0003      	movs	r3, r0
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	61bb      	str	r3, [r7, #24]
        break;
 8005b0c:	e004      	b.n	8005b18 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8005b0e:	2317      	movs	r3, #23
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	2201      	movs	r2, #1
 8005b14:	701a      	strb	r2, [r3, #0]
        break;
 8005b16:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	d908      	bls.n	8005b30 <UART_SetConfig+0x2c4>
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <UART_SetConfig+0x304>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d804      	bhi.n	8005b30 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e003      	b.n	8005b38 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005b30:	2317      	movs	r3, #23
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	2201      	movs	r2, #1
 8005b36:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005b44:	2317      	movs	r3, #23
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	781b      	ldrb	r3, [r3, #0]
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b008      	add	sp, #32
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	ffff69f3 	.word	0xffff69f3
 8005b58:	ffffcfff 	.word	0xffffcfff
 8005b5c:	fffff4ff 	.word	0xfffff4ff
 8005b60:	40013800 	.word	0x40013800
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40004400 	.word	0x40004400
 8005b6c:	00f42400 	.word	0x00f42400
 8005b70:	0000ffff 	.word	0x0000ffff
 8005b74:	007a1200 	.word	0x007a1200

08005b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2201      	movs	r2, #1
 8005b86:	4013      	ands	r3, r2
 8005b88:	d00b      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4a4a      	ldr	r2, [pc, #296]	; (8005cbc <UART_AdvFeatureConfig+0x144>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	0019      	movs	r1, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	4a43      	ldr	r2, [pc, #268]	; (8005cc0 <UART_AdvFeatureConfig+0x148>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2204      	movs	r2, #4
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4a3b      	ldr	r2, [pc, #236]	; (8005cc4 <UART_AdvFeatureConfig+0x14c>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	0019      	movs	r1, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2208      	movs	r2, #8
 8005bec:	4013      	ands	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4a34      	ldr	r2, [pc, #208]	; (8005cc8 <UART_AdvFeatureConfig+0x150>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <UART_AdvFeatureConfig+0x154>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	2220      	movs	r2, #32
 8005c30:	4013      	ands	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4a25      	ldr	r2, [pc, #148]	; (8005cd0 <UART_AdvFeatureConfig+0x158>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	0019      	movs	r1, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2240      	movs	r2, #64	; 0x40
 8005c52:	4013      	ands	r3, r2
 8005c54:	d01d      	beq.n	8005c92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <UART_AdvFeatureConfig+0x15c>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	0019      	movs	r1, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	035b      	lsls	r3, r3, #13
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d10b      	bne.n	8005c92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <UART_AdvFeatureConfig+0x160>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	0019      	movs	r1, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	2280      	movs	r2, #128	; 0x80
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d00b      	beq.n	8005cb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4a0e      	ldr	r2, [pc, #56]	; (8005cdc <UART_AdvFeatureConfig+0x164>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	605a      	str	r2, [r3, #4]
  }
}
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	fffdffff 	.word	0xfffdffff
 8005cc0:	fffeffff 	.word	0xfffeffff
 8005cc4:	fffbffff 	.word	0xfffbffff
 8005cc8:	ffff7fff 	.word	0xffff7fff
 8005ccc:	ffffefff 	.word	0xffffefff
 8005cd0:	ffffdfff 	.word	0xffffdfff
 8005cd4:	ffefffff 	.word	0xffefffff
 8005cd8:	ff9fffff 	.word	0xff9fffff
 8005cdc:	fff7ffff 	.word	0xfff7ffff

08005ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005cee:	f7fd fd47 	bl	8003780 <HAL_GetTick>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d10d      	bne.n	8005d20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	2380      	movs	r3, #128	; 0x80
 8005d08:	0399      	lsls	r1, r3, #14
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <UART_CheckIdleState+0x88>)
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	0013      	movs	r3, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	f000 f82a 	bl	8005d6c <UART_WaitOnFlagUntilTimeout>
 8005d18:	1e03      	subs	r3, r0, #0
 8005d1a:	d001      	beq.n	8005d20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e01f      	b.n	8005d60 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2204      	movs	r2, #4
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d10d      	bne.n	8005d4a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	03d9      	lsls	r1, r3, #15
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <UART_CheckIdleState+0x88>)
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	0013      	movs	r3, r2
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f000 f815 	bl	8005d6c <UART_WaitOnFlagUntilTimeout>
 8005d42:	1e03      	subs	r3, r0, #0
 8005d44:	d001      	beq.n	8005d4a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e00a      	b.n	8005d60 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2270      	movs	r2, #112	; 0x70
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b004      	add	sp, #16
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	01ffffff 	.word	0x01ffffff

08005d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	1dfb      	adds	r3, r7, #7
 8005d7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7c:	e05d      	b.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	3301      	adds	r3, #1
 8005d82:	d05a      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d84:	f7fd fcfc 	bl	8003780 <HAL_GetTick>
 8005d88:	0002      	movs	r2, r0
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d302      	bcc.n	8005d9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d11b      	bne.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	492f      	ldr	r1, [pc, #188]	; (8005e64 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005da6:	400a      	ands	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2101      	movs	r1, #1
 8005db6:	438a      	bics	r2, r1
 8005db8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2270      	movs	r2, #112	; 0x70
 8005dca:	2100      	movs	r1, #0
 8005dcc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e043      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d02d      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	401a      	ands	r2, r3
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d123      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2280      	movs	r2, #128	; 0x80
 8005df8:	0112      	lsls	r2, r2, #4
 8005dfa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4917      	ldr	r1, [pc, #92]	; (8005e64 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005e08:	400a      	ands	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2101      	movs	r1, #1
 8005e18:	438a      	bics	r2, r1
 8005e1a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2270      	movs	r2, #112	; 0x70
 8005e32:	2100      	movs	r1, #0
 8005e34:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e00f      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	425a      	negs	r2, r3
 8005e4a:	4153      	adcs	r3, r2
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	001a      	movs	r2, r3
 8005e50:	1dfb      	adds	r3, r7, #7
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d092      	beq.n	8005d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b004      	add	sp, #16
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	fffffe5f 	.word	0xfffffe5f

08005e68 <__libc_init_array>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	4d0c      	ldr	r5, [pc, #48]	; (8005ea0 <__libc_init_array+0x38>)
 8005e6e:	4c0d      	ldr	r4, [pc, #52]	; (8005ea4 <__libc_init_array+0x3c>)
 8005e70:	1b64      	subs	r4, r4, r5
 8005e72:	10a4      	asrs	r4, r4, #2
 8005e74:	42a6      	cmp	r6, r4
 8005e76:	d109      	bne.n	8005e8c <__libc_init_array+0x24>
 8005e78:	2600      	movs	r6, #0
 8005e7a:	f000 f845 	bl	8005f08 <_init>
 8005e7e:	4d0a      	ldr	r5, [pc, #40]	; (8005ea8 <__libc_init_array+0x40>)
 8005e80:	4c0a      	ldr	r4, [pc, #40]	; (8005eac <__libc_init_array+0x44>)
 8005e82:	1b64      	subs	r4, r4, r5
 8005e84:	10a4      	asrs	r4, r4, #2
 8005e86:	42a6      	cmp	r6, r4
 8005e88:	d105      	bne.n	8005e96 <__libc_init_array+0x2e>
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	00b3      	lsls	r3, r6, #2
 8005e8e:	58eb      	ldr	r3, [r5, r3]
 8005e90:	4798      	blx	r3
 8005e92:	3601      	adds	r6, #1
 8005e94:	e7ee      	b.n	8005e74 <__libc_init_array+0xc>
 8005e96:	00b3      	lsls	r3, r6, #2
 8005e98:	58eb      	ldr	r3, [r5, r3]
 8005e9a:	4798      	blx	r3
 8005e9c:	3601      	adds	r6, #1
 8005e9e:	e7f2      	b.n	8005e86 <__libc_init_array+0x1e>
 8005ea0:	08008228 	.word	0x08008228
 8005ea4:	08008228 	.word	0x08008228
 8005ea8:	08008228 	.word	0x08008228
 8005eac:	0800822c 	.word	0x0800822c

08005eb0 <memset>:
 8005eb0:	0003      	movs	r3, r0
 8005eb2:	1812      	adds	r2, r2, r0
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d100      	bne.n	8005eba <memset+0xa>
 8005eb8:	4770      	bx	lr
 8005eba:	7019      	strb	r1, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	e7f9      	b.n	8005eb4 <memset+0x4>

08005ec0 <roundf>:
 8005ec0:	0dc3      	lsrs	r3, r0, #23
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	3b7f      	subs	r3, #127	; 0x7f
 8005ec6:	b510      	push	{r4, lr}
 8005ec8:	0002      	movs	r2, r0
 8005eca:	2b16      	cmp	r3, #22
 8005ecc:	dc13      	bgt.n	8005ef6 <roundf+0x36>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da07      	bge.n	8005ee2 <roundf+0x22>
 8005ed2:	0fc0      	lsrs	r0, r0, #31
 8005ed4:	07c0      	lsls	r0, r0, #31
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	d102      	bne.n	8005ee0 <roundf+0x20>
 8005eda:	23fe      	movs	r3, #254	; 0xfe
 8005edc:	059b      	lsls	r3, r3, #22
 8005ede:	4318      	orrs	r0, r3
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	4908      	ldr	r1, [pc, #32]	; (8005f04 <roundf+0x44>)
 8005ee4:	4119      	asrs	r1, r3
 8005ee6:	4201      	tst	r1, r0
 8005ee8:	d0fa      	beq.n	8005ee0 <roundf+0x20>
 8005eea:	2080      	movs	r0, #128	; 0x80
 8005eec:	03c0      	lsls	r0, r0, #15
 8005eee:	4118      	asrs	r0, r3
 8005ef0:	1880      	adds	r0, r0, r2
 8005ef2:	4388      	bics	r0, r1
 8005ef4:	e7f4      	b.n	8005ee0 <roundf+0x20>
 8005ef6:	2b80      	cmp	r3, #128	; 0x80
 8005ef8:	d1f2      	bne.n	8005ee0 <roundf+0x20>
 8005efa:	1c01      	adds	r1, r0, #0
 8005efc:	f7fa facc 	bl	8000498 <__aeabi_fadd>
 8005f00:	e7ee      	b.n	8005ee0 <roundf+0x20>
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	007fffff 	.word	0x007fffff

08005f08 <_init>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0e:	bc08      	pop	{r3}
 8005f10:	469e      	mov	lr, r3
 8005f12:	4770      	bx	lr

08005f14 <_fini>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1a:	bc08      	pop	{r3}
 8005f1c:	469e      	mov	lr, r3
 8005f1e:	4770      	bx	lr
